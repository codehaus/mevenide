/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.mevenide.netbeans.cargo;

import java.io.File;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import org.codehaus.cargo.container.Container;
import org.codehaus.cargo.container.configuration.ConfigurationFactory;
import org.codehaus.cargo.container.property.ServletPropertySet;


/**
 *
 * @author  Milos Kleint (mkleint@codehaus.org)
 */
public class ContainerPanel extends javax.swing.JPanel {
    
    /** Creates new form ContainerPanel */
    public ContainerPanel() {
        initComponents();
        comType.setModel(new DefaultComboBoxModel(CargoServerRegistry.CONTAINER_TYPES));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblType = new javax.swing.JLabel();
        comType = new javax.swing.JComboBox();
        lblInstallDir = new javax.swing.JLabel();
        txtInstallDir = new javax.swing.JTextField();
        btnInstallDir = new javax.swing.JButton();
        cbStart = new javax.swing.JCheckBox();
        lblPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblType.setText("Container Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(lblType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(comType, gridBagConstraints);

        lblInstallDir.setText("Install Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(lblInstallDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtInstallDir, gridBagConstraints);

        btnInstallDir.setText("Browse...");
        btnInstallDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstallDirActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        add(btnInstallDir, gridBagConstraints);

        cbStart.setText("Start Immediately");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbStart, gridBagConstraints);

        lblPort.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(lblPort, gridBagConstraints);

        txtPort.setText("8080");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtPort, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void btnInstallDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstallDirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select Container's Home Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = txtInstallDir.getText();
        if (path.length() > 0) {
            File f = new File(path);
            if (f.exists()) {
                chooser.setSelectedFile(f);
            }
        }
        if ( JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) { //NOI18N
            File projectDir = chooser.getSelectedFile();
            txtInstallDir.setText( projectDir.getAbsolutePath() );
        }

    }//GEN-LAST:event_btnInstallDirActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInstallDir;
    private javax.swing.JCheckBox cbStart;
    private javax.swing.JComboBox comType;
    private javax.swing.JLabel lblInstallDir;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblType;
    private javax.swing.JTextField txtInstallDir;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
    
    public void createContainer() {
        CargoServerRegistry reg = CargoServerRegistry.getInstance();
        Container cont = reg.getFactory().createContainer((String)comType.getSelectedItem());
        File homeDir = new File(txtInstallDir.getText());
        if (homeDir.exists()) {
            cont.setHomeDir(homeDir);
            try {
                cont.setOutput(File.createTempFile(cont.getId(), "log"));
            } catch (IOException exc) {
                
            }
            cont.setConfiguration(reg.getConfigFactory().createConfiguration(cont, ConfigurationFactory.STANDALONE));
            cont.getConfiguration().setProperty(ServletPropertySet.PORT, txtPort.getText());
            CargoServerRegistry.getInstance().addContainer(cont);
            if (cbStart.isSelected()) {
                reg.startContainer(cont);
            }
        } else {
            throw new IllegalArgumentException("TODO");
        }
    }
}
