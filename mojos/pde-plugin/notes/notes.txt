
1. declare an artifact as "pde-enabled"
  
   an artifact is declared as an eclispe artifact by the way of a _pom_ 
   property :
   
   <project>
     ...
     <properties>
       <maven.pde.enabled>true</maven.pde.enabled>
       <maven.pde.type>(plugin)|feature|site</maven.pde.type>
     </properties>
   </project>
   
   
2. dependencies duplication issue
   
   to solve the dependencies duplication issue (plugin.xml vs. project.xml)
   pde:classpath goal has to run as a preGoal of build:start
   
   <preGoal name="build:start">
     <pde:classpath />
   </preGal>
   
   it parses plugin.xml and extracts <requires> information and add required 
   plugin to classpath, making them available to compilation process
   
   on the other hand non eclipse dependencies are still declared in the pom
   
   TODO: manage single jar'd plugins 
   
3. plugin.xml update
   
   pde:plugin goal has a prereqs on jar:jar
   
   if an artifact is declared as pde-enabled, pde:plugin goal extracts 
   -relevant- information from the pom and update plugin.xml:
   by default dependencies declared in the pom are added as runtime/library 
   element and are copied into default lib folder
     
     * they may be excluded thanks the maven.pde.exclude property
     * lib folder can be parametrized through the maven.pde.targetPath 
       property
     * package element can be  specified through the maven.pde.package property
     * they may be rendered as requires/plugin entry by setting the 
       maven.pde.requires property 
     * in such a case maven.pde.name is required  
     
     <dependency>
       ...
       <properties>
	     <maven.pde.targetPath>anotherLibFolder</maven.pde.targetPath>
         <maven.pde.exclude>(true)|false</maven.pde.exclude>
         <maven.pde.requires>(true)|false</maven.pde.requires>
         <maven.pde.name>com.mycompany.myplugin</maven.pde.name>
         <maven.pde.package>org.jdom</maven.pde.package>
       </properties>
     </dependency>
     
     pde:plugin then builds a single jar'd plugin 
     
     TODO: add maven.pde.single property to indicate if single jar'd plugin should 
           generated instead of the way (folder + zip/jar)

4. feature
   
   pde:feature (todo)
   
5. site

   pde:site (todo)

6. multiproject-friendly
   
   pde:artifact disptaches either to pde:plugin, pde:feature or pde:site dependending
   on the value of maven.pde.type property.

   pde:artifact has a prereq on pde:check which does some compabilities checks.
   for now, only buildId is checked. 	

   TODO: test in a multiproject context

7. pde:install
  
   pde:install has a prereqs on pde:artifact
   
   primary artifact is _always_ installed through artifact:install. 

8. deploy

9. other artifact types
    
   no more  differenciation for other artifact types (help | lib-only):
     - lib-only plugins now are a subset of the previous artifacts set
     - help will be when refined includes will be managed
   
10. convenient archive & other utility goals
   
   - provide a goal to zip a pde artifact ready to be unpacked 
     into eclipse.home
   - provide a goal to directly install a plugin into eclipse.home
      