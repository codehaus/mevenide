/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software licensed under
 *        Apache Software License (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Mevenide" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact mevenide-general-dev@lists.sourceforge.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Mevenide", nor may "Apache" or "Mevenide" appear in their name, without
 *    prior written permission of the Mevenide Team and the ASF.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.mevenide.ui.netbeans.creator;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.Project;
import org.openide.util.NbBundle;


/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class BasicsPanel extends JPanel implements ProjectPanel
{
    private static Log logger = LogFactory.getLog(BasicsPanel.class);
    
    private boolean propagate;
    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    
    /** Creates new form BasicsPanel */
    public BasicsPanel(boolean propagateImmediately)
    {
        initComponents();
        propagate = propagateImmediately;
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.name"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblCurrentVersion = new javax.swing.JLabel();
        txtCurrentVersion = new javax.swing.JTextField();
        lblArtifactID = new javax.swing.JLabel();
        txtArtifactID = new javax.swing.JTextField();
        lblGroupID = new javax.swing.JLabel();
        txtGroupID = new javax.swing.JTextField();
        lblPackage = new javax.swing.JLabel();
        txtPackage = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblName, gridBagConstraints);

        txtName.setMinimumSize(new java.awt.Dimension(30, 26));
        txtName.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtName, gridBagConstraints);

        lblCurrentVersion.setLabelFor(txtCurrentVersion);
        lblCurrentVersion.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblCurrentVersion.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblCurrentVersion, gridBagConstraints);

        txtCurrentVersion.setMinimumSize(new java.awt.Dimension(30, 26));
        txtCurrentVersion.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtCurrentVersion, gridBagConstraints);

        lblArtifactID.setLabelFor(txtArtifactID);
        lblArtifactID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblArtifactID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblArtifactID, gridBagConstraints);

        txtArtifactID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtArtifactID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtArtifactID, gridBagConstraints);

        lblGroupID.setLabelFor(txtGroupID);
        lblGroupID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblGroupID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblGroupID, gridBagConstraints);

        txtGroupID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtGroupID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtGroupID, gridBagConstraints);

        lblPackage.setLabelFor(txtPackage);
        lblPackage.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblPackage.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblPackage, gridBagConstraints);

        txtPackage.setMinimumSize(new java.awt.Dimension(50, 26));
        txtPackage.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtPackage, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblArtifactID;
    private javax.swing.JLabel lblCurrentVersion;
    private javax.swing.JLabel lblGroupID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPackage;
    private javax.swing.JTextField txtArtifactID;
    private javax.swing.JTextField txtCurrentVersion;
    private javax.swing.JTextField txtGroupID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPackage;
    // End of variables declaration//GEN-END:variables
    
    public void setProject(Project project)
    {
        txtName.setText(project.getName() == null ? "" : project.getName());
        txtCurrentVersion.setText(project.getCurrentVersion() == null ? "1.0" : project.getCurrentVersion());
        txtArtifactID.setText(project.getArtifactId() == null ? "" : project.getArtifactId());
        txtGroupID.setText(project.getGroupId() == null ? "" : project.getGroupId());
        txtPackage.setText(project.getPackage() == null ? "" : project.getPackage());
    }
    
    public Project copyProject(Project project)
    {
        project.setName(txtName.getText());
        project.setArtifactId(txtArtifactID.getText());
        project.setGroupId(txtGroupID.getText());
        project.setCurrentVersion(txtCurrentVersion.getText());
        project.setPackage(txtPackage.getText());
        return project;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer)
    {
        valObserver = observer;
        if (listener == null)
        {
            listener = new ValidateListener();
            txtArtifactID.getDocument().addDocumentListener(listener);
            txtGroupID.getDocument().addDocumentListener(listener);
        }
    }
    
    private void doValidate()
    {
        logger.debug("Listener called");
        ProjectValidateObserver obs = valObserver;
        if (obs != null)
        {
            obs.resetValidState(isInValidState(), getValidityMessage());
        }
    }
    
    /**
     * returns 0 for ok, otherwise a integer code.
     */
    private int doValidateCheck()
    {
        if (Math.min(txtArtifactID.getText().trim().length(),
        txtGroupID.getText().trim().length()) == 0)
        {
            return 1;
        }
        return  0;
    }
    
    public boolean isInValidState()
    {
        return doValidateCheck() == 0;
    }
    
    public String getValidityMessage()
    {
        int retCode = doValidateCheck();
        String message = "";
        if (retCode == 1)
        {
            message = NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.error1.text");
        }
        return message;
    }
    
    /**
     * attach to the fields that are validated.
     */
    private class ValidateListener implements DocumentListener
    {
        public void changedUpdate(DocumentEvent e)
        {
            doValidate();
        }
        
        public void insertUpdate(DocumentEvent e)
        {
            doValidate();
        }
        
        public void removeUpdate(DocumentEvent e)
        {
            doValidate();
        }
    }
}
