/* ==========================================================================
 * Copyright 2005 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.codehaus.mevenide.netbeans.nodes;

import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.codehaus.mevenide.indexer.CustomQueries;

/**
 *
 * @author  mkleint
 */
public class AddDependencyPanel extends javax.swing.JPanel {
    private Completer groupCompleter;
    private Completer artifactCompleter;
    private Completer versionCompleter;
    private JButton okButton;
    
    /** Creates new form AddDependencyPanel */
    public AddDependencyPanel() {
        initComponents();
        populateGroupId();
        artifactCompleter = new Completer(Collections.EMPTY_LIST, txtArtifactId);
        versionCompleter = new Completer(Collections.EMPTY_LIST, txtVersion);
        txtGroupId.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                populateArtifact();
                populateVersion();
            }
        });
        txtArtifactId.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                populateVersion();
            }
        });
        
        okButton = new JButton("Ok");
        
        DocumentListener docList = new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                checkValidState();
            }
            public void insertUpdate(DocumentEvent e) {
                checkValidState();
            }
            public void removeUpdate(DocumentEvent e) {
                checkValidState();
            }
        };
        txtGroupId.getDocument().addDocumentListener(docList);
        txtVersion.getDocument().addDocumentListener(docList);
        txtArtifactId.getDocument().addDocumentListener(docList);
        checkValidState();
    }
    
    public JButton getOkButton() {
        return okButton;
    }
    
    public String getGroupId() {
        return txtGroupId.getText().trim();
    }
    
    public String getArtifactId() {
        return txtArtifactId.getText().trim();
    }
    
    public String getVersion() {
        return txtVersion.getText().trim();
    }
    
    public String getScope() {
        return comScope.getSelectedItem().toString();
    }
    
    private void checkValidState() {
        if (txtGroupId.getText().trim().length() <= 0) {
            okButton.setEnabled(false);
            return;
        }
        if (txtArtifactId.getText().trim().length() <= 0) {
            okButton.setEnabled(false);
            return;
        }
        if (txtVersion.getText().trim().length() <= 0) {
            okButton.setEnabled(false);
            return;
        }
        okButton.setEnabled(true);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGroupId = new javax.swing.JLabel();
        txtGroupId = new javax.swing.JTextField();
        lblArtifactId = new javax.swing.JLabel();
        txtArtifactId = new javax.swing.JTextField();
        lblVersion = new javax.swing.JLabel();
        txtVersion = new javax.swing.JTextField();
        lblScope = new javax.swing.JLabel();
        comScope = new javax.swing.JComboBox();

        lblGroupId.setLabelFor(txtGroupId);
        lblGroupId.setText("GroupId:"); // NOI18N

        lblArtifactId.setLabelFor(txtArtifactId);
        lblArtifactId.setText("ArtifactId:"); // NOI18N

        lblVersion.setLabelFor(txtVersion);
        lblVersion.setText("Version:"); // NOI18N

        lblScope.setLabelFor(comScope);
        lblScope.setText("Scope:"); // NOI18N

        comScope.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "compile", "runtime", "test", "provided" }));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblVersion)
                            .add(lblGroupId)
                            .add(lblArtifactId))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtVersion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                            .add(txtArtifactId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                            .add(txtGroupId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(86, 86, 86)
                        .add(comScope, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(lblScope)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblGroupId)
                    .add(txtGroupId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblArtifactId)
                    .add(txtArtifactId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblVersion)
                    .add(txtVersion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblScope)
                    .add(comScope, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(187, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comScope;
    private javax.swing.JLabel lblArtifactId;
    private javax.swing.JLabel lblGroupId;
    private javax.swing.JLabel lblScope;
    private javax.swing.JLabel lblVersion;
    private javax.swing.JTextField txtArtifactId;
    private javax.swing.JTextField txtGroupId;
    private javax.swing.JTextField txtVersion;
    // End of variables declaration//GEN-END:variables
    
    private void populateGroupId() {
        try {
            List lst = CustomQueries.enumerateGroupIds();
            groupCompleter = new Completer(lst, txtGroupId);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void populateArtifact() {
        try {
            List lst = CustomQueries.getArtifacts(txtGroupId.getText().trim());
            artifactCompleter.setList(lst);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void populateVersion() {
        try {
            List lst = CustomQueries.getVersions(txtGroupId.getText().trim(), txtArtifactId.getText().trim());
            versionCompleter.setList(lst);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /** inner class does the matching of the JTextField's
     * document to completion strings kept in an ArrayList
     */
    
    class Completer implements DocumentListener {
        private Pattern pattern;
        private Collection completions;
        private JList completionList;
        private DefaultListModel completionListModel;
        private JScrollPane listScroller;
        private Popup popup;
        private JTextField field;
        
        public Completer(Collection completions, JTextField fld) {
            this.completions = completions;
            this.field = fld;
            field.getDocument().addDocumentListener(this);
            field.addFocusListener(new FocusAdapter() {
                public void focusLost(FocusEvent e) {
                    hidePopup();
                }
            });
            completionListModel = new DefaultListModel();
            completionList = new JList(completionListModel);
            completionList.setPrototypeCellValue("lets have it at least this wide and add some more just in case"); //NOI18N
            completionList.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() > 1) {
                        field.getDocument().removeDocumentListener(AddDependencyPanel.Completer.this);
                        field.setText(completionList.getSelectedValue().toString());
                        hidePopup();
                        field.getDocument().addDocumentListener(AddDependencyPanel.Completer.this);
                    }
                }
            });
            completionList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            listScroller =new JScrollPane(completionList,
                                          ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                                          ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), "listdown");
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), "listup");
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, 0), "listpageup");
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0), "listpagedown");
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, KeyEvent.CTRL_DOWN_MASK), "showpopup");
            field.getActionMap().put("listdown", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    if (popup == null) {
                        buildAndShowPopup();
                    }
                    completionList.setSelectedIndex(Math.min(completionList.getSelectedIndex() + 1, completionList.getModel().getSize()));
                    completionList.ensureIndexIsVisible(completionList.getSelectedIndex());
                }
            });
            field.getActionMap().put("listup",  new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    if (popup == null) {
                        buildAndShowPopup();
                    }
                    completionList.setSelectedIndex(Math.max(completionList.getSelectedIndex() - 1, 0));
                    completionList.ensureIndexIsVisible(completionList.getSelectedIndex());
                }
            });
            field.getActionMap().put("listpagedown", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    completionList.setSelectedIndex(Math.min(completionList.getSelectedIndex() + completionList.getVisibleRowCount(), completionList.getModel().getSize()));
                    completionList.ensureIndexIsVisible(completionList.getSelectedIndex());
                }
            });
            field.getActionMap().put("listpageup", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    completionList.setSelectedIndex(Math.max(completionList.getSelectedIndex() - completionList.getVisibleRowCount(), 0));
                    completionList.ensureIndexIsVisible(completionList.getSelectedIndex());
                }
            });
            field.getActionMap().put("fill-in", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    field.getDocument().removeDocumentListener(AddDependencyPanel.Completer.this);
                    if (completionList.getSelectedValue() != null) {
                        field.setText(completionList.getSelectedValue().toString());
                    }
                    hidePopup();
                    field.getDocument().addDocumentListener(AddDependencyPanel.Completer.this);
                }
            });
            field.getActionMap().put("hidepopup", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    hidePopup();
                }
            });
            field.getActionMap().put("showpopup", new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    buildAndShowPopup();
                }
            });
        }
        
        private void buildPopup() {
            completionListModel.clear();
            Iterator it = completions.iterator();
            pattern = Pattern.compile(field.getText().trim() + ".+");
            while (it.hasNext()) {
                // check if match
                Object completion = it.next();
                Matcher matcher = pattern.matcher(completion.toString());
                if (matcher.matches()) {
                    // add if match
                    completionListModel.add(completionListModel.getSize(),
                            completion);
                } 
            }
        }
        
        private void showPopup() {
            hidePopup();
            if (completionListModel.getSize() == 0) {
                return;
            }
            // figure out where the text field is,
            // and where its bottom left is
            java.awt.Point los = field.getLocationOnScreen();
            int popX = los.x;
            int popY = los.y + field.getHeight();
            popup = PopupFactory.getSharedInstance().getPopup(AddDependencyPanel.this, listScroller, popX, popY);
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "hidepopup");
            field.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "fill-in");
            popup.show();
        }
        
        private void hidePopup() {
            field.getInputMap().remove(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0));
            field.getInputMap().remove(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0));
            if (popup != null) {
                popup.hide();
                popup = null;
            }
        }
        
        private void buildAndShowPopup() {
            buildPopup();
            showPopup();
        }
        
        // DocumentListener implementation
        public void insertUpdate(DocumentEvent e) { buildAndShowPopup(); }
        public void removeUpdate(DocumentEvent e) { buildAndShowPopup(); }
        public void changedUpdate(DocumentEvent e) { buildAndShowPopup(); }

        private void setList(List lst) {
            completions = lst;
        }
        
    }
    
}
