/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.ArrayList;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

import java.util.List;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.mevenide.netbeans.project.MavenProject;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;

/**
 * customizer for maven projects.
 * inspired by the j2seprojectcustomizer, mainly to have consistent UI.
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class MavenCustomizer extends JPanel implements ProjectValidateObserver {
    
    private Component currentCustomizer;

    private GridBagConstraints fillConstraints;
    
    private MavenProject project;
    private CategoryView catView;
    private List allPanels;
    
    public MavenCustomizer(MavenProject proj) {
        initComponents();
        project = proj;
        
        fillConstraints = new GridBagConstraints();
        fillConstraints.gridwidth = GridBagConstraints.REMAINDER;
        fillConstraints.gridheight = GridBagConstraints.REMAINDER;
        fillConstraints.fill = GridBagConstraints.BOTH;
        fillConstraints.weightx = 1.0;
        fillConstraints.weighty = 1.0;
        
        catView = new CategoryView();
        categoryPanel.add(catView, fillConstraints);
        
        cbResolve.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                Node[] nodes = ((ExplorerManager.Provider)catView).getExplorerManager().getSelectedNodes();
                if (nodes.length > 0) {
                    changeCustomizer(nodes[0]);
                }
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        categoryPanel = new javax.swing.JPanel();
        customizerPanel = new javax.swing.JPanel();
        lblValidateMessage = new javax.swing.JLabel();
        cbResolve = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(750, 450));
        categoryPanel.setLayout(new java.awt.GridBagLayout());

        categoryPanel.setBorder(new javax.swing.border.EtchedBorder());
        categoryPanel.setMinimumSize(new java.awt.Dimension(150, 4));
        categoryPanel.setPreferredSize(new java.awt.Dimension(220, 4));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(categoryPanel, gridBagConstraints);

        customizerPanel.setLayout(new java.awt.GridBagLayout());

        customizerPanel.setMinimumSize(new java.awt.Dimension(150, 5));
        customizerPanel.setPreferredSize(new java.awt.Dimension(250, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.75;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
        add(customizerPanel, gridBagConstraints);

        lblValidateMessage.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 6);
        add(lblValidateMessage, gridBagConstraints);

        cbResolve.setText("Resolve Values");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 0);
        add(cbResolve, gridBagConstraints);

    }//GEN-END:initComponents

    private void changeCustomizer(Node node) {
        if ( currentCustomizer != null ) {
            customizerPanel.remove( currentCustomizer );
        }
        if ( node.hasCustomizer() ) {
            currentCustomizer = node.getCustomizer();
            if (currentCustomizer instanceof ProjectPanel) {
                ProjectPanel prpanel = (ProjectPanel)currentCustomizer;
                //reset messages.
                lblValidateMessage.setText("");
                prpanel.setValidateObserver(MavenCustomizer.this);
                prpanel.setResolveValues(cbResolve.isSelected());
            }
            customizerPanel.add( currentCustomizer, fillConstraints );
            customizerPanel.validate();
            customizerPanel.repaint();
        }
        else {
            currentCustomizer = null;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JCheckBox cbResolve;
    private javax.swing.JPanel customizerPanel;
    private javax.swing.JLabel lblValidateMessage;
    // End of variables declaration//GEN-END:variables
    
    // Private innerclasses ----------------------------------------------------

    private class CategoryView extends JPanel implements ExplorerManager.Provider {
        
        private ExplorerManager manager;
        private BeanTreeView btv;
        
        CategoryView() {
            manager = new ExplorerManager();
            
            setLayout(new BorderLayout());
            
            Dimension size = new Dimension( 190, 4 );
            btv = new BeanTreeView();    // Add the BeanTreeView
            btv.setSelectionMode( TreeSelectionModel.SINGLE_TREE_SELECTION );
            btv.setPopupAllowed( false );
            btv.setRootVisible( false );
            btv.setDefaultActionAllowed( false );            
            btv.setMinimumSize( size );
            btv.setPreferredSize( size );
            btv.setMaximumSize( size );
            this.add( btv, BorderLayout.CENTER );                        
            manager.setRootContext(createRootNode(project, manager));
            manager.addPropertyChangeListener( new ManagerChangeListener() );
            doExpand();
            selectFirstNode();
                                                
        }
        
        public ExplorerManager getExplorerManager() {
            return manager;
        }
        
        public void addNotify() {
            super.addNotify();
//            btv.expandAll();
        }
        
        private void doExpand() {
            btv.expandNode(manager.getRootContext());
            Node root = manager.getRootContext();
            Node[] children = root.getChildren().getNodes();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("pluginsCategory")) {
                    continue;
                }
                btv.expandNode(children[i]);
            }
        }
        
        private void selectFirstNode() {
            
            Children ch = manager.getRootContext().getChildren();
            if ( ch != null ) {
                Node nodes[] = ch.getNodes();
                
                if ( nodes != null && nodes.length > 0 ) {
                    try {                    
                        manager.setSelectedNodes( new Node[] { nodes[0] } );
                    }
                    catch ( PropertyVetoException e ) {
                        // No node will be selected
                    }
                }
            }
            
        }
        
        
        /** Listens to selection change and shows the customizers as
         *  panels
         */
        
        private class ManagerChangeListener implements PropertyChangeListener {

            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getSource() != manager) {
                    return;
                }

                if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                    Node nodes[] = manager.getSelectedNodes(); 
                    if ( nodes == null || nodes.length <= 0 ) {
                        return;
                    }
                    Node node = nodes[0];
                    changeCustomizer(node);
                    return;
                }
            }
        }
    }
             
    private Node createRootNode(MavenProject project, ExplorerManager manager) {
        ConfigurationDescription[] generalChilds = new ConfigurationDescription[] {
            new ConfigurationDescription(
                "DescCategory", // NOI18N
                "Description", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new DescriptionPanel(project), 
                null),
            new ConfigurationDescription(
                "OrgCategory", // NOI18N
                "Organization and Site", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new OrgPanel(project), 
                null),
            new ConfigurationDescription(
                "RepositoryCategory", // NOI18N
                "Repository", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new RepositoryPanel(project), 
                null),
            new ConfigurationDescription(
                "ListsCategory", // NOI18N
                "Lists", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new ListsPanel(project), 
                null),
            new ConfigurationDescription(
                "TeamCategory", // NOI18N
                "Team", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new TeamPanel(project), 
                null),
            new ConfigurationDescription(
                "ReportsCategory", // NOI18N
                "Reports", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new ReportsPanel(project),
//                createEmptyLabel("WORK IN PROGRESS..."),  
                null),
        };
        ConfigurationDescription[] buildChilds = new ConfigurationDescription[] {
            new ConfigurationDescription(
                "JavaCategory", // NOI18N
                "Java/Jar", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new JavaPanel(project), 
                null),
            new ConfigurationDescription(
                "UnitTestsCategory", // NOI18N
                "Unit Tests", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                createEmptyLabel("WORK IN PROGRESS..."),  
                null)
        };
        
//        ConfigurationDescription[] dependencyChilds = new ConfigurationDescription[] {
//            new ConfigurationDescription(
//                "DependencyOverrideCategory", // NOI18N
//                "Overrides", 
//                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
////                new OverridePanel(project, true),  
//                // disable for the release, not ready yet.
//                createEmptyLabel("WORK IN PROGRESS..."),
//                null)
//        };
        

        
        ConfigurationDescription[] descriptions = new ConfigurationDescription[] {
            new ConfigurationDescription(
                "GeneralCategory",// NOI18N
                "General", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new BasicsPanel(project),
                generalChilds),
            new ConfigurationDescription(
                "DependencyCategory", // NOI18N
                "Dependencies", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new DependenciesPanel(project, false), 
                null),
//                dependencyChilds),
            new ConfigurationDescription(
                "BuildCategory", // NOI18N
                "Build", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new BuildPanel(project), 
                buildChilds),
            new ConfigurationDescription(
                "FilesCategory", // NOI18N
                "Project Files", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new FilesPanel(false, project),  
                null),
            new ConfigurationDescription(
                "MappingCategory", // NOI18N
                "Goal to IDE Action Mappings", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new ActionMappingPanel(project),  
                null),
            new ConfigurationDescription(
                "pluginsCategory", // NOI18N
                "Plugins", 
                "org/mevenide/netbeans/project/resources/Bullet", // NOI18N
                new PluginListPanel(project, allPanels, manager))
        };
        
        allPanels = new ArrayList();
        addPanelsToList(allPanels, descriptions);
//        addPanelsToList(allPanels, pluginChilds);
        addPanelsToList(allPanels, buildChilds);
        addPanelsToList(allPanels, generalChilds);
        
        ConfigurationDescription rootDescription = new ConfigurationDescription(
            "InvisibleRoot", "InvisibleRoot", null, null, descriptions);  // NOI18N
        
        return new ConfigurationNode(rootDescription);
        
        
    }
    
    private void addPanelsToList(List list, ConfigurationDescription[] descs) {
        for (int i = 0; i < descs.length; i++) {
            if (descs[i].customizer != null && descs[i].customizer instanceof ProjectPanel) {
                list.add(descs[i].customizer);
            }
        }
    }
    
    
    // Private meyhods ---------------------------------------------------------
    
    // XXX Remove when all panels have some options
    
    private static JLabel createEmptyLabel(String text) {
        
        JLabel label;
        if ( text == null ) {
            label = new JLabel();
        }
        else {
            label = new JLabel( text );        
            label.setHorizontalAlignment( JLabel.CENTER );
        }
                
        return label;        
    }
    
    public void resetValidState(boolean valid, String errorMessage) {
        if (valid) {
            lblValidateMessage.setText("");
        } else {
            lblValidateMessage.setText(errorMessage);
        }
    }
    
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = allPanels.iterator();
        while (it.hasNext()) {
            ProjectPanel panel = (ProjectPanel)it.next();
            toReturn.addAll(panel.getChanges());
        }
        return toReturn;
    }
    
    // Private innerclasses ----------------------------------------------------
    
    /** Class describing the configuration node. Prototype of the
     *  configuration node.
     */
    private static class ConfigurationDescription {
        private String name;
        private String displayName;
        private String iconBase;
        private Component customizer;
        private ConfigurationDescription[] children;
        private Children childs2;
        
        ConfigurationDescription(String name,
                                 String displayName,
                                 String iconBase,
                                 Component customizer,
                                 ConfigurationDescription[] children ) 
        {
            this.name = name;
            this.displayName = displayName;
            this.iconBase = iconBase;
            this.customizer = customizer;
            this.children = children;
        }
        
        ConfigurationDescription(String name,
                                 String displayName,
                                 String iconBase,
                                 PluginListPanel customizer) 
        {
            this.name = name;
            this.displayName = displayName;
            this.iconBase = iconBase;
            this.customizer = customizer;
            this.childs2 = customizer.getNodeChildren();
            
        }
        
    }
    
    
    /** Node to be used for configuration
     */
    private static class ConfigurationNode extends AbstractNode {
        
        private Component customizer;
        
        public ConfigurationNode( ConfigurationDescription description ) {
            super( description.children == null ? 
                          (description.childs2 == null ? Children.LEAF : description.childs2) : 
                          new ConfigurationChildren( description.children ) );
            setName( description.name );
            setDisplayName( description.displayName );
            if ( description.iconBase != null ) {
                setIconBase( description.iconBase );
            }
            this.customizer = description.customizer;
        }
        
        public boolean hasCustomizer() {
            return customizer != null;
        }
        
        public Component getCustomizer() {
            return (Component)customizer;
        }
        
    }
    
    /** Children used for configuration
     */
    private static class ConfigurationChildren extends Children.Keys {
        
        private Collection descriptions;
        
        public ConfigurationChildren( ConfigurationDescription[] descriptions ) {
            this.descriptions = Arrays.asList( descriptions );
        }
        
        // Children.Keys impl --------------------------------------------------
        
        public void addNotify() {
            setKeys( descriptions );
        }
        
        public void removeNotify() {
            setKeys( Collections.EMPTY_LIST );
        }
        
        protected Node[] createNodes( Object key ) {
            return new Node[] { new ConfigurationNode( (ConfigurationDescription)key ) };
        }
    }
    
}
