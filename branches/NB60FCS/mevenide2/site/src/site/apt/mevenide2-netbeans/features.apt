Features

  The current features are described below, to file bugs or request additional 
features, file an issue at the {{{http://jira.codehaus.org/browse/MEVENIDE}bug tracking system}}
subcomponent <<mevenide2-netbeans>>.

* Projects

  * Open existing maven2 projects without any imports or synchronizations

  * An IDE project type directly based on maven2 POM.

  * Run maven builds from the UI.

  * Project dependencies resolved dynamically based on currently opened projects

  * Create new projects from archetypes (Standard and Web Application, Mojo plugin)

    Select which archetype 

[../images/mevenide2-netbeans/tutorials/helloWorldCreateWizard2.png]

  * Show hierarchy between projects
 
  Module graph :

[../images/moduleGraph.png]

  * Show compile/runtime/test dependencies, both direct and transitive
  
  Project Layout : 

[../images/projectlayout.png] 

  We use the maven embedder to retrieve information about the project. There are a few outstanding issues on the embedder side:

  * {{{http://jira.codehaus.org/browse/MNG-1117}[MNG-1117]Writing the pom doesn't preserver formatting}}. No project updating from the UI yet.

  * {{{http://jira.codehaus.org/browse/MNG-1118}[MNG-1118]Not possible to handle failed artifact resolution from IDE.}}

  Please vote for these issues, thanks.

* Editor completion

  The schema based code completions are available for POM files, settings files, assembly descriptors and netbeans module descriptors. Apart from the static completion, a few dynamic helpers are also available.

  * List of possible modules.

  * Plugin execution goals and phases.

  * Plugin configuration parameter names. 

   Completion for configuration :

[../images/completion1.png]

  * Dependency scope values
  
  * Available versions for dependencies and plugins

   Which version is available :
  
[../images/completion2.png]

  * For assembly descriptors,

  Suggest excludes/includes based on dependencies in the POM :

[../images/completion3.png]

* Hyperlinking

  The Maven POM file contains a lot of useful information but it's not always ready at hand. Why not have the URLs hyperlinked? It is possible with Netbeans.

  * URLs : 

    Pressing Ctrl with a cursor over http/https url, shows a hyperlink which opens a new browser window or tab with the specified url.
    
[../images/pomHyperlink1.png] URLs
    
  * Modules : 

    The modules section of the pom can also turned into hyperlinks.

[../images/pomHyperlink2.png]

  * Configuration files : 

    Permits to open in the editor other configuration files 

[../images/pomHyperlink3.png]

    Any other places where hyperlinks could be useful in the POM? 

* Dependency management
 
  * Download javadoc and sources for projects dependencies

  * Add/Remove/Exclude dependencies

    Remove a provided project dependency 

[../images/removeDependency.png]

    Exclude a transitive inherited dependency 

[../images/excludeDependency.png]

  * Locally install artifact

  It is possible to install manually jars or other artifacts in the maven local repository.

[../images/installLocallyDependency.png]


  * Show dependency graph
 
[../images/dependencyGraph.png]
 
* Continuum 

  Apache Continuum is a continuous integration server, the Mevenide support is able to connect to these servers through the XML-RPC interface.

  * Configurable list of servers

  * Listing of defined projects on the server

  * Information about build states

  * Can Force a rebuild of a given project

[../images/mevenide2-netbeans/features-continuum.png]

