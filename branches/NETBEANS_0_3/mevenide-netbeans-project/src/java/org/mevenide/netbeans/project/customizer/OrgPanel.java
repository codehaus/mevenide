/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.mevenide.netbeans.project.customizer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import java.util.List;
import java.util.Map;
import javax.swing.JButton;

import javax.swing.JPanel;
import javax.swing.JTextField;
import org.apache.maven.project.Organization;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.customizer.ui.LocationComboFactory;
import org.mevenide.netbeans.project.customizer.ui.OriginChange;
import org.mevenide.project.io.IContentProvider;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class OrgPanel extends JPanel implements ProjectPanel {
    
    private ProjectValidateObserver valObserver;
    private MavenProject project;
    private OriginChange ocSiteAddress;
    private OriginChange ocSiteDir;
    private OriginChange ocDistAddress;
    private OriginChange ocDistDir;
    private OriginChange ocOrganization;
    
    private HashMap changes;
    
    /** Creates new form BasicsPanel */
    public OrgPanel(MavenProject proj) {
        project = proj;
        changes = new HashMap();
        initComponents();
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(OrgPanel.class, "OrgPanel.name"));
        btnURL.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String url = txtURL.getText().trim();
                url = project.getPropertyResolver().resolveString(url);
                if (url.startsWith("http://")) {
                    try {
                        URL link = new URL(url);
                        HtmlBrowser.URLDisplayer.getDefault().showURL(link);
                    } catch (MalformedURLException exc) {
                        NotifyDescriptor error = new NotifyDescriptor.Message("Is not a valid URL.", NotifyDescriptor.WARNING_MESSAGE);
                        DialogDisplayer.getDefault().notify(error);
                    }
                }
            }
        });
        populateChangeInstances();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlOrganization = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblURL = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        btnURL = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        txtLogo = new javax.swing.JTextField();
        lblSiteAddress = new javax.swing.JLabel();
        txtSiteAddress = new javax.swing.JTextField();
        ocSiteAddress = LocationComboFactory.createPOMChange(project, false);
        btnSiteAddress = (JButton)ocSiteAddress.getComponent();
        lblSiteDir = new javax.swing.JLabel();
        txtSiteDir = new javax.swing.JTextField();
        ocSiteDir = LocationComboFactory.createPOMChange(project, false);
        btnSiteDir = (JButton)ocSiteDir.getComponent();
        lblDistAddress = new javax.swing.JLabel();
        txtDistAddress = new javax.swing.JTextField();
        ocDistAddress = LocationComboFactory.createPOMChange(project, false);
        btnDistAddress = (JButton)ocDistAddress.getComponent();
        lblDistDir = new javax.swing.JLabel();
        txtDistDir = new javax.swing.JTextField();
        ocDistDir = LocationComboFactory.createPOMChange(project, false);
        btnDistDir = (JButton)ocDistDir.getComponent();
        jPanel1 = new javax.swing.JPanel();
        lblOrganization = new javax.swing.JLabel();
        ocOrganization = LocationComboFactory.createPOMChange(project, true);
        btnOrganization = (JButton)ocOrganization.getComponent();

        setLayout(new java.awt.GridBagLayout());

        pnlOrganization.setLayout(new java.awt.GridBagLayout());

        pnlOrganization.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        pnlOrganization.add(lblName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        pnlOrganization.add(txtName, gridBagConstraints);

        lblURL.setLabelFor(txtURL);
        lblURL.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblURL.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        pnlOrganization.add(lblURL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        pnlOrganization.add(txtURL, gridBagConstraints);

        btnURL.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.btnURL.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 6);
        pnlOrganization.add(btnURL, gridBagConstraints);

        lblLogo.setLabelFor(txtLogo);
        lblLogo.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblLogo.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        pnlOrganization.add(lblLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 6, 0);
        pnlOrganization.add(txtLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(pnlOrganization, gridBagConstraints);

        lblSiteAddress.setLabelFor(txtSiteAddress);
        lblSiteAddress.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteAddress.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblSiteAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtSiteAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnSiteAddress, gridBagConstraints);

        lblSiteDir.setLabelFor(txtSiteDir);
        lblSiteDir.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteDir.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblSiteDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtSiteDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnSiteDir, gridBagConstraints);

        lblDistAddress.setLabelFor(txtDistAddress);
        lblDistAddress.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblDistAddress.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblDistAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtDistAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnDistAddress, gridBagConstraints);

        lblDistDir.setLabelFor(txtDistDir);
        lblDistDir.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteDist.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblDistDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtDistDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnDistDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        add(jPanel1, gridBagConstraints);

        lblOrganization.setLabelFor(btnOrganization);
        lblOrganization.setText("Organization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(lblOrganization, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(btnOrganization, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDistAddress;
    private javax.swing.JButton btnDistDir;
    private javax.swing.JButton btnOrganization;
    private javax.swing.JButton btnSiteAddress;
    private javax.swing.JButton btnSiteDir;
    private javax.swing.JButton btnURL;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDistAddress;
    private javax.swing.JLabel lblDistDir;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblSiteAddress;
    private javax.swing.JLabel lblSiteDir;
    private javax.swing.JLabel lblURL;
    private javax.swing.JPanel pnlOrganization;
    private javax.swing.JTextField txtDistAddress;
    private javax.swing.JTextField txtDistDir;
    private javax.swing.JTextField txtLogo;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSiteAddress;
    private javax.swing.JTextField txtSiteDir;
    private javax.swing.JTextField txtURL;
    // End of variables declaration//GEN-END:variables

    private void populateChangeInstances() {
        createChangeInstance("siteAddress", txtSiteAddress, ocSiteAddress);
        createChangeInstance("siteDirectory", txtSiteDir, ocSiteDir);
        createChangeInstance("distributionAddress", txtDistAddress, ocDistAddress);
        createChangeInstance("distributionDirectory", txtDistDir, ocDistDir);
        Organization org = project.getOriginalMavenProject().getOrganization();
        String key = "pom.organization"; //NOI18N
        int location = project.getProjectWalker().getLocation(key);
        Map oldValues = new HashMap();
        if (org != null) {
            if (org.getUrl() != null) {
                oldValues.put("url", org.getUrl()); //NOI18N
            }
            if (org.getName() != null) {
                oldValues.put("name", org.getName()); //NOI18N
            }
            if (org.getLogo() != null) {
                oldValues.put("logo", org.getLogo()); //NOI18N
            }
        }
        HashMap fields = new HashMap();
        fields.put("url", txtURL); //NOI18N
        fields.put("logo", txtLogo); //NOI18N
        fields.put("name", txtName); //NOI18N
        changes.put(key, new MultiTextComponentPOMChange(key, oldValues, location, fields, ocOrganization));
   }
   
   private void createChangeInstance(String propName, JTextField field, OriginChange oc) {
       String key = "pom." + propName; //NOI18N
       String value = project.getProjectWalker().getValue(key);
       int location = project.getProjectWalker().getLocation(key);
       if (value == null) {
           value = "";
       } 
       changes.put(key, new TextComponentPOMChange(key, value, location, field, oc));
   }        
    
    public void setResolveValues(boolean resolve) {
//        setEnableFields(!resolve); 
        assignValue("siteAddress", resolve);
        assignValue("siteDirectory", resolve);
        assignValue("distributionAddress", resolve);
        assignValue("distributionDirectory", resolve);
        
        MultiTextComponentPOMChange change = (MultiTextComponentPOMChange)changes.get("pom.organization"); //NOI18N
        if (resolve) {
            IContentProvider prov = change.getChangedContent();
            HashMap resolvedvalues = new HashMap();
            String val = prov.getValue("url"); //NOI18N
            if (val != null) {
                resolvedvalues.put("url", project.getPropertyResolver().resolveString(val)); //NOI18N
            }
            val = prov.getValue("name"); //NOI18N
            if (val != null) {
                resolvedvalues.put("name", project.getPropertyResolver().resolveString(val)); //NOI18N
            }
            val = prov.getValue("logo"); //NOI18N
            if (val != null) {
                resolvedvalues.put("logo", project.getPropertyResolver().resolveString(val)); //NOI18N
            }
            change.setResolvedValues(resolvedvalues);
        } else {
            change.resetToNonResolvedValue();
        }

    }
    
    private void assignValue(String actionName, boolean resolve) {
       String key = "pom." + actionName; //NOI18N
       TextComponentPOMChange change = (TextComponentPOMChange)changes.get(key);
       if (resolve) {
           String value = project.getPropertyResolver().resolveString(change.getNewValue());
           change.setResolvedValue(value);
       } else {
           change.resetToNonResolvedValue();
       }
   }   

    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenChange change = (MavenChange)it.next();
            if (change.hasChanged()) {
                toReturn.add(change);
            }
        }
        return toReturn;
    }
    
    public boolean isInValidState() {
        //TODO some checks..
        return true;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    public String getValidityMessage() {
        return "";
    }
    
}
