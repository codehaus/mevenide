/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.ui.netbeans.creator;

import java.util.Calendar;

import javax.swing.JPanel;


import org.apache.maven.project.MavenProject;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class DescPanel extends JPanel implements ProjectPanel
{
    private boolean propagate;
    private ProjectValidateObserver valObserver;
    
    /** Creates new form BasicsPanel */
    public DescPanel(boolean propagateImmediately)
    {
        initComponents();
        valObserver = null;
        propagate = propagateImmediately;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(DescPanel.class, "DescPanel.name"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        lblUrl = new javax.swing.JLabel();
        txtUrl = new javax.swing.JTextField();
        lblShortDescription = new javax.swing.JLabel();
        txtShortDescription = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        spDescription = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lblInceptionYear = new javax.swing.JLabel();
        txtInceptionYear = new javax.swing.JTextField();
        lblLogo = new javax.swing.JLabel();
        txtLogo = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblUrl.setLabelFor(txtUrl);
        lblUrl.setText(org.openide.util.NbBundle.getMessage(DescPanel.class, "DescPanel.lblUrl.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblUrl, gridBagConstraints);

        txtUrl.setMinimumSize(new java.awt.Dimension(50, 26));
        txtUrl.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtUrl, gridBagConstraints);

        lblShortDescription.setLabelFor(txtShortDescription);
        lblShortDescription.setText(org.openide.util.NbBundle.getMessage(DescPanel.class, "DescPanel.lblShortDescription.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblShortDescription, gridBagConstraints);

        txtShortDescription.setMinimumSize(new java.awt.Dimension(100, 26));
        txtShortDescription.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtShortDescription, gridBagConstraints);

        lblDescription.setLabelFor(taDescription);
        lblDescription.setText(org.openide.util.NbBundle.getMessage(DescPanel.class, "DescPanel.lblDescription.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblDescription, gridBagConstraints);

        taDescription.setMinimumSize(new java.awt.Dimension(200, 100));
        spDescription.setViewportView(taDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        add(spDescription, gridBagConstraints);

        lblInceptionYear.setLabelFor(txtInceptionYear);
        lblInceptionYear.setText(org.openide.util.NbBundle.getMessage(DescPanel.class, "DescPanel.lblInceptionYear.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblInceptionYear, gridBagConstraints);

        txtInceptionYear.setMinimumSize(new java.awt.Dimension(50, 28));
        txtInceptionYear.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(txtInceptionYear, gridBagConstraints);

        lblLogo.setLabelFor(txtLogo);
        lblLogo.setText(org.openide.util.NbBundle.getMessage(DescPanel.class, "DescPanel.lblLogo.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtLogo, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblInceptionYear;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblShortDescription;
    private javax.swing.JLabel lblUrl;
    private javax.swing.JScrollPane spDescription;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField txtInceptionYear;
    private javax.swing.JTextField txtLogo;
    private javax.swing.JTextField txtShortDescription;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
    
    public void setProject(MavenProject project)
    {
        txtInceptionYear.setText(project.getModel().getInceptionYear() == null ? "" + Calendar.getInstance().get(Calendar.YEAR) : project.getModel().getInceptionYear());
        txtShortDescription.setText(project.getModel().getShortDescription() == null ? "" : project.getModel().getShortDescription());
        txtUrl.setText(project.getModel().getUrl() == null ? "http://" : project.getModel().getUrl());
        txtLogo.setText(project.getModel().getLogo() == null ? "" : project.getModel().getLogo());
        taDescription.setText(project.getModel().getDescription() == null ? "" : project.getModel().getDescription());
    }
    
    public MavenProject copyProject(MavenProject project)
    {
        project.getModel().setDescription(taDescription.getText());
        project.getModel().setShortDescription(txtShortDescription.getText());
        project.getModel().setInceptionYear(txtInceptionYear.getText());
        project.getModel().setUrl(txtUrl.getText());
        project.getModel().setLogo(txtLogo.getText());
        return project;
    }
    
    public boolean isInValidState()
    {
        //TODO some checks.
        return true;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer)
    {
        valObserver = observer;
    }
    
    public String getValidityMessage()
    {
        return "";
    }
    
}
