/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.MailingList;
import org.apache.maven.project.Project;
import org.mevenide.netbeans.project.MavenProject;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class ReportsPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(ReportsPanel.class);
    
    private boolean propagate;
    private ProjectValidateObserver valObserver;
    private MailingList currentList;
    private Listener listener;
    private MavenProject project;
    boolean doResolve = false;
    /** Creates new form BasicsPanel */
    public ReportsPanel(MavenProject proj) {
        initComponents();
        project = proj;
        valObserver = null;
        setName("Reports");
        setEnableFields(false);
        lstLists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    public void setEnableFields(boolean enable) {
        btnAdd.setEnabled(enable);
        btnRemove.setEnabled(enable);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblLists = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        spLists = new javax.swing.JScrollPane();
        lstLists = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        lblLists.setLabelFor(lstLists);
        lblLists.setText("Defined Reports:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblLists, gridBagConstraints);

        btnAdd.setText("Add");
        btnAdd.setActionCommand("btnAdd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnAdd, gridBagConstraints);

        btnRemove.setText("Remove");
        btnRemove.setActionCommand("btnRemove");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnRemove, gridBagConstraints);

        spLists.setPreferredSize(new java.awt.Dimension(300, 131));
        spLists.setViewportView(lstLists);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(spLists, gridBagConstraints);

    }//GEN-END:initComponents
    
    public void addNotify() {
        super.addNotify();
        listener = new Listener();
        btnAdd.addActionListener(listener);
        btnRemove.addActionListener(listener);
        lstLists.addListSelectionListener(listener);
    }
    
    public void removeNotify() {
        super.removeNotify();
        btnAdd.removeActionListener(listener);
        btnRemove.removeActionListener(listener);
        lstLists.removeListSelectionListener(listener);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel lblLists;
    private javax.swing.JList lstLists;
    private javax.swing.JScrollPane spLists;
    // End of variables declaration//GEN-END:variables
    
     public void setResolveValues(boolean resolve) {
//TODO        setEnableFields(!resolve);                
        doResolve = resolve;
        Project proj = project.getOriginalMavenProject();
        List list = proj.getReports();
        DefaultListModel model = new DefaultListModel();
        if (list != null) {
            Iterator it = list.iterator();
            while (it.hasNext()) {
                String report = (String)it.next();
                if (resolve) {
                    report = project.getPropertyResolver().resolveString(report);
                }
                model.addElement(report);
            }
            lstLists.setModel(model);
        }
        // nothing selected -> disable
        btnRemove.setEnabled(false);
        btnAdd.setEnabled(false);
    }
   
    public List getChanges() {
        return Collections.EMPTY_LIST;
//        // when copying over, we will discard the current instances in the project with our local fresh ones.
//        // I hope that is ok, and the mailing lists don't have custom properties.
//        DefaultListModel model = (DefaultListModel)lstLists.getModel();
//        ArrayList list = new ArrayList(model.size() + 5);
//        Enumeration en = model.elements();
//        while (en.hasMoreElements()) {
//            Object obj = en.nextElement();
//            list.add(obj);
//        }
//        project.setMailingLists(list);
//        return project;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    /**
     * returns 0 for ok, otherwise a integer code.
     */
    private int doValidateCheck() {
        return  0;
    }
    
    public boolean isInValidState() {
        // is always valid, since we can continue, error messages only happen when the
        // attemp to add to list is done.. if it fails, it's not commited, thus the state is always valid.
        return true;
    }
    
    public String getValidityMessage() {
        int retCode = doValidateCheck();
        String message = "";
        return message;
    }
    
    /**
     * action listener for buttons and list selection..
     */
    private class Listener implements ActionListener, ListSelectionListener {
        
        public void actionPerformed(ActionEvent e) {
            if ("btnRemove".equals(e.getActionCommand())) {
            }
            if ("btnAdd".equals(e.getActionCommand())) {
            }
        }

        public void valueChanged(ListSelectionEvent e) {
//            if (lstLists.getSelectedIndex() == -1) {
//                currentList = null;
//                btnRemove.setEnabled(false);
//            } else {
//                //TEMP                btnRemove.setEnabled(true);
//                //TEMP                btnEdit.setEnabled(true);
//            }
        }
    }
    
}
