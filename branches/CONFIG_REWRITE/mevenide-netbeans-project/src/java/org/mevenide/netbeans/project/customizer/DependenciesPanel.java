/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.Dependency;
import org.apache.maven.project.Project;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.dependencies.DependencyNode;
import org.mevenide.netbeans.project.dependencies.DependencyPanel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;


/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class DependenciesPanel extends JPanel implements ExplorerManager.Provider, ProjectPanel {
    private static final Log logger = LogFactory.getLog(DependenciesPanel.class);
    
    private MavenProject project;
    private ExplorerManager manager;
    private DependencyPanel currentCustomizer;
    private BeanTreeView btv;
    private boolean doResolve;
    
    /** Creates new form CustomGoalsPanel */
    public DependenciesPanel(MavenProject proj, boolean editable) {
        project = proj;
        initComponents();
        GridBagConstraints fillConstraints = new GridBagConstraints();
        fillConstraints.gridwidth = GridBagConstraints.REMAINDER;
        fillConstraints.gridheight = GridBagConstraints.REMAINDER;
        fillConstraints.fill = GridBagConstraints.BOTH;
        fillConstraints.weightx = 1.0;
        fillConstraints.weighty = 1.0;
        
        manager = new ExplorerManager();
        btv = new BeanTreeView();    // Add the BeanTreeView
        btv.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION );
        btv.setPopupAllowed( false );
        btv.setRootVisible( false );
        btv.setDefaultActionAllowed( false );
        pnlDeps.add(btv, fillConstraints);
        manager.addPropertyChangeListener( new ManagerChangeListener() );
        setFieldsEditable(editable);
        btnView.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String url = txtURL.getText().trim();
                url = project.getPropertyResolver().resolveString(url);
                if (url.startsWith("http://")) {
                    try {
                        URL link = new URL(url);
                        HtmlBrowser.URLDisplayer.getDefault().showURL(link);
                    } catch (MalformedURLException exc) {
                        NotifyDescriptor error = new NotifyDescriptor.Message("Is not a valid URL.", NotifyDescriptor.WARNING_MESSAGE);
                        DialogDisplayer.getDefault().notify(error);
                    }
                    
                }
            }
        });
        
    }
    
    public void setFieldsEditable(boolean editable) {
        txtArtifactID.setEditable(editable);
        txtGroupId.setEditable(editable);
        txtVersion.setEditable(editable);
        txtType.setEditable(editable);
        txtURL.setEditable(editable);
    }  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlDeps = new javax.swing.JPanel();
        pnlSingleDep = new javax.swing.JPanel();
        lblArtifactId = new javax.swing.JLabel();
        txtArtifactID = new javax.swing.JTextField();
        lblVersion = new javax.swing.JLabel();
        txtVersion = new javax.swing.JTextField();
        lblType = new javax.swing.JLabel();
        txtType = new javax.swing.JTextField();
        lblGroupId = new javax.swing.JLabel();
        txtGroupId = new javax.swing.JTextField();
        lblURL = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        pnlDeps.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        add(pnlDeps, gridBagConstraints);

        pnlSingleDep.setLayout(new java.awt.GridBagLayout());

        lblArtifactId.setText("Artifact");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(lblArtifactId, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlSingleDep.add(txtArtifactID, gridBagConstraints);

        lblVersion.setText("Version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(lblVersion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlSingleDep.add(txtVersion, gridBagConstraints);

        lblType.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(lblType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlSingleDep.add(txtType, gridBagConstraints);

        lblGroupId.setText("Group");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(lblGroupId, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlSingleDep.add(txtGroupId, gridBagConstraints);

        lblURL.setText("URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(lblURL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        pnlSingleDep.add(txtURL, gridBagConstraints);

        btnView.setText("View...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlSingleDep.add(btnView, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        add(pnlSingleDep, gridBagConstraints);

    }//GEN-END:initComponents
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    public void addNotify() {
        super.addNotify();
    }
    
    private void selectFirstNode() {
        Children ch = manager.getRootContext().getChildren();
        if ( ch != null ) {
            Node nodes[] = ch.getNodes();
            
            if ( nodes != null && nodes.length > 0 ) {
                try {
                    manager.setSelectedNodes( new Node[] { nodes[0] } );
                }
                catch ( PropertyVetoException e ) {
                    // No node will be selected
                }
            }
        }
    }
    
    /** Listens to selection change and shows the customizers as
     *  panels
     */
    
    private class ManagerChangeListener implements PropertyChangeListener {
        
        public void propertyChange(PropertyChangeEvent evt) {
            if(evt.getSource() != manager) {
                return;
            }
            
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                Node nodes[] = manager.getSelectedNodes();
                if ( nodes == null || nodes.length <= 0 ) {
                    return;
                }
                DependencyNode node = (DependencyNode)nodes[0];
                setDependency(node.getDependency());
                
                return;
            }
        }
    }
    
    private Node createRootNode(Project proj) {
        Node root = new AbstractNode(new DepRootChildren(proj));
        root.setName("root invisible");
        return root;
    }
    private String getValue(String value, boolean resolve) {
        if (resolve) {
            return project.getPropertyResolver().resolveString(value);
        }
        return value;
    }        
    
    public void setDependency(Dependency dependency) {
        txtArtifactID.setText(getValue(dependency.getArtifactId(), doResolve));
        txtGroupId.setText(getValue(dependency.getGroupId(), doResolve));
        txtType.setText(dependency.getType() != null ? getValue(dependency.getType(), doResolve) : "");
        txtVersion.setText(dependency.getVersion() != null ? getValue(dependency.getVersion(), doResolve) : "");
        txtURL.setText(dependency.getUrl() != null ? getValue(dependency.getUrl(), doResolve) : "");
    }    
    
    public List getChanges() {
        return Collections.EMPTY_LIST;
    }
    
    public String getValidityMessage() {
        return "";
    }
    
    public boolean isInValidState() {
        return true;
    }
    
     public void setResolveValues(boolean resolve) {
        doResolve = resolve;
        manager.setRootContext(createRootNode(project.getOriginalMavenProject()));
        btv.expandAll();
        selectFirstNode();
        
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
    }
    
    private class DepRootChildren extends Children.Keys {
        private Project project;
        public DepRootChildren(Project proj) {
            super();
            project = proj;
        }
        
        public void addNotify() {
            List depend = project.getDependencies();
            if (depend != null) {
                setKeys(depend);
            } else {
                setKeys(Collections.EMPTY_LIST);
            }
            
        }
        
        public void removeNotify() {
            setKeys(Collections.EMPTY_LIST);
        }
        
        protected Node[] createNodes(Object obj) {
            return new Node[] { new DependencyNode((Dependency)obj, DependenciesPanel.this.project)};
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JLabel lblArtifactId;
    private javax.swing.JLabel lblGroupId;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblURL;
    private javax.swing.JLabel lblVersion;
    private javax.swing.JPanel pnlDeps;
    private javax.swing.JPanel pnlSingleDep;
    private javax.swing.JTextField txtArtifactID;
    private javax.swing.JTextField txtGroupId;
    private javax.swing.JTextField txtType;
    private javax.swing.JTextField txtURL;
    private javax.swing.JTextField txtVersion;
    // End of variables declaration//GEN-END:variables
    
}
