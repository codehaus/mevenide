<?xml version="1.0" encoding="UTF-8"?>

<document>
  <properties>
    <title>maven-nbm-plugin Properties</title>
    <author>Milos Kleint (ca206216@tiscali.cz)</author>
  </properties>
  <body>
    <section name="Building Properties">
    	<div id="documentContent">
        These properties form a bridge between maven goals and the actions that 
        trigger building, compilation, running of tests etc. in the IDE.
        By redefining them in your project.properties or build.properties files, you can 
        customize what the IDE will run when the action is triggered. That way you can map your custom
        maven.xml based goal to the IDE's Build shortcut (F11) for example, and have it easily accessible for you and also your fellow
        developers.
      <table>
        <tr>
          <th>Property</th>
          <th>Default Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>maven.netbeans.exec.build</td>
          <td>jar:install</td>
          <td>
            <p>This goal is triggered when one invokes Build action on the project's popup or the Build Main Project action (F11) from the main menu.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.clean</td>
          <td>clean</td>
          <td>
            <p>This goal is triggered when one invokes Clean action on the project's popup. </p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.rebuild</td>
          <td>clean jar:install</td>
          <td>
            <p>This goal is triggered when one invokes Rebuild action on the project's popup or the Clean and Build Main Project action (Shift-F11) from the main menu.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.test</td>
          <td>test</td>
          <td>
            <p>Triggered by the Run tests action. Will run all the tests for the project. </p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.test-single</td>
          <td>-Dtestcase=%TESTCLASS% test:single</td>
          <td>
            <p>Will run only the currently selected test. %TESTCLASS% string is replaced by the packagename of the currently selected java file. </p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.javadoc</td>
          <td>javadoc</td>
          <td>
            <p> Triggered by the Generate Javadoc actionin the main menu or from the popup. Builds javadoc for the project.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.multiprojectbuild</td>
          <td>-Dgoal=jar:install multiproject:goal</td>
          <td>
            <p>For projects that declare the maven.multiproject.includes property, the popup action will run this goal. </p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.multiprojectclean</td>
          <td>multiproject:clean</td>
          <td>
            <p>For projects that declare the maven.multiproject.includes property, the popup action will clean the multiproject. </p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.run.single</td>
          <td>-Dmaven.mevenide.run.classname=%CLASS% mevenide:run-class</td>
          <td>
            <p></p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.run</td>
          <td>mevenide:run-artifact</td>
          <td>
            <p></p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.debug</td>
          <td>mevenide:debug-artifact</td>
          <td>
            <p></p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.debug.single</td>
          <td>-Dmaven.mevenide.run.classname=%CLASS% mevenide:debug-class</td>
          <td>
            <p></p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.exec.debug.test.single</td>
          <td>-Dtestcase=%TESTCLASS% mevenide:test-single-debug</td>
          <td>
            <p></p>
          </td>
        </tr>
      </table>
      </div>
      </section>
        
    <section name="Debug Properties">
    	<div id="documentContent">
        <p>when running any of the debug goals, the IDE will attempt to attach the debugger to the
        process started by the goal. These properties can be used to disable or customize the automatic 
        debugger attaching. (In the future the IDE should be also able to start a listening debugger and let the plugin connect to it.)</p>
<p> In case you create your own goals, completely avoiding the maven-mevenide-plugin, then please add a line starting with
<code>[mevenide-debug-start]</code>  into the output of the goal. The IDE is notified that way that it should start the attaching process.
</p>        
      <table>
        <tr>
          <th>Property</th>
          <th>Default Value</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>maven.netbeans.debug.attach</td>
          <td>true</td>
          <td>
            <p>Setting the value to false will cause the IDE not to initialize the debugger automatically.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.debug.port</td>
          <td>8888</td>
          <td>
            <p>The port that the IDE debugger will connect to.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.debug.address</td>
          <td>localhost</td>
          <td>
            <p>The host that the IDE connects to.</p>
          </td>
        </tr>
        <tr>
          <td>maven.netbeans.debug.delay</td>
          <td>5000</td>
          <td>
            <p>The delay between the time when the IDE notices the <code>[mevenide-debug-start]</code> line in the output and the time when the 
            debugger is starting attaching to the other VM.</p>
          </td>
        </tr>
      </table>
      </div>
      </section>
  </body>
</document>
