/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.mevenide.netbeans.project.wizards;

import java.io.File;
import java.util.Arrays;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.Document;
import org.mevenide.context.DefaultQueryContext;
import org.mevenide.genapp.GenAppTemplateFinder;
import org.mevenide.genapp.TemplateInfo;
import org.openide.WizardDescriptor;


public class GenAppTemplateVisual extends JPanel implements DocumentListener {
    
    private GenAppTemplatePanel panel;
    private GenAppTemplateFinder finder;
            
    public GenAppTemplateVisual(GenAppTemplatePanel pnl) {
        this.panel = pnl;
        initComponents();
        txtProjectName.getDocument().addDocumentListener( this );
        txtProjectDir.getDocument().addDocumentListener( this );
        // for genapp we have no other choice than use the non-project based context.
        finder = new GenAppTemplateFinder(DefaultQueryContext.getNonProjectContextInstance());
        
        setName("Name and Location");
        putClientProperty("NewProjectWizard_Title", "New Maven GenApp project");
        TemplateInfo[] infos = finder.getTemplates(GenAppTemplateFinder.LOCATION_ALL);
        DefaultListModel model = new DefaultListModel();
        if (infos != null) {
            Iterator it = Arrays.asList(infos).iterator();
            while (it.hasNext()) {
                model.addElement(new ListWrapper((TemplateInfo)it.next()));
            }
        }
        lstTemplateList.setModel(model);
        lstTemplateList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstTemplateList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                panel.fireChangeEvent();
            }
        });
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        if (txtProjectName.getText().length() == 0 ) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", "Project Name is not valid folder name.");
            return false; // Display name not specified
        }
        File destFolder = new File( txtFolder.getText() );
        File[] kids = destFolder.listFiles();
        if ( destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", "Project Folder already exists and is not empty.");
            return false;
        }
        if ( lstTemplateList.getSelectedIndex() == -1) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", "You need to select a template from the list.");
            return false;
        }
        wizardDescriptor.putProperty( "WizardPanel_errorMessage", "" );
        return true;

    }
    
    void read(WizardDescriptor d) {
        String val = (String)d.getProperty("artifactID");
        txtProjectName.setText(val != null ? val : "");
        val = (String)d.getProperty("projectDir");
        txtProjectDir.setText(val != null ? val : "");
        ListWrapper wr = (ListWrapper)d.getProperty("xxxtemplate");
        if (wr != null) {
            lstTemplateList.setSelectedValue(wr, true);
        }
    }
    
    void store(WizardDescriptor d) {
        d.putProperty("artifactID", txtProjectName.getText());
        d.putProperty(GenAppWizardIterator.PROPERTY_PREFIX + "id", txtProjectName.getText());
        d.putProperty("projectDir", txtProjectDir.getText());
        d.putProperty("finder", finder);
        ListWrapper wr = (ListWrapper)lstTemplateList.getSelectedValue();
        d.putProperty(GenAppWizardIterator.TEMPLATE, wr.getInfo());
        d.putProperty("xxxtemplate", lstTemplateList.getSelectedValue());
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        locationContainer = new javax.swing.JPanel();
        lblProjectName = new javax.swing.JLabel();
        txtProjectName = new javax.swing.JTextField();
        lblProjectDir = new javax.swing.JLabel();
        txtProjectDir = new javax.swing.JTextField();
        lblFolder = new javax.swing.JLabel();
        txtFolder = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        optionsContainer = new javax.swing.JPanel();
        lblTemplateList = new javax.swing.JLabel();
        lstTemplateList = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        locationContainer.setLayout(new java.awt.GridBagLayout());

        lblProjectName.setLabelFor(txtProjectName);
        lblProjectName.setText("Project Name (Artifact ID):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        locationContainer.add(lblProjectName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 0);
        locationContainer.add(txtProjectName, gridBagConstraints);

        lblProjectDir.setLabelFor(txtProjectDir);
        lblProjectDir.setText("Project Location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        locationContainer.add(lblProjectDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 0);
        locationContainer.add(txtProjectDir, gridBagConstraints);

        lblFolder.setLabelFor(txtFolder);
        lblFolder.setText("Project Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        locationContainer.add(lblFolder, gridBagConstraints);

        txtFolder.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 0);
        locationContainer.add(txtFolder, gridBagConstraints);

        btnBrowse.setText("Browse...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 5, 0);
        locationContainer.add(btnBrowse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(locationContainer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 12, 0);
        add(jSeparator1, gridBagConstraints);

        optionsContainer.setLayout(new java.awt.GridBagLayout());

        lblTemplateList.setLabelFor(lstTemplateList);
        lblTemplateList.setText("Available Templates");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        optionsContainer.add(lblTemplateList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        optionsContainer.add(lstTemplateList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(optionsContainer, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select Project Location");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = txtProjectDir.getText();
        if (path.length() > 0) {
            File f = new File(path);
            if (f.exists()) {
                chooser.setSelectedFile(f);
            }
        }
        if ( JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) { //NOI18N
            File projectDir = chooser.getSelectedFile();
            txtProjectDir.setText( projectDir.getAbsolutePath() );
        }
        panel.fireChangeEvent();
    }//GEN-LAST:event_btnBrowseActionPerformed
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        txtProjectName.requestFocus();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFolder;
    private javax.swing.JLabel lblProjectDir;
    private javax.swing.JLabel lblProjectName;
    private javax.swing.JLabel lblTemplateList;
    private javax.swing.JPanel locationContainer;
    private javax.swing.JList lstTemplateList;
    private javax.swing.JPanel optionsContainer;
    private javax.swing.JTextField txtFolder;
    private javax.swing.JTextField txtProjectDir;
    private javax.swing.JTextField txtProjectName;
    // End of variables declaration//GEN-END:variables
    
    public void changedUpdate( DocumentEvent e ) {
        updateTexts( e );
    }
    
    public void insertUpdate( DocumentEvent e ) {
        updateTexts( e );
    }
    
    public void removeUpdate( DocumentEvent e ) {
        updateTexts( e );
    }
    
    /** Handles changes in the Project name and project directory
     */
    private void updateTexts(DocumentEvent e) {
        Document doc = e.getDocument();
        if (doc == txtProjectName.getDocument() || doc == txtProjectDir.getDocument()) {
            String projectName = txtProjectName.getText();
            String projectFolder = txtProjectDir.getText();
            txtFolder.setText(projectFolder + File.separatorChar + projectName);
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
    private static class ListWrapper {
        private TemplateInfo info;
        ListWrapper(TemplateInfo i) {
            info = i;
        }
        
        public String toString() {
            return info.getDisplayName();
        }
        
        public TemplateInfo getInfo() {
            return info;
        }
    }
}
