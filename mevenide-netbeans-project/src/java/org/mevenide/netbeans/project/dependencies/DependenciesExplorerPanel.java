/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.dependencies;

import java.awt.GridBagConstraints;
import java.util.Collection;
import java.util.Collections;
import javax.swing.JPanel;
import javax.swing.tree.TreeSelectionModel;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.Dependency;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.dependencies.DependencyNode;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;


/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class DependenciesExplorerPanel extends JPanel implements ExplorerManager.Provider {
    private static final Log logger = LogFactory.getLog(DependenciesExplorerPanel.class);
    
    private MavenProject project;
    private ExplorerManager manager;
    private BeanTreeView btv;
    
    /** Creates new form CustomGoalsPanel */
    public DependenciesExplorerPanel(Collection deps, MavenProject proj) {
        initComponents();
        project = proj;
        GridBagConstraints fillConstraints = new GridBagConstraints();
        fillConstraints.gridwidth = GridBagConstraints.REMAINDER;
        fillConstraints.gridheight = GridBagConstraints.REMAINDER;
        fillConstraints.fill = GridBagConstraints.BOTH;
        fillConstraints.weightx = 1.0;
        fillConstraints.weighty = 1.0;
        
        manager = new ExplorerManager();
        btv = new BeanTreeView();    // Add the BeanTreeView
        btv.setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION );
        btv.setPopupAllowed( false );
        btv.setRootVisible( false );
        btv.setDefaultActionAllowed( false );
        pnlDeps.add(btv, fillConstraints);
        manager.setRootContext(createRootNode(deps));
        btv.expandAll();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlDeps = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        pnlDeps.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        add(pnlDeps, gridBagConstraints);

    }//GEN-END:initComponents
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    private Node createRootNode(Collection deps) {
        Node root = new AbstractNode(new DepRootChildren(deps));
        root.setName("root invisible");
        return root;
    }
    
    private class DepRootChildren extends Children.Keys {
        private Collection dependencies;
        public DepRootChildren(Collection deps) {
            super();
            dependencies = deps;
        }
        
        public void addNotify() {
            if (dependencies != null) {
                setKeys(dependencies);
            } else {
                setKeys(Collections.EMPTY_LIST);
            }
            
        }
        
        public void removeNotify() {
            setKeys(Collections.EMPTY_LIST);
        }
        
        protected Node[] createNodes(Object obj) {
            return new Node[] { new DependencyNode((Dependency)obj, DependenciesExplorerPanel.this.project)};
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlDeps;
    // End of variables declaration//GEN-END:variables
    
}
