/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import java.util.List;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.customizer.ui.LocationComboFactory;
import org.mevenide.netbeans.project.customizer.ui.OriginChange;
import org.mevenide.properties.IPropertyLocator;
import org.openide.util.NbBundle;

/**
 * basic props of java and jar plugins.
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class JavaPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(BuildPanel.class);
    
    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    private MavenProject project;
    
    private OriginChange ocDebug;
    private OriginChange ocDeprecated;    
    private OriginChange ocAdditional;
    private OriginChange ocMainClass;
    private OriginChange ocManifest;
    private OriginChange ocCompress;
    
    private HashMap changes;

    /** Creates new form BuildPanel */
    public JavaPanel(MavenProject proj) {
        project = proj;
        changes = new HashMap();
        initComponents();
        valObserver = null;
        setName("Java and Jar");
        populateChangeInstances();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        ocDebug = LocationComboFactory.createPropertiesChange(project);
        btnDebug = (JButton)ocDebug.getComponent();
        cbDebug = new javax.swing.JCheckBox();
        ocDeprecated = LocationComboFactory.createPropertiesChange(project);
        btnDeprecated = (JButton)ocDeprecated.getComponent();
        cbDeprecated = new javax.swing.JCheckBox();
        lblAdditional = new javax.swing.JLabel();
        txtAdditional = new javax.swing.JTextField();
        ocAdditional = LocationComboFactory.createPropertiesChange(project);
        btnAdditional = (JButton)ocAdditional.getComponent();
        lblMainClass = new javax.swing.JLabel();
        txtMainClass = new javax.swing.JTextField();
        ocMainClass = LocationComboFactory.createPropertiesChange(project);
        btnMainClass = (JButton)ocMainClass.getComponent();
        lblManifest = new javax.swing.JLabel();
        txtManifest = new javax.swing.JTextField();
        ocManifest = LocationComboFactory.createPropertiesChange(project);
        btnManifest = (JButton)ocManifest.getComponent();
        ocCompress = LocationComboFactory.createPropertiesChange(project);
        btnCompress = (JButton)ocCompress.getComponent();
        cbCompress = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnDebug, gridBagConstraints);

        cbDebug.setText("Generate Debugging Info");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbDebug, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnDeprecated, gridBagConstraints);

        cbDeprecated.setText("Report Usage of Deprecated APIs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbDeprecated, gridBagConstraints);

        lblAdditional.setLabelFor(txtAdditional);
        lblAdditional.setText("Additional Compiler Options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblAdditional, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtAdditional, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnAdditional, gridBagConstraints);

        lblMainClass.setLabelFor(txtMainClass);
        lblMainClass.setText("Main Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        add(lblMainClass, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        add(txtMainClass, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        add(btnMainClass, gridBagConstraints);

        lblManifest.setLabelFor(txtManifest);
        lblManifest.setText("Manifest File:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnCompress, gridBagConstraints);

        cbCompress.setText("Compress JAR File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbCompress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        add(jPanel1, gridBagConstraints);

    }//GEN-END:initComponents
    
  private void populateChangeInstances() {
        createToggleChangeInstance("maven.compile.debug", cbDebug, ocDebug, true);
        createToggleChangeInstance("maven.compile.deprecation", cbDeprecated, ocDeprecated, false);
        createToggleChangeInstance("maven.jar.compress", cbCompress, ocCompress, true);
        createChangeInstance("maven.compile.compilerargs", txtAdditional, ocAdditional);
        createChangeInstance("maven.jar.mainclass", txtMainClass, ocMainClass);
        createChangeInstance("maven.jar.manifest", txtManifest, ocManifest);
        
   }
   
   private void createToggleChangeInstance(String key, JCheckBox field, OriginChange oc, boolean defaultValue) {
       String value = project.getPropertyResolver().getResolvedValue(key);
       int location = project.getPropertyLocator().getPropertyLocation(key);
       if (value == null) {
           value = Boolean.toString(defaultValue);
           location = IPropertyLocator.LOCATION_NOT_DEFINED;
       }
       changes.put(key, new CheckBoxPropertyChange(key, value, location, field, oc, defaultValue, false));
   }    
   
   private void createChangeInstance(String key, JTextField field, OriginChange oc) {
       String value = project.getPropertyResolver().getValue(key);
       int location = project.getPropertyLocator().getPropertyLocation(key);
       if (value == null) {
           value = "";
           location = IPropertyLocator.LOCATION_NOT_DEFINED;
       }
       String defaultValue = project.getPropertyLocator().getValueAtLocation(key, IPropertyLocator.LOCATION_DEFAULTS);
       changes.put(key, new TextFieldPropertyChange(key, value, location, field, oc, defaultValue));
   }

    public void setResolveValues(boolean resolve) {
        assignValue("maven.compile.compilerargs", resolve);
        assignValue("maven.jar.mainclass", resolve);
        assignValue("maven.jar.manifest", resolve);
   }
   
   
   private void assignValue(String key, boolean resolve) {
       TextFieldPropertyChange change = (TextFieldPropertyChange)changes.get(key);
       if (resolve) {
           String value = project.getPropertyResolver().resolveString(change.getNewValue());
           change.setResolvedValue(value);
       } else {
           change.resetToNonResolvedValue();
       }
   }   
   
    
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenChange change = (MavenChange)it.next();
            if (change.hasChanged()) {
                toReturn.add(change);
            }
        }
        System.out.println("returning=" + toReturn.size());
        return toReturn;
    }
    
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    public boolean isInValidState() {
        return true;
    }
    
    public String getValidityMessage() {
        String message = "";
        return message;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdditional;
    private javax.swing.JButton btnCompress;
    private javax.swing.JButton btnDebug;
    private javax.swing.JButton btnDeprecated;
    private javax.swing.JButton btnMainClass;
    private javax.swing.JButton btnManifest;
    private javax.swing.JCheckBox cbCompress;
    private javax.swing.JCheckBox cbDebug;
    private javax.swing.JCheckBox cbDeprecated;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAdditional;
    private javax.swing.JLabel lblMainClass;
    private javax.swing.JLabel lblManifest;
    private javax.swing.JTextField txtAdditional;
    private javax.swing.JTextField txtMainClass;
    private javax.swing.JTextField txtManifest;
    // End of variables declaration//GEN-END:variables
    

    
}
