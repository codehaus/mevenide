/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s): theanuradha@netbeans.org
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.maven.buildplan.ui;

import java.awt.Image;
import java.util.ArrayList;
import java.util.List;
import org.apache.maven.project.MavenProject;
import org.netbeans.modules.maven.buildplan.BuildPlanView;
import org.netbeans.modules.maven.buildplan.nodes.NodeUtils;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/**
 *
 * @author  Anuradha
 */
public class BuildPlanViewUI extends javax.swing.JPanel implements ExplorerManager.Provider {

    private transient ExplorerManager explorerManager = new ExplorerManager();
    private BuildPlanView planView;
    private BeanTreeView treeView;

    /** Creates new form BuildPlanViewUI */
    public BuildPlanViewUI(BuildPlanView planView) {
        this.planView = planView;
        initComponents();
        treeView = (BeanTreeView) jScrollPane1;
        setName(planView.getProject().getName() + " (" + planView.getProject().getPackaging() + ")");

    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public void buildNodeView() {
        List<MavenProject> list=new ArrayList<MavenProject>(); 
        list.add(planView.getProject());
        list.addAll(planView.getCollectedProjects());
         Children children = NodeUtils.createBuildPlanChildren(planView,
                    list);

        final AbstractNode node = new AbstractNode(children) {

            @Override
            public Image getIcon(int arg0) {
                return Utilities.loadImage("org/netbeans/modules/maven/buildplan/nodes/buildplangoals.png");
            }

            @Override
            public Image getOpenedIcon(int arg0) {
                return getIcon(arg0);
            }

            @Override
            public String getHtmlDisplayName() {
                return NbBundle.getMessage(BuildPlanViewUI.class,
                        "LBL_Buildplan_of_goals", new Object[]{getTasksAsString()});
            }
        };

        explorerManager.setRootContext(node);
        treeView.expandNode(node);


    }

    private String getTasksAsString() {
        StringBuffer sb = new StringBuffer();
        for (String task : planView.getTasks()) {
            if (sb.length() > 0) {
                sb.append(",");
            }
            sb.append(task);
        }

        return sb.toString();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
