/* 
 * Copyright (C) 2003  Gilles Dodinet (gdodinet@wanadoo.fr)
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 */
package org.mevenide.core;

/**
 * 
 * generated by MockCreator (http://www.abstrakt.de/mockcreator.html)
 * 
 * @author Gilles Dodinet (gdodinet@wanadoo.fr)
 * @version $Id: MockIGoalsGrabber.java 20 avr. 2003 21:03:4513:34:35 Exp gdodinet 
 * 
 */
public class MockIGoalsManager extends de.abstrakt.mock.MockObject implements org.mevenide.core.IGoalsManager
{
	private java.lang.Object	_addGoalDummyValue;
	private java.lang.Boolean	_addGoalExpectFlag;
	private java.lang.Object	_getGoalsToRunDummyValue;
	private java.lang.Boolean	_getGoalsToRunExpectFlag;
	private java.lang.Object	_getSelectedGoalsDummyValue;
	private java.lang.Boolean	_getSelectedGoalsExpectFlag;
	private java.lang.Object	_removeGoalDummyValue;
	private java.lang.Boolean	_removeGoalExpectFlag;
	private java.lang.Object	_runGoalsDummyValue;
	private java.lang.Boolean	_runGoalsExpectFlag;
	private java.lang.Object	_saveDummyValue;
	private java.lang.Boolean	_saveExpectFlag;

	public java.lang.String[] getGoalsToRun()
	{
		Object returnValue = null;
		if( _getGoalsToRunExpectFlag != null && _getGoalsToRunExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "getGoalsToRun" } );
		}
		else
		{
			returnValue = _getGoalsToRunDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
		return (java.lang.String[])returnValue;
	}

	public java.lang.String[] getGoals( java.lang.String plugin )
	{
		Object returnValue = null;
		if( _getSelectedGoalsExpectFlag != null && _getSelectedGoalsExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "getSelectedGoals", plugin } );
		}
		else
		{
			returnValue = _getSelectedGoalsDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
		return (java.lang.String[])returnValue;
	}

	public void addGoal( java.lang.String plugin, java.lang.String goal ) throws org.mevenide.core.GoalNotFoundException
	{
		Object returnValue = null;
		if( _addGoalExpectFlag != null && _addGoalExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "addGoal", plugin, goal } );
		}
		else
		{
			returnValue = _addGoalDummyValue;
		}
		if( returnValue instanceof org.mevenide.core.GoalNotFoundException )
		{
			throw (org.mevenide.core.GoalNotFoundException)returnValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void expectAddGoal( java.lang.String plugin, java.lang.String goal )
	{
		_addGoalExpectFlag = checkDummy( _addGoalExpectFlag, true );
		addExpectedMethodCall( new Object[] { "addGoal", plugin, goal } );
	}

	public void expectAddGoal( java.lang.String plugin, java.lang.String goal, Throwable throwable )
	{
		_addGoalExpectFlag = checkDummy( _addGoalExpectFlag, true );
		addExpectedMethodCall( new Object[] { "addGoal", plugin, goal }, throwable );
	}

	public void expectGetGoalsToRun( Throwable throwable )
	{
		_getGoalsToRunExpectFlag = checkDummy( _getGoalsToRunExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getGoalsToRun" }, throwable );
	}

	public void expectGetGoalsToRun( java.lang.String[] returnValue )
	{
		_getGoalsToRunExpectFlag = checkDummy( _getGoalsToRunExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getGoalsToRun" }, returnValue );
	}

	public void expectGetSelectedGoals( java.lang.String plugin, Throwable throwable )
	{
		_getSelectedGoalsExpectFlag = checkDummy( _getSelectedGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getSelectedGoals", plugin }, throwable );
	}

	public void expectGetSelectedGoals( java.lang.String plugin, java.lang.String[] returnValue )
	{
		_getSelectedGoalsExpectFlag = checkDummy( _getSelectedGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getSelectedGoals", plugin }, returnValue );
	}

	public void expectRemoveGoal( java.lang.String plugin, java.lang.String goal )
	{
		_removeGoalExpectFlag = checkDummy( _removeGoalExpectFlag, true );
		addExpectedMethodCall( new Object[] { "removeGoal", plugin, goal } );
	}

	public void expectRemoveGoal( java.lang.String plugin, java.lang.String goal, Throwable throwable )
	{
		_removeGoalExpectFlag = checkDummy( _removeGoalExpectFlag, true );
		addExpectedMethodCall( new Object[] { "removeGoal", plugin, goal }, throwable );
	}

	public void expectRunGoals( Throwable throwable )
	{
		_runGoalsExpectFlag = checkDummy( _runGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "runGoals" }, throwable );
	}

	public void expectRunGoals()
	{
		_runGoalsExpectFlag = checkDummy( _runGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "runGoals" } );
	}

	public void expectSave( Throwable throwable )
	{
		_saveExpectFlag = checkDummy( _saveExpectFlag, true );
		addExpectedMethodCall( new Object[] { "save" }, throwable );
	}

	public void expectSave()
	{
		_saveExpectFlag = checkDummy( _saveExpectFlag, true );
		addExpectedMethodCall( new Object[] { "save" } );
	}

	public void removeGoal( java.lang.String plugin, java.lang.String goal )
	{
		Object returnValue = null;
		if( _removeGoalExpectFlag != null && _removeGoalExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "removeGoal", plugin, goal } );
		}
		else
		{
			returnValue = _removeGoalDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void runGoals()
	{
		Object returnValue = null;
		if( _runGoalsExpectFlag != null && _runGoalsExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "runGoals" } );
		}
		else
		{
			returnValue = _runGoalsDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void save() throws java.io.IOException
	{
		Object returnValue = null;
		if( _saveExpectFlag != null && _saveExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "save" } );
		}
		else
		{
			returnValue = _saveDummyValue;
		}
		if( returnValue instanceof java.io.IOException )
		{
			throw (java.io.IOException)returnValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void setAddGoalDummy( Throwable throwable )
	{
		_addGoalExpectFlag = checkDummy( _addGoalExpectFlag, false );
		_addGoalDummyValue = throwable;
	}

	public void setGetGoalsToRunDummy( Throwable throwable )
	{
		_getGoalsToRunExpectFlag = checkDummy( _getGoalsToRunExpectFlag, false );
		_getGoalsToRunDummyValue = throwable;
	}

	public void setGetGoalsToRunDummy( java.lang.String[] returnValue )
	{
		_getGoalsToRunExpectFlag = checkDummy( _getGoalsToRunExpectFlag, false );
		_getGoalsToRunDummyValue = returnValue;
	}

	public void setGetSelectedGoalsDummy( Throwable throwable )
	{
		_getSelectedGoalsExpectFlag = checkDummy( _getSelectedGoalsExpectFlag, false );
		_getSelectedGoalsDummyValue = throwable;
	}

	public void setGetSelectedGoalsDummy( java.lang.String[] returnValue )
	{
		_getSelectedGoalsExpectFlag = checkDummy( _getSelectedGoalsExpectFlag, false );
		_getSelectedGoalsDummyValue = returnValue;
	}

	public void setRemoveGoalDummy( Throwable throwable )
	{
		_removeGoalExpectFlag = checkDummy( _removeGoalExpectFlag, false );
		_removeGoalDummyValue = throwable;
	}

	public void setRunGoalsDummy( Throwable throwable )
	{
		_runGoalsExpectFlag = checkDummy( _runGoalsExpectFlag, false );
		_runGoalsDummyValue = throwable;
	}

	public void setSaveDummy( Throwable throwable )
	{
		_saveExpectFlag = checkDummy( _saveExpectFlag, false );
		_saveDummyValue = throwable;
	}
}