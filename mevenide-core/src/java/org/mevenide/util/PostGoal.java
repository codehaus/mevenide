/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 Gilles Dodinet (rhill@wanadoo.fr).  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software licensed under 
 *        Apache Software License (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Mevenide" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact mevenide-general-dev@lists.sourceforge.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Mevenide", nor may "Apache" or "Mevenide" appear in their name, without
 *    prior written permission of the Mevenide Team and the ASF.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.mevenide.util;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;

/**
 * 
 * @author Gilles Dodinet (gdodinet@wanadoo.fr)
 * @version $Id: PostGoal.java 21 avr. 2003 10:52:5713:34:35 Exp gdodinet 
 * 
 */
public class PostGoal {
	private static Log log = LogFactory.getLog(PostGoal.class);
	 
	private PostGoal() {
	}

    public static void create(File mavenXml) {
				Document doc = new Document();
		Namespace gdfact =
			Namespace.getNamespace(
				"g",
				"http://oss.gdfact.com/2003/maven/get-goals");
		Namespace jellyCore = Namespace.getNamespace("j", "jelly:core");

		Element root = new Element("project");
		root.addNamespaceDeclaration(gdfact);
		root.addNamespaceDeclaration(jellyCore);

		Comment authent =
			new Comment(
				" Generated by Eclipse plugin for Maven. please dont edit. "
					+ new Date()
					+ " ");
		root.addContent(authent);

		Element postGoal = new Element("postGoal");
		postGoal.setAttribute("name", "eclipse:get-goals");
		root.addContent(postGoal);

		Element set = new Element("set", jellyCore);
		set.setAttribute("var", "output");
		set.setAttribute(
			"value",
			new File(mavenXml.getParentFile(), "maven-goals.xml")
				.getAbsolutePath());
		postGoal.addContent(set);

		Element storeGoals = new Element("store-goals", gdfact);
		storeGoals.setAttribute("attr", "output");
		storeGoals.addContent("${output}");
		postGoal.addContent(storeGoals);

		doc.setRootElement(root);

		try {
			JDomOutputter.output(doc, mavenXml);
		} 
        catch (IOException e) {
			log.debug("Unable to output Document to file '" + mavenXml.getAbsolutePath() + "' due to : " + e);
		}

	}

	public static boolean validate(File mavenXml, String output) {
		if (!mavenXml.exists()) {
			return false;
		}
		try {
			SAXBuilder builder = new SAXBuilder();
			Document doc = builder.build(mavenXml);
			Element projectRoot = doc.getRootElement();
			List postGoals = projectRoot.getChildren("postGoal");
			for (int i = 0; i < postGoals.size(); i++) {
				Element postGoal = ((Element) postGoals.get(i));
				ResourceBundle rb = ResourceBundle.getBundle("mevenide");
                if (postGoal
					.getAttribute("name")
					.equals(rb.getString("goals.grabber.name"))) {
					return postGoal.getText().equals(output);
				}
			}
			return false;
		} 
        catch (Exception ex) {
			log.debug("Unable to validate maven.xml file ('" + mavenXml.getAbsolutePath() + "' due to : " + ex);
			return false;
		}
	}
}
