Usage

  Assuming you have specified the environment variables <<JAVA_HOME>> and <<M2_HOME>>
  the plugin should be ready to run without any further configuration.

  In case <<JAVA_HOME>> is not defined, the plugin uses the internal IDEA JDK.
  
  If <<M2_HOME>> is not defined, you must specify the home directory of Maven-2
  in the configuration dialogs. This is a change starting from version 1.1 of the
  plugin.

  Before version 1.1, Maven was called via the start script provided with the normal Maven
  installation. In order to get better access to the running Maven process Maven now is called
  directly by starting a Java process. This for example allows terminating the running Maven
  process by the user.

  The configuration can be done in two ways:

  Either via the IDE Settings or the Project Settings.

* IDE Settings

  The following picture shows the IDE Settings Maven configuration dialog,
  where you can specify the behaviour of Maven.
  
[screenshots/plugin-application-configuration-1.jpg]

  Currently, only a few options are available.

  * <<Maven-2 Home Directory>>: Lets you set the path to the Maven-2 home directory

  * <<Maven-2 Options>>: Lets you specify the options Maven should run with. These options apply to
    every goal or phase you execute.

    The following options are available:

+----------
Options:
 -C,--strict-checksums         Fail the build if checksums don't match
 -c,--lax-checksums            Warn if checksums don't match
 -P,--activate-profiles        Comma-delimited list of profiles to
                               activate
 -ff,--fail-fast               Stop at first failure in reactorized builds
 -fae,--fail-at-end            Only fail the build afterwards; allow all
                               non-impacted builds to continue
 -B,--batch-mode               Run in non-interactive (batch) mode
 -fn,--fail-never              NEVER fail the build, regardless of project
                               result
 -up,--update-plugins          Synonym for cpu
 -N,--non-recursive            Do not recurse into sub-projects
 -npr,--no-plugin-registry     Don't use ~/.m2/plugin-registry.xml for
                               plugin versions
 -U,--update-snapshots         Update all snapshots regardless of
                               repository policies
 -cpu,--check-plugin-updates   Force upToDate check for any relevant
                               registered plugins
 -npu,--no-plugin-updates      Suppress upToDate check for any relevant
                               registered plugins
 -D,--define                   Define a system property
 -X,--debug                    Produce execution debug output
 -e,--errors                   Produce execution error messages
 -f,--file                     Force the use of an alternate POM file.
 -h,--help                     Display help information
 -o,--offline                  Work offline
 -r,--reactor                  Execute goals for project found in the
                               reactor
 -s,--settings                 Alternate path for the user settings file
 -v,--version                  Display version information
+----------

  * <<Maven-2 Command line arguments>>: Lets you specify any command line arguments. Could be useful
    to pass virtual machine options or other properties to Maven.

  []
  
[screenshots/plugin-application-configuration-2.jpg]

  In this dialog you can specify whether you would like the plugin to scan for existing POMs
  whenever you open an IDEA project. Check if you want to.

  All settings you have made here will apply to each and every project/module. They are meant to
  be global options.

  The settings can be overridden with the project specific settings.

* Project Settings

[screenshots/plugin-project-configuration.jpg]

  This dialog looks pretty much the same as the IDE Settings Maven-2 dialog. The project settings
  allow you to override settings you have made in the IDE Settings Maven-2 dialog.

  This can be useful if you want to try out or simply run your goals with a different Maven-2
  version.

  Also you might want to activate project related settings, like profiles or other options that
  only apply to a specific project.

  Whenever you are in need to do it, this is the right place to configure it.

* The Tool Window

  The Tool Window is placed right on the screen and can be activated (deactivated) via
  <<Windows->Tool Windows->Maven-2 Build>>

[screenshots/tool-window-activation.jpg]

  It shows the list of available Maven Project Object Models (POMs).

[screenshots/tool-window.jpg]


[screenshots/pom-list.jpg]

  POMs can be added to the tool window with the

[screenshots/pom-add.jpg]

  button or by right clicking on the root node, showing a context sensitive popup menu as shown
  below

[screenshots/rootnode-popup-menu.jpg]

  and removed with the

[screenshots/pom-remove.jpg]

  button or via the popup menu (right click on the particular POM).

[screenshots/popup-menu-pom.jpg]

  Each POM has a set of sub nodes, where the first sub node is called <<Phases>>. Those phases
  represent the standard Maven phases and allow the execution of specific phases in the Maven
  build lifecycle.

  It is possible to select and execute more than one phase.

[screenshots/tool-action-execute-phases.jpg]

  Simply select the apropriate phases (by holding down the CTRL Key) and select the execute
  action in the toolbar.

[screenshots/icon-execute.jpg]

  You can also execute phases via a popup menu by selecting the phases (hold down CTRL Key) and
  press the right mouse button (with CTRL Key still hold down). The following popup menu is shown

[screenshots/popup-menu-execute-phases.jpg]

  When opening a POM, the POM is scanned for specific plugins listed in the build section. Those
  plugins are added below the <<Phases>> node and allow the execution of specific goals of the
  plugin.

  This only works if the IDEA Maven-2 plugin can locate and access the Maven-2 repository on the local
  filesystem.

  It is also possible to add specific Maven plugins manually to a POM. Simply right click on the
  particular POM and select the

[screenshots/icon-add-plugin.jpg]

  icon in the toolbar. This can also be achieved by right clicking the POM and select <<Add Plugin>>.

  Removing of plugins is also supported. Select a particular (or multiple) plugin(s) and click
  the <<Remove Plugin>> icon in the toolbar as shown in the following screenshot:

[screenshots/tool-action-remove-plugin.jpg]

  It's also possible to do this with a right click opening popup menu.

  Sub nodes of a selected node (root node, POM, Phases or Plugin) can be sorted alphabetically by
  clicking the sort icon in the toolbar as shown below:

[screenshots/tool-action-sort.jpg]

  The phases of the IntelliJ IDEA Maven Plugin POM have been sorted in ascending order by clicking
  the sort icon.

* Execution of goals or phases

  Phases or goals can be executed in different ways:

  [1] Double click on a specific phase or on a specific plugin goal

  [2] Select goal(s) or phase(s) and click on the execute icon in the toolbar

  [3] Select goal(s) or phase(s) and right-click to start execution via popup menu

  []

* Build output window

  When a build is triggered all output generated by Maven is directed to the <<Maven-2 Build Output>>
  window at the bottom.

[screenshots/error-highlighting.jpg]

  In case of compilation failures the errors are highlighted and a click on the highlighted error
  will open the particular source file in IDEA.

  Now you can start fixing the problem just at the line, the compiler has reported as erroneous.

  The build output window contains several buttons on the left side of the panel, which
  allow you to rerun the last Maven command, pause the message output, cancel the
  currently running process and close the output window.

[screenshots/build-output-window.jpg]

  The following screenshot shows the output window in more detail.

[screenshots/build-output-window-detail.jpg]

  If you want to run the last Maven command select the following icon:

[screenshots/build-output-rerun-action.jpg]

  it gets enabled as soon as the build has finished. During a build process the
  icon is disabled.

  The output can be paused by clicking the button

[screenshots/build-output-pause-output-action.jpg]

  during the build. All output is stopped immediately and can be continued by
  clicking the button once again.

  In case you just want to cancel the currently running build process you can select
  the

[screenshots/build-output-cancel-build-action.jpg]

  icon.

  Clicking the

[screenshots/build-output-close-window-action.jpg]

  icon closes the Maven-2 build output window.

