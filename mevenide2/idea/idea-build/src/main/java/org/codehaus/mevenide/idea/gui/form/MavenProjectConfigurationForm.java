/* ==========================================================================
 * Copyright 2006 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */



package org.codehaus.mevenide.idea.gui.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import org.codehaus.mevenide.idea.common.MavenBuildPluginSettings;
import org.codehaus.mevenide.idea.util.PluginConstants;

import java.awt.*;

import javax.swing.*;

/**
 * Describe what this class does.
 *
 * @author Ralf Quebbemann
 * @version $Revision$
 */
public class MavenProjectConfigurationForm extends AbstractConfigurationForm {
    private JCheckBox checkBoxScanForExistingPoms;
    private JPanel panel;
    private JTabbedPane rootComponent;

    /**
     * Constructs ...
     */
    public MavenProjectConfigurationForm() {
        setupForm();
        buttonMavenHomeDir.setActionCommand(PluginConstants.ACTION_COMMAND_SET_MAVEN_HOME);
        buttonAlternativeSettingsFile.setActionCommand(PluginConstants.ACTION_COMMAND_SET_ALTERNATE_SETTINGS);
    }

    /**
     * Method description
     *
     * @return Document me!
     */
    public JCheckBox getCheckBoxScanForExistingPoms() {
        return checkBoxScanForExistingPoms;
    }

    /**
     * Method description
     *
     * @param data Document me!
     */
    public void getData(MavenBuildPluginSettings data) {
        getData(data);
        data.setScanForExistingPoms(checkBoxScanForExistingPoms.isSelected());
    }

    /**
     * Method description
     *
     * @return Document me!
     */
    public JPanel getPanel() {
        return panel;
    }

    /**
     * Method description
     *
     * @return Document me!
     */
    public JComponent getRootComponent() {
        return rootComponent;
    }

    /**
     * Method description
     *
     * @param data Document me!
     * @return Document me!
     */
    public boolean isModified(MavenBuildPluginSettings data) {
        return isDataModified(data) || (checkBoxScanForExistingPoms.isSelected() != data.isScanForExistingPoms());
    }

    /**
     * Method description
     *
     * @param checkBoxScanForExistingPoms Document me!
     */
    public void setCheckBoxScanForExistingPoms(JCheckBox checkBoxScanForExistingPoms) {
        this.checkBoxScanForExistingPoms = checkBoxScanForExistingPoms;
    }

    /**
     * Method description
     *
     * @param data Document me!
     */
    public void setData(MavenBuildPluginSettings data) {
        setData(data);
        checkBoxScanForExistingPoms.setSelected(data.isScanForExistingPoms());
    }

    /**
     * Method description
     *
     * @param panel Document me!
     */
    public void setPanel(JPanel panel) {
        this.panel = panel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection HardCodedStringLiteral
     */
    private void setupForm() {
        rootComponent = new JTabbedPane();

        final JPanel panel1 = new JPanel();

        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootComponent.addTab(PluginConstants.CONFIG_DIALOG_TAB_MAVEN_SETUP, panel1);
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(8, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel,
                   new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                                       GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                       GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                       null, null, null));

        JLabel labelMavenExecutable = new JLabel();

        labelMavenExecutable.setText(PluginConstants.CONFIG_DIALOG_LABEL_MAVEN_HOME_DIRECTORY);
        panel.add(labelMavenExecutable,
                  new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                      GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(357, 14), null));
        textFieldMavenHomeDir = new JTextField();
        panel.add(textFieldMavenHomeDir,
                  new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(357, 20), null));
        buttonMavenHomeDir = new JButton();
        buttonMavenHomeDir.setLabel("...");
        buttonMavenHomeDir.setText("...");
        panel.add(buttonMavenHomeDir,
                  new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                      GridConstraints.SIZEPOLICY_FIXED, null, null, null));

        JLabel labelAlternativeSettingsFile = new JLabel();

        labelAlternativeSettingsFile.setText(PluginConstants.CONFIG_DIALOG_LABEL_SETTINGS_FILE);
        panel.add(labelAlternativeSettingsFile,
                  new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                      GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(357, 14), null));
        textFieldAlternateSettingsFile = new JTextField();
        panel.add(textFieldAlternateSettingsFile,
                  new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(150, -1), null));
        buttonAlternativeSettingsFile = new JButton();
        buttonAlternativeSettingsFile.setLabel("...");
        buttonAlternativeSettingsFile.setText("...");
        panel.add(buttonAlternativeSettingsFile,
                  new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                      GridConstraints.SIZEPOLICY_FIXED, null, null, null));

        JLabel labelMavenGlobalCmdLineArgs = new JLabel();

        labelMavenGlobalCmdLineArgs.setText(PluginConstants.CONFIG_DIALOG_LABEL_MAVEN_GLOBAL_COMMAND_LINE_ARGUMENTS);
        panel.add(labelMavenGlobalCmdLineArgs,
                  new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                      GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(357, 14), null));
        textFieldMavenCmdLineArgs = new JTextField();
        panel.add(textFieldMavenCmdLineArgs,
                  new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(150, -1), null));
        labelVmOptions = new JLabel();
        labelVmOptions.setText(PluginConstants.CONFIG_DIALOG_LABEL_VM_OPTIONS);
        panel.add(labelVmOptions,
                  new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                      GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(357, 14), null));
        textFieldVmOptions = new JTextField();
        panel.add(textFieldVmOptions,
                  new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                      GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                      new Dimension(150, -1), null));
        rootComponent.addTab(PluginConstants.CONFIG_DIALOG_TAB_MAVEN_OPTIONS, createMavenOptionsPanel());

        final JPanel panelGeneral = new JPanel();

        panelGeneral.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootComponent.addTab(PluginConstants.CONFIG_DIALOG_TAB_GENERAL, panelGeneral);

        final Spacer spacer1 = new Spacer();

        panelGeneral.add(spacer1,
                         new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL,
                             1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null));
        checkBoxScanForExistingPoms = new JCheckBox();
        checkBoxScanForExistingPoms.setText(PluginConstants.CONFIG_DIALOG_CHECKBOX_LABEL_SCAN_POMS);
        panelGeneral.add(checkBoxScanForExistingPoms,
                         new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                             GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                             GridConstraints.SIZEPOLICY_FIXED, null, null, null));
    }
}
