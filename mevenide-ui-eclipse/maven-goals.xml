<?xml version="1.0" standalone="yes"?>
<!DOCTYPE goals [
	<!ELEMENT goals (category*)>
	<!ELEMENT category (goal+)>
	<!ATTLIST category name NMTOKEN #REQUIRED>
	<!ELEMENT goal (description?, prereqs?)>
	<!ATTLIST goal name CDATA #REQUIRED>
	<!ELEMENT description (#PCDATA)>
	<!ELEMENT prereqs (prereq*)>
	<!ELEMENT prereq (#PCDATA)>
	<!ATTLIST prereq goal CDATA #REQUIRED>
]>
<goals>
	<category name="maven-tasklist-plugin">
		<goal name="report">
			<description>Generate a list of tasks from @todo tags in your code</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-junit-report-plugin">
		<goal name="report">
			<description>Generate a report from the test results</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-file-activity-plugin">
		<goal name="report">
			<description>Generate developer and file activity reports</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="dist">
		<goal name="build-bin">
			<description>Build the binary distribution.</description>
			<prereqs>
				<prereq goal="dist:build-setup"/>
				<prereq goal="dist:prepare-bin-filesystem"/>
			</prereqs>
		</goal>
		<goal name="build-src">
			<description>Build the source distribution.</description>
			<prereqs>
				<prereq goal="dist:build-setup"/>
				<prereq goal="dist:prepare-src-filesystem"/>
			</prereqs>
		</goal>
		<goal name="deploy">
			<description>Deploy a distribution</description>
			<prereqs/>
		</goal>
		<goal name="prepare-bin-filesystem">
			<description>Builds the binary distribution file system.</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
				<prereq goal="java:jar"/>
				<prereq goal="javadoc:generate"/>
			</prereqs>
		</goal>
		<goal name="build-setup">
			<description>Set up directories for a distribution build</description>
			<prereqs/>
		</goal>
		<goal name="deploy-snapshot">
			<description>Deploy a snapshot distribution</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Build a complete distribution.</description>
			<prereqs>
				<prereq goal="dist:build"/>
			</prereqs>
		</goal>
		<goal name="build">
			<description>Build a complete distribution.</description>
			<prereqs>
				<prereq goal="dist:build-bin"/>
				<prereq goal="dist:build-src"/>
			</prereqs>
		</goal>
		<goal name="deploy-bin">
			<description>Deploy a binary distribution</description>
			<prereqs/>
		</goal>
		<goal name="deploy-src">
			<description>Deploy a source distribution</description>
			<prereqs/>
		</goal>
		<goal name="prepare-src-filesystem">
			<description>Builds the source distribution file system.</description>
			<prereqs/>
		</goal>
	</category>
	<category name="codeswitcher">
		<goal name="init">
			<description>Validate the Maven XML project descriptor</description>
			<prereqs/>
		</goal>
	</category>
	<category name="classworlds-configuration">
		<goal name="(default)">
			<description>Generate launcher configuration</description>
			<prereqs/>
		</goal>
	</category>
	<category name="eclipse">
		<goal name="generate-project">
			<description>Generate Eclipse .project and .classpath project files</description>
			<prereqs/>
		</goal>
		<goal name="add-maven-repo">
			<description>Ensure that the classpath variable MAVEN_REPO is available</description>
			<prereqs/>
		</goal>
		<goal name="get-goals">
			<description>Get all the available goals</description>
			<prereqs/>
		</goal>
		<goal name="external-tools">
			<description>Generate an Eclipse external tool for each goal</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate Eclipse project files</description>
			<prereqs>
				<prereq goal="eclipse:generate-project"/>
			</prereqs>
		</goal>
	</category>
	<category name="tiny-app">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="java">
		<goal name="jar-resources">
			<description>Copy any resources that must be present in the deployed JAR file</description>
			<prereqs/>
		</goal>
		<goal name="prepare-filesystem">
			<description>Create the directory structure needed to compile</description>
			<prereqs/>
		</goal>
		<goal name="compile">
			<description>Compile the project</description>
			<prereqs>
				<prereq goal="java:prepare-filesystem"/>
			</prereqs>
		</goal>
		<goal name="jar">
			<description>Create the deliverable jar file.</description>
			<prereqs>
				<prereq goal="test:test"/>
			</prereqs>
		</goal>
	</category>
	<category name="maven-javadoc-plugin">
		<goal name="report">
			<description>Generate API documentation</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-cactus-plugin">
		<goal name="report">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-statcvs-plugin">
		<goal name="report">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="jbuilder">
		<goal name="generate-project">
			<description>Generate JBuilder [id_project].jpx file</description>
			<prereqs/>
		</goal>
		<goal name="generate-library">
			<description>Generate JBuilder [id_project].library file</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate JBuilder project files</description>
			<prereqs>
				<prereq goal="jbuilder:generate-library"/>
				<prereq goal="jbuilder:generate-project"/>
			</prereqs>
		</goal>
	</category>
	<category name="genapp">
		<goal name="(default)">
			<description>Generate Application using 'maven -Dpackage=org.mycompany.project genapp'</description>
			<prereqs/>
		</goal>
	</category>
	<category name="torque">
		<goal name="om-check">
			<description>No available description</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="om-generate">
			<description>No available description</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generates SQL files and Peer-based OM objects</description>
			<prereqs/>
		</goal>
		<goal name="create-db">
			<description>generates the target database</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="sql-check">
			<description>Determine if the SQL files need to be generated</description>
			<prereqs/>
		</goal>
		<goal name="om-zip-worker-delete">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="jdbc">
			<description>jdbc to xml</description>
			<prereqs>
				<prereq goal="torquwe:init"/>
			</prereqs>
		</goal>
		<goal name="ojb">
			<description>Generates the repository and om for ojb (experimental)</description>
			<prereqs/>
		</goal>
		<goal name="check-om-zip">
			<description>No available description</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="om-zip">
			<description>Moves source om files to separate jar and out of the source tree</description>
			<prereqs>
				<prereq goal="check-om-zip"/>
			</prereqs>
		</goal>
		<goal name="ojb-repository">
			<description>Generates the repository for ojb (experimental)</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="om">
			<description>Generate the Peer-based object model from *-schema.xml files</description>
			<prereqs>
				<prereq goal="torque:init"/>
				<prereq goal="torque:om-check"/>
			</prereqs>
		</goal>
		<goal name="datadtd">
			<description>Generates the DATA DTD for your project</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="datadump">
			<description>dump data from database into xml file</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="datasql">
			<description>generates sql from data xml</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="id-table-init-sql">
			<description>generates initialization sql for ID Broker</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="sql2xml">
			<description>creates an xml schema from an sql schema</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Build classpath and define tasks</description>
			<prereqs/>
		</goal>
		<goal name="sql">
			<description>generates the SQL for your project</description>
			<prereqs>
				<prereq goal="torque:init"/>
				<prereq goal="torque:sql-check"/>
			</prereqs>
		</goal>
		<goal name="om-zip-worker">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="insert-sql">
			<description>inserts the generated sql</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="sql-generate">
			<description>No available description</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
		<goal name="doc">
			<description>Generates documentation for your datamodel</description>
			<prereqs>
				<prereq goal="torque:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="ejb">
		<goal name="ejb">
			<description>Build an ejb file</description>
			<prereqs>
				<prereq goal="ejb:init"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install the ejb in the local repository</description>
			<prereqs>
				<prereq goal="ejb:ejb"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Initialize filesystem and other resources for an ejb build</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Build an ejb file</description>
			<prereqs>
				<prereq goal="ejb:ejb"/>
			</prereqs>
		</goal>
	</category>
	<category name="touchstone-partner-goal-A">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-checkstyle-plugin">
		<goal name="report">
			<description>Generate code convention conformance reports</description>
			<prereqs>
				<prereq goal="checkstyle:check-license-file"/>
			</prereqs>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="dt">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs>
				<prereq goal="clean"/>
				<prereq goal="tiny-app"/>
				<prereq goal="war"/>
			</prereqs>
		</goal>
	</category>
	<category name="maven-jxr-plugin">
		<goal name="report">
			<description>Generate HTML cross reference sources</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-license-plugin">
		<goal name="report">
			<description>Generate an XML file from the license.txt</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="jnlp">
		<goal name="generate-keystore">
			<description>Generate a keystore file</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate JNLP file and sign all jars</description>
			<prereqs>
				<prereq goal="jnlp:generate-jnlp"/>
			</prereqs>
		</goal>
		<goal name="generate-jnlp">
			<description>Generate the .jnlp file and sign all jars</description>
			<prereqs>
				<prereq goal="java:jar"/>
			</prereqs>
		</goal>
	</category>
	<category name="word2html">
		<goal name="generate">
			<description>Generate HTML docs from Word via CScript</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
				<prereq goal="word2html:prepare-filesystem"/>
			</prereqs>
		</goal>
		<goal name="prepare-filesystem">
			<description>Create directories needed for the plugin</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-jellydoc-plugin">
		<goal name="report">
			<description>Generates the tag documentation</description>
			<prereqs>
				<prereq goal="jellydoc"/>
			</prereqs>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="clover">
		<goal name="swing-report">
			<description>Generate Swing test coverage reports with Clover</description>
			<prereqs>
				<prereq goal="clover:on"/>
				<prereq goal="test:test"/>
			</prereqs>
		</goal>
		<goal name="on">
			<description>Create the needed directory structure</description>
			<prereqs/>
		</goal>
		<goal name="html-report">
			<description>Generate HTML test coverage reports with Clover</description>
			<prereqs>
				<prereq goal="clover:on"/>
				<prereq goal="test:test"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate HTML test coverage reports with Clover</description>
			<prereqs>
				<prereq goal="clover:html-report"/>
			</prereqs>
		</goal>
	</category>
	<category name="plugin">
		<goal name="generate-goals">
			<description>Generate goals.xml for the plugin</description>
			<prereqs/>
		</goal>
		<goal name="generate-docs">
			<description>Generate navigation, goals and properties docs</description>
			<prereqs/>
		</goal>
		<goal name="generate-properties">
			<description>Generate properties.xml for the plugin</description>
			<prereqs/>
		</goal>
		<goal name="deploy">
			<description>Install an unpacked version of the plugin</description>
			<prereqs>
				<prereq goal="plugin"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install the plugin in Maven's plugins dir</description>
			<prereqs>
				<prereq goal="plugin"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Build and install a plugin</description>
			<prereqs/>
		</goal>
		<goal name="generate-navigation">
			<description>Generate navigation.xml for the plugin</description>
			<prereqs/>
		</goal>
	</category>
	<category name="jar">
		<goal name="snapshot">
			<description>Create a snapshot jar, ie 'id-YYYYMMDD.hhmmss.jar'</description>
			<prereqs/>
		</goal>
		<goal name="install-snapshot">
			<description>Install a snapshot jar in the local repository</description>
			<prereqs>
				<prereq goal="jar:snapshot"/>
			</prereqs>
		</goal>
		<goal name="deploy">
			<description>Deploy a jar to the remote repository</description>
			<prereqs/>
		</goal>
		<goal name="install">
			<description>Install the jar in the local repository</description>
			<prereqs>
				<prereq goal="java:jar"/>
			</prereqs>
		</goal>
		<goal name="deploy-snapshot">
			<description>Deploy a snapshot jar to the remote repository</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Create the deliverable jar file.</description>
			<prereqs>
				<prereq goal="java:jar"/>
			</prereqs>
		</goal>
	</category>
	<category name="docbook">
		<goal name="transform">
			<description>Transform any docbook-simple source into xdocs for later use</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="site">
		<goal name="war">
			<description>Create a WAR File from the generated site</description>
			<prereqs>
				<prereq goal="site:init"/>
				<prereq goal="site"/>
			</prereqs>
		</goal>
		<goal name="ear">
			<description>Create an EAR File from the generated site</description>
			<prereqs>
				<prereq goal="site:war"/>
			</prereqs>
		</goal>
		<goal name="fsdeploy">
			<description>Deploy the generated site by copying to the site directory</description>
			<prereqs>
				<prereq goal="site:init"/>
			</prereqs>
		</goal>
		<goal name="deploy">
			<description>deploy the generated site docs</description>
			<prereqs/>
		</goal>
		<goal name="run-reports">
			<description>No available description</description>
			<prereqs>
				<prereq goal="xdoc:register-reports"/>
			</prereqs>
		</goal>
		<goal name="sshdeploy">
			<description>Deploy the generated site docs using ssh</description>
			<prereqs>
				<prereq goal="site:init"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate the web site</description>
			<prereqs/>
		</goal>
		<goal name="generate">
			<description>No available description</description>
			<prereqs>
				<prereq goal="site"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>No available description</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="console">
		<goal name="listGoals">
			<description>List all available goals</description>
			<prereqs/>
		</goal>
		<goal name="help">
			<description>Print the help message.</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Run the Maven console</description>
			<prereqs/>
		</goal>
	</category>
	<category name="startup-shell-script">
		<goal name="(default)">
			<description>Generate starter script</description>
			<prereqs/>
		</goal>
	</category>
	<category name="license">
		<goal name="transfer">
			<description>Generate a xml file from your license file</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate an XML file from the license file</description>
			<prereqs>
				<prereq goal="license:transfer"/>
			</prereqs>
		</goal>
	</category>
	<category name="jellydoc">
		<goal name="xml-doclet">
			<description>Creates an XML representation of the doclet information</description>
			<prereqs>
				<prereq goal="jellydoc:init"/>
			</prereqs>
		</goal>
		<goal name="doclet">
			<description>A doclet which outputs all the Jelly tag related metadata as XML</description>
			<prereqs>
				<prereq goal="jellydoc:init"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generates the tag documentation</description>
			<prereqs>
				<prereq goal="jellydoc:doclet"/>
			</prereqs>
		</goal>
	</category>
	<category name="plexus">
		<goal name="find-components">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deploy">
			<description>Deploys Plexus into a self-contained directory</description>
			<prereqs/>
		</goal>
		<goal name="sea">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="statcvs">
		<goal name="generate">
			<description>Generate CVS statistics for the current CVS project</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate CVS statistics for the current CVS project</description>
			<prereqs>
				<prereq goal="statcvs:generate"/>
			</prereqs>
		</goal>
	</category>
	<category name="maven-clover-plugin">
		<goal name="report">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="deploy">
		<goal name="pom">
			<description>Deploy POM to the central repository.</description>
			<prereqs/>
		</goal>
	</category>
	<category name="release">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="xdoc">
		<goal name="performJSL">
			<description>Allows the LinkCheck plugin to xdoc a single directory</description>
			<prereqs/>
		</goal>
		<goal name="jelly-transform">
			<description>transform xdocs using jelly/jsl rather than dvsl</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
				<prereq goal="xdoc:jelly-init"/>
				<prereq goal="xdoc:register-reports"/>
			</prereqs>
		</goal>
		<goal name="transform">
			<description>Generate html project documentation xdoc sources</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="register-reports">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="dump-report-settings">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="copy-user-resources">
			<description>Copy user provided resources to docs destination</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="copy-resources">
			<description>copy static resources for use in xdocs generated html</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="generate-from-pom">
			<description>Generates xdocs for site based on project descriptor</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
				<prereq goal="xdoc:register-reports"/>
			</prereqs>
		</goal>
		<goal name="jelly-init">
			<description>Set up jelly xdoc requirements</description>
			<prereqs/>
		</goal>
		<goal name="validate">
			<description>Validate xdocs match the schema</description>
			<prereqs>
				<prereq goal="pom:taglib"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate html project documentation xdoc sources</description>
			<prereqs>
				<prereq goal="xdoc:generate-from-pom"/>
				<prereq goal="xdoc:transform"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Generates the directory structure required for xdocs</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-changelog-plugin">
		<goal name="report">
			<description>Generate a changelog report</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="junitdoclet">
		<goal name="(default)">
			<description>Generate unit tests</description>
			<prereqs/>
		</goal>
	</category>
	<category name="ear">
		<goal name="ear">
			<description>Build an ear file</description>
			<prereqs>
				<prereq goal="ear:init"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install the ear in the local repository</description>
			<prereqs>
				<prereq goal="ear:ear"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Initialise filesystem and other resources for an ear</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Build an ear file</description>
			<prereqs>
				<prereq goal="ear:ear"/>
			</prereqs>
		</goal>
	</category>
	<category name="ant">
		<goal name="generate-build">
			<description>Generate an Ant build file</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate an Ant build file</description>
			<prereqs>
				<prereq goal="ant:generate-build"/>
			</prereqs>
		</goal>
	</category>
	<category name="perforce">
		<goal name="dummy">
			<description>No use</description>
			<prereqs/>
		</goal>
	</category>
	<category name="convert-snapshots">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="cactus">
		<goal name="test-text">
			<description>Start the tests using the text runner</description>
			<prereqs>
				<prereq goal="cactus:test-init"/>
				<prereq goal="cactus:init"/>
			</prereqs>
		</goal>
		<goal name="test-init">
			<description>Test initialization</description>
			<prereqs/>
		</goal>
		<goal name="webapp">
			<description>Create the Cactus webapp</description>
			<prereqs/>
		</goal>
		<goal name="webapp-update">
			<description>Generate an expanded Cactus webapp from a project expanded webapp</description>
			<prereqs>
				<prereq goal="cactus:compile"/>
			</prereqs>
		</goal>
		<goal name="test-swing">
			<description>Start the tests using the swing runner</description>
			<prereqs>
				<prereq goal="cactus:test-init"/>
				<prereq goal="cactus:init"/>
			</prereqs>
		</goal>
		<goal name="merge-webxml">
			<description>Generate a web.xml which is the merge betweem the user project web.xml and the webapp elements needed by Cactus</description>
			<prereqs/>
		</goal>
		<goal name="test">
			<description>Execute all testcases</description>
			<prereqs/>
		</goal>
		<goal name="test-text-single">
			<description>Start the tests using the text runner</description>
			<prereqs>
				<prereq goal="cactus:test-init"/>
				<prereq goal="cactus:init"/>
			</prereqs>
		</goal>
		<goal name="generate">
			<description>Generate HTML report</description>
			<prereqs/>
		</goal>
		<goal name="single">
			<description>Execute a single test defined using the 'mavencactustestcase' variable</description>
			<prereqs/>
		</goal>
		<goal name="init">
			<description>Creates objects useful for several goals</description>
			<prereqs/>
		</goal>
		<goal name="compile">
			<description>Compile Cactus tests</description>
			<prereqs>
				<prereq goal="java:compile"/>
			</prereqs>
		</goal>
	</category>
	<category name="latex">
		<goal name="generate">
			<description>Generate documentation from latex source</description>
			<prereqs>
				<prereq goal="latex:prepare-filesystem"/>
			</prereqs>
		</goal>
		<goal name="prepare-filesystem">
			<description>Prepare the filesystem for latex processing</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-developer-activity-plugin">
		<goal name="report">
			<description>Generate developer and file activity reports</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="test">
		<goal name="match-test">
			<description>[deprecated] please use the test:match goal instead</description>
			<prereqs/>
		</goal>
		<goal name="test-resources">
			<description>Copy any resources that must be present for run tests</description>
			<prereqs>
				<prereq goal="test:prepare-filesystem"/>
			</prereqs>
		</goal>
		<goal name="prepare-filesystem">
			<description>Create the needed directory structure</description>
			<prereqs/>
		</goal>
		<goal name="match">
			<description>Execute all the tests matching the given 'testmatch' variable</description>
			<prereqs>
				<prereq goal="test:compile"/>
			</prereqs>
		</goal>
		<goal name="single-test">
			<description>[deprecated] please use the test:single goal instead</description>
			<prereqs/>
		</goal>
		<goal name="test">
			<description>Test the application</description>
			<prereqs>
				<prereq goal="test:compile"/>
			</prereqs>
		</goal>
		<goal name="ui">
			<description>Starts the Swing TestRunner front end</description>
			<prereqs>
				<prereq goal="test:compile"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Test the application</description>
			<prereqs>
				<prereq goal="test:test"/>
			</prereqs>
		</goal>
		<goal name="single">
			<description>Execute a single test defined using the 'testcase' variable</description>
			<prereqs>
				<prereq goal="test:compile"/>
			</prereqs>
		</goal>
		<goal name="compile">
			<description>Compile the TestCases and TestSuites</description>
			<prereqs>
				<prereq goal="java:compile"/>
				<prereq goal="java:jar-resources"/>
				<prereq goal="test:prepare-filesystem"/>
				<prereq goal="test:test-resources"/>
			</prereqs>
		</goal>
	</category>
	<category name="maven-linkcheck-plugin">
		<goal name="report">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="clearcache">
			<description>Removes the cache file</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="report-real">
			<description>Generate link check results and then transform to HTML</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="validate-pom-for-release">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="webserver">
		<goal name="reinstall">
			<description>Reinstall a webserver instance</description>
			<prereqs>
				<prereq goal="webserver:init"/>
				<prereq goal="webserver:install-${maven.webserver.fullname}"/>
			</prereqs>
		</goal>
		<goal name="restart">
			<description>Restart the web server instance</description>
			<prereqs>
				<prereq goal="webserver:init"/>
				<prereq goal="webserver:restart-${maven.webserver.fullname}"/>
			</prereqs>
		</goal>
		<goal name="stop">
			<description>Stop a webserver instance if started</description>
			<prereqs>
				<prereq goal="webserver:init"/>
			</prereqs>
		</goal>
		<goal name="clean">
			<description>Safely delete an installed webserver instance</description>
			<prereqs>
				<prereq goal="webserver:init"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install or reinstall a webserver instance</description>
			<prereqs>
				<prereq goal="webserver:init"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Initialize resources needed for the plugin</description>
			<prereqs/>
		</goal>
		<goal name="start">
			<description>Start or restart a webserver instance</description>
			<prereqs>
				<prereq goal="webserver:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="latka">
		<goal name="jmeter-convert">
			<description>Convert a jmeter jmx file to a latka suite</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Run the project's latka tests</description>
			<prereqs/>
		</goal>
		<goal name="test">
			<description>Run the project's latka tests</description>
			<prereqs/>
		</goal>
		<goal name="single">
			<description>Execute a single test defined using the 'testcase' variable</description>
			<prereqs/>
		</goal>
	</category>
	<category name="clean">
		<goal name="clean">
			<description>Remove all project artifacts</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Remove all project artifacts</description>
			<prereqs>
				<prereq goal="clean:clean"/>
			</prereqs>
		</goal>
	</category>
	<category name="aspectj">
		<goal name="compile">
			<description>Compile code with AspectJ</description>
			<prereqs/>
		</goal>
		<goal name="ajdoc">
			<description>Javadoc source using ajdoc</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Compile code with AspectJ</description>
			<prereqs>
				<prereq goal="aspectj:compile"/>
			</prereqs>
		</goal>
	</category>
	<category name="repository">
		<goal name="audit-copy-license">
			<description>copy the license for the specified groupId to the repository</description>
			<prereqs/>
		</goal>
		<goal name="delete-project">
			<description>delete a project, specified by groupId, in the repository</description>
			<prereqs/>
		</goal>
		<goal name="audit-copy-licenses">
			<description>copy all licenses in the audit file to the repository</description>
			<prereqs/>
		</goal>
		<goal name="create-project">
			<description>create a project, specified by groupId, in the repository</description>
			<prereqs/>
		</goal>
		<goal name="deploy-snapshot-jar">
			<description>deploy a snapshot jar, specified by file, to the repository</description>
			<prereqs/>
		</goal>
		<goal name="audit-create-licenses">
			<description>create the license directories, for all groups in the audit file, in the repository</description>
			<prereqs/>
		</goal>
		<goal name="audit-rename-licenses">
			<description>rename/link all licenses from their original name to ${groupId}.license</description>
			<prereqs/>
		</goal>
	</category>
	<category name="idea">
		<goal name="generate-project">
			<description>Generate IDEA .ipr and .iws project files</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate IDEA project files</description>
			<prereqs>
				<prereq goal="idea:generate-project"/>
			</prereqs>
		</goal>
	</category>
	<category name="uberjar">
		<goal name="classworlds-conf">
			<description>Generates a classworlds conf</description>
			<prereqs>
				<prereq goal="uberjar:init"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Build a uberjar file</description>
			<prereqs>
				<prereq goal="uberjar:uberjar"/>
			</prereqs>
		</goal>
		<goal name="uberjar">
			<description>Build an uberjar</description>
			<prereqs>
				<prereq goal="java:jar"/>
				<prereq goal="uberjar:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="pdf">
		<goal name="pdf">
			<description>Generate PDF project documentation</description>
			<prereqs>
				<prereq goal="pdf:init"/>
				<prereq goal="fo"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>No available description</description>
			<prereqs>
				<prereq goal="xdoc:init"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate PDF project documentation</description>
			<prereqs>
				<prereq goal="pdf:pdf"/>
			</prereqs>
		</goal>
	</category>
	<category name="gump">
		<goal name="generate-descriptor">
			<description>Generate Gump descriptor from Maven descriptor</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate Gump descriptor from Maven descriptor</description>
			<prereqs>
				<prereq goal="gump:generate-descriptor"/>
			</prereqs>
		</goal>
	</category>
	<category name="convert-snapshots-auto">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-jdepend-plugin">
		<goal name="report">
			<description>Generate a dependency report with JDepend</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="maven-changes-plugin">
		<goal name="report">
			<description>Generate a changes report</description>
			<prereqs/>
		</goal>
		<goal name="register">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="deregister">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="jdeveloper">
		<goal name="generate-project">
			<description>Generate jdeveloper .jpr</description>
			<prereqs>
				<prereq goal="jdeveloper:scanSources"/>
			</prereqs>
		</goal>
		<goal name="scanSources">
			<description>Scans the source in order to integrate them into JDeveloper files</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Generate JDeveloper project files</description>
			<prereqs>
				<prereq goal="jdeveloper:generate-project"/>
			</prereqs>
		</goal>
	</category>
	<category name="jalopy">
		<goal name="taskdef">
			<description>Define the jalopy task to Ant and Jelly</description>
			<prereqs/>
		</goal>
		<goal name="format">
			<description>Format all sources with code convention conformance</description>
			<prereqs>
				<prereq goal="jalopy:taskdef"/>
				<prereq goal="java:compile"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Format all sources with code convention conformance</description>
			<prereqs>
				<prereq goal="jalopy:format"/>
			</prereqs>
		</goal>
	</category>
	<category name="checkstyle">
		<goal name="determine-properties">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="report">
			<description>No available description</description>
			<prereqs/>
		</goal>
		<goal name="check-license-file">
			<description>Checks the existence of the LICENSE.txt file</description>
			<prereqs/>
		</goal>
	</category>
	<category name="javadoc">
		<goal name="generate">
			<description>No available description</description>
			<prereqs>
				<prereq goal="maven-javadoc-plugin:report"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>No available description</description>
			<prereqs>
				<prereq goal="maven-javadoc-plugin:report"/>
			</prereqs>
		</goal>
	</category>
	<category name="antlr">
		<goal name="generate">
			<description>Generate source from antlr grammars</description>
			<prereqs>
				<prereq goal="antlr:prepare-filesystem"/>
			</prereqs>
		</goal>
		<goal name="prepare-filesystem">
			<description>Make any necessary directories for antlr processing</description>
			<prereqs/>
		</goal>
	</category>
	<category name="build-components">
		<goal name="(default)">
			<description>build components</description>
			<prereqs/>
		</goal>
	</category>
	<category name="increment-snapshot-version">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="fo">
		<goal name="fo">
			<description>Generate XSL:FO project documentation</description>
			<prereqs>
				<prereq goal="pdf:init"/>
			</prereqs>
		</goal>
		<goal name="(default)">
			<description>Generate XSL:FO project documentation</description>
			<prereqs>
				<prereq goal="fo:fo"/>
			</prereqs>
		</goal>
	</category>
	<category name="tasklist">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs>
				<prereq goal="maven-tasklist-plugin:report"/>
			</prereqs>
		</goal>
	</category>
	<category name="appserver">
		<goal name="reinstall">
			<description>Reinstall a appserver instance</description>
			<prereqs>
				<prereq goal="appserver:init"/>
				<prereq goal="appserver:install-${maven.appserver.fullname}"/>
			</prereqs>
		</goal>
		<goal name="restart">
			<description>Restart the web server instance</description>
			<prereqs>
				<prereq goal="appserver:init"/>
				<prereq goal="appserver:restart-${maven.appserver.fullname}"/>
			</prereqs>
		</goal>
		<goal name="clean">
			<description>Safely delete an installed appserver instance</description>
			<prereqs>
				<prereq goal="appserver:init"/>
			</prereqs>
		</goal>
		<goal name="stop">
			<description>Stop a appserver instance if started</description>
			<prereqs>
				<prereq goal="appserver:init"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install or reinstall a appserver instance</description>
			<prereqs>
				<prereq goal="appserver:init"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Initialize resources needed for the plugin</description>
			<prereqs/>
		</goal>
		<goal name="start">
			<description>Start or restart a appserver instance</description>
			<prereqs>
				<prereq goal="appserver:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="pom">
		<goal name="validate">
			<description>Validate the Maven XML project descriptor</description>
			<prereqs/>
		</goal>
		<goal name="update">
			<description>Update the POM from its current version to a specified version</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Validate the Maven XML project descriptor</description>
			<prereqs>
				<prereq goal="pom:validate"/>
			</prereqs>
		</goal>
		<goal name="contentvalidate">
			<description>Validate the content of the Maven POM</description>
			<prereqs/>
		</goal>
	</category>
	<category name="wizard">
		<goal name="ui">
			<description>Run the Maven Swing Wizard</description>
			<prereqs/>
		</goal>
	</category>
	<category name="war">
		<goal name="webapp">
			<description>Build a webapp directory</description>
			<prereqs>
				<prereq goal="war:init"/>
			</prereqs>
		</goal>
		<goal name="install">
			<description>Install the war in the local repository</description>
			<prereqs>
				<prereq goal="war:war"/>
			</prereqs>
		</goal>
		<goal name="init">
			<description>Initialize the file system and attain any necessary goals</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Build a war file</description>
			<prereqs>
				<prereq goal="war:war"/>
			</prereqs>
		</goal>
		<goal name="war">
			<description>Build a war file</description>
			<prereqs>
				<prereq goal="war:init"/>
			</prereqs>
		</goal>
	</category>
	<category name="touchstone-goal-E">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="touchstone-goal-D">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="touchstone-goal-C">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="touchstone-goal-B">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="touchstone-goal-A">
		<goal name="(default)">
			<description>No available description</description>
			<prereqs/>
		</goal>
	</category>
	<category name="struts">
		<goal name="validate-war">
			<description>Ensure a war file containing a Struts application is valid</description>
			<prereqs/>
		</goal>
		<goal name="(default)">
			<description>Ensure a war file containing a Struts application is valid</description>
			<prereqs>
				<prereq goal="struts:validate-war"/>
			</prereqs>
		</goal>
	</category>
</goals>