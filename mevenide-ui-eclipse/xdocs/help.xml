<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
    <properties>
    	<author email="rhill@wanadoo.fr">Gilles Dodinet</author>
        <title>Help Page</title>
    </properties>
    <body>
    	<section name="Entries">
    		<blockquote>
    			<a href="#Configure Mevenide">Configure Mevenide</a><br/>
    			<a href="#Mevenide Menu">Mevenide Menu</a><br/>
    			<a href="#Run Maven">Run Maven</a><br/>
    			<a href="#Synchronize">Synchronize</a><br/>
	    		<a href="#Maven Console">Maven Console</a>
    		</blockquote>
    	</section>
        <section name="Configure Mevenide">
        	<p>
			    Before using Mevenide, you will have to configure it. That is done through Maven Preferences page :
				<i><code>Window &gt; Preferences &gt; Maven</code></i>. Java Home, Maven Home and 
				Maven repository are required in order to successfully use Mevenide. 
				<br/><br/>
				Also a POM template can be specified that will be used when creating POM skeleton.
				<br/><br/>
				if you want Mevenide to check the timestamp of project.xml or .classpath before synchronize them, 
				set the 'Chek Timestamp' button. This can prevent you to inadvertently override your configuration files.
				If it is checked and synchronization isnot necessary, Mevenide exits quietly.
				<br/><br/>
				Last, you can can specify default goals which will be run when invoking the runner.
				<br/><br/>
				<center>
					<img src="images/set-preferences.png" border="1px"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 1</b>Mevenide Preferences Page</font>
				</center>
			    <br/><br/>
			</p>
        </section>
            
        <section name="Mevenide Menu">
			<p>	
			    Mevenide actions can be accessed through the 'Maven' menu in either 
			    <code>project.xml</code> or Eclipse Project contextual menu.
			    <br/><br/>
			    <center>
					<img border="1px" src="images/mevenide-menu.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 2</b>Mevenide Menu</font>
					<br/><br/>
				</center>
            </p>
        </section>
        <section name="Run Maven">
			<p>
				<br/><b><font size="+1">Launch Wizard</font></b><br/><br/>
				Mevenide is now integrated into Eclipse External Tools.
				<br/><br/>
				When selecting '<code>Run Maven...</code>' from 'Maven' menu, a wizard appears that allows you
				to pick options relevant in the context of the IDE (that means, f.i, <code>-b</code>, <code>-h</code>, <code>-p</code> options, among others, are not accessible).
				System properties can also be specified using the 'Add' button. 
				<br/><br/>
				The Text widget at the bottom of the wizard page is writable and goals to run are to be passed in there for now. 
				A goals grabbing mechanism is in progress and should be released soon. The table is used to pass System Properties to Maven.
				<br/><br/>
				<center>
					<img border="1px" src="images/run-maven.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 3</b>Run Maven Dialog</font>
					<br/><br/>
				</center>
				<b><br/><font size="+1">Launch Shortcut</font></b><br/><br/>
				The "Run As> Maven Project" command silently invokes the default Maven goals specified in the preference page.
				<br/><br/>
				<center>
					<img border="1px" src="images/mevenide-quicklaunch.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 4</b>QuickLaunch Button</font>
				</center>
            </p>
        </section>
        <section name="Synchronize">
			<p>
				Mevenide Pom Synchronization now provides only one Page, consisting of two main elements : 
				<ul>
					<li>a TabFolder from which user should specify which artifact is to put back in to the POM</li>
					<li>a simple composite allowing the user to specify the inheritance status of the POM</li>
				</ul>
			</p>
			<p>	
				<br/><b><font size="+1">SourceDirectory Synchronization</font></b><br/><br/>
				Since POM contains much more information than Eclipse .classpath, when synchronizing POM,
				user have to provide additional informations. For every Eclipse SourceFolder, the type of Maven Source Directory has to be specified
				through the SourceDirectory Mapping wizard page. Also user should declare if it is inherited or not. If the POM itself isnot 
				inherited then the checkbox (third column) isnot enabled.
				<br/><br/>
				<center>
					<img border="1px" src="images/sourcedirectory-mapping.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 5</b>Source Directory Mapping Wizard Page</font>
					<br/><br/>
				</center>
			</p>
			<p>
				<br/><b><font size="+1">Dependency Synchronization</font></b><br/><br/>
				Mevenide provides an automatic Dependency resolving mechanism that can determine in a rather accurate way the groupId, artifactId and version of a given Dependency.
				Tho it can fail, then the user can help it using the Dependency Mapping wizard page.
				Also please note that if the library is not installed in the local repo, groupId will NOT be resolved, but will be assigned to <code>nonResolvedGroupId</code> and a key 
				will be added to project.properties to make use of Maven jar overriding facility.
				<br/><br/>
				<center>
					<img border="1px" src="images/dependency-mapping.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 6</b>Dependency Mapping Wizard Page</font>
				</center>
				<br/><br/>
				Mevenide provides support for Dependency properties through the Dependency Property dialog that can be attained by pressing the 'Properties' button.
				<br/><br/>
				<center>
					<img border="1px" src="images/dependency-properties.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 7</b>Dependency Properties Dialog</font>	
				</center>
				<br/><br/>		
				We use colors to help the user to manage inheritance. The legend should be self-explanatory.
					<ul>
					<li>Orange : represents an artifact declared in both parent and current POM (or Eclipse Project) </li>
					<li>Grey   : represents an artifact declared in parent (ReadOnly) </li>
					<li>Green  : represents an artifact already present in POM</li>
					<li>Black  : default</li>
					</ul>
            </p>
        	<p>
        		<br/><b><font size="+1">Eclipse Project Synchronization</font></b><br/><br/>
        		Eclipse Project Synchronization relies on maven-eclipse-plugin for now, so there are some known limitations (see MAVEN-525).
        		<br/><br/>
        		However it is planned to provide really integrated support, that will use the JDT API.
        	</p>
        </section>
        <section name="Maven Console">
        	<p>
        		Mevenide doesnot provide yet an integrated Maven Console, tho Maven Console can still be used thanks the Eclipse Debug Console.
        		<br/><br/>
        		<center>
	        		<img border="1px" src="images/maven-console.png"/>
    	    		<br/><br/>
        			<font size="-1"><b>Screenshot 8</b>Running Maven Console</font>				
        		</center>
        		<br/><br/>
        	</p>
        </section>
   </body>
</document>
