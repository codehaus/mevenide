<?xml version="1.0"?>

<!-- stylesheet to be used -->

<jsl:stylesheet select="$doc"
    xmlns:define="jelly:define"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:jsl="jelly:jsl"
    xmlns:log="jelly:log"
    xmlns:util="jelly:util"
    xmlns:x="jelly:xml"
    xmlns:doc="doc"
    xmlns="dummy" 
    trim="true">

  <jsl:template match="document" trim="true">
    <j:useBean var="navbean" class="org.apache.maven.NavBean"/>
    <j:set var="location" value="${outFile.substring(destdir.length())}"/>
    <util:replace var="location" oldChar="\" newChar="/" value="${location}"/>

    <!-- Stores location for publish date / version -->
    <j:set var="date">${maven.xdoc.date}</j:set>
    <j:setProperties object="${navbean}" document="${doc}" location="${location}"/>
	
    <x:doctype name="html" publicId="-//W3C//DTD XHTML 1.0 Transitional//EN" systemId="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
    <html>
      <head>

        <style type="text/css"><![CDATA[
          @import url("${relativePath}/style/maven-base.css");
        ]]></style>
        
        <j:set var="themeUrl" value="${maven.xdoc.theme.url}x"/>
        <j:if test="${themeUrl != 'x'}">
          <style type="text/css"><![CDATA[
            @import url("${maven.xdoc.theme.url}");
          ]]></style>
        </j:if>

        <j:if test="${themeUrl == 'x'}">
          <style type="text/css"><![CDATA[
            @import url("${relativePath}/style/maven-theme.css");
          ]]></style>
        </j:if>
        
        <util:file var="projectCssFile" name="${maven.docs.src}/style/project.css"/>
        <j:if test="${projectCssFile.exists()}">
          <style type="text/css"><![CDATA[
            @import url("${relativePath}/style/project.css");
          ]]></style>
        </j:if>

        <meta http-equiv="Content-Type" content="text/html; charset=${outputencoding}"/>
        <x:forEach var="author" select="./properties/author">
          <meta name="author" content="${author.text}"/>
          <meta name="email" content="${author.attribute('email').value}"/>
        </x:forEach>
        
        <jsl:applyTemplates select="$doc/document/head/*"/>
        
      </head>

      <x:element name="body"><j:whitespace trim="true">
        <x:attribute name="class">composite</x:attribute>
        <x:forEach var="attr" select="$doc/document/body/@*">
          <x:attribute name="${attr.name}">${attr.value}</x:attribute>
        </x:forEach>
        </j:whitespace>

        <div id="banner">
          <table border="0" cellspacing="0" cellpadding="8" width="100%">
            <tr>
              <!-- project logo and link -->
              <td align="left" width="150">
                
                <j:invoke var="_pos" method="length" on="${maven.docs.src}"/>
                <j:invoke var="_relFile" method="substring" on="${file.toString()}">
                  <j:arg type="int" value="${_pos + 1}"/>
                </j:invoke>
                <j:if test="${_relFile.equalsIgnoreCase('index.xml')}">
                  <!-- The logo shall only be included in the root (index.xml) -->
                  <j:set var="logo" value="${pom.logo}"/>
                  <j:if test="${logo != null and logo != ''}">
                    <!-- set image to relative or complete -->
                    <j:set var="image" value="${pom.logo}"/>
                    <j:if test="${!image.startsWith('http://')}">
                      <j:set var="image" value="${basedir}/${image}"/>
                    </j:if>

                    <!-- copy image into help -->
                    <ant:copy file="${image}" toDir="${maven.javahelp.gen}/images"/>
                    <util:replace var="image" oldChar="\" newChar="/" value="${image}"/>
                    <j:set var="_pos" value="${image.lastIndexOf('/')}"/>
                    <j:invoke var="image" method="substring" on="${image}">
                      <j:arg type="int" value="${_pos + 1}"/>
                    </j:invoke>
                    <j:set var="image" value="/images/${image}"/>
                    <a href="${pom.url}">
                      <img src="${image}" align="left" alt="${pom.name}" border="0"/>
                    </a>

                  </j:if>
                </j:if>
              </td>
              
              <!-- organization logo -->
              <td align="right" width="150">
                <j:set var="logo" value="${pom.organization.logo}"/>
                <j:if test="${!empty(logo)}">
                  <!-- set url to org or project url -->
                  <j:set var="url" value="${pom.organization.url}"/>
                  <j:if test="${!empty(url)}">
                    <j:set var="home" value="${pom.organization.url}"/>
                  </j:if>
                  <j:if test="${empty(url)}">
                    <j:set var="home" value="${pom.url}"/>
                  </j:if>
                  <!-- set image to relative or complete -->
                  <j:set var="image" value="${pom.organization.logo}"/>
                  <j:if test="${!image.startsWith('http://')}">
                    <j:set var="image" value="${relativePath}${image}"/>
                  </j:if>
                  <a href="${home}">
                    <img src="${image}" align="right" alt="${pom.organization.name}" border="0"/>
                  </a>
                </j:if>
              </td>

            </tr>
          </table>
        </div>

        <!-- Body of the page -->
        <table border="0" cellspacing="0" cellpadding="8" width="100%" id="layout">
          <tr valign="top">
            <td rowspan="2">
              <x:if select="$nav">
                <jsl:applyTemplates select="$nav/body/menu[@type='help']"/>
              </x:if>
              <div id="bodyColumn">
                <!-- Insert MAIN body here -->
                <div class="contentBox">
                  <!-- FIXME really shouldn't use $doc, but jelly loses it's context again -->
                  <jsl:applyTemplates select="$doc/document/body/section"/>
                  <jsl:applyTemplates select="$doc/document/body/glossary" />
                  <jsl:applyTemplates select="$doc/document/body/release" />
                  <jsl:applyTemplates select="$doc/document/body/changelog" />
                  <jsl:applyTemplates select="$doc/document/body/taskList" />
                  <jsl:applyTemplates select="$doc/document/body/goals" />
                  <jsl:applyTemplates select="$nav/body/search" />
                </div>
              </div>
            </td>
          </tr>
        </table>
        
        <div id="footer">
          <table style='width:100%' border="0" cellspacing="0" cellpadding="4">
            <jsl:applyTemplates select="$nav/body/footer"/>
            <tr>
              <td>
                <j:if test="${!empty(pom.organization.name)}">
                  <j:if test="${!empty(pom.inceptionYear)}">
                    <j:if test="${pom.inceptionYear == mavenCurrentYear}">
                      &#169; ${mavenCurrentYear}, ${pom.organization.name}
                    </j:if>
                    <j:if test="${pom.inceptionYear != mavenCurrentYear}">
                      &#169; ${pom.inceptionYear}-${mavenCurrentYear}, ${pom.organization.name}
                    </j:if>
                  </j:if>
                  <j:if test="${empty(pom.inceptionYear)}">
                    &#169; ${mavenCurrentYear}, ${pom.organization.name}
                  </j:if>
                </j:if>

                <j:if test="${date == 'bottom'}">
                  - Last published: ${build.date}
                </j:if>
              </td>
              <j:if test="${date == 'bottom-right'}">
                <td style='width: auto; text-align:right'>Last published: ${build.date}</td>
              </j:if>
            </tr>
          </table>
        </div>
        
      </x:element>
    </html>
  </jsl:template>

  <!-- process the properties of the doc -->
  <jsl:template match="properties" trim="false">
    <!-- stick head block here later -->
  </jsl:template>

  <!-- Process a menu for the navigation bar -->
  <jsl:template match="menu[@type='help']" trim="false">

    <!-- j:set var="docTitle"><x:expr select="./properties/title"/></j:set>
    <x:if select="$nav/title">
      <j:set var="hlpTitle"><x:expr select="$nav/title"/></j:set>
    </x:if>
    <x:if select="not($nav/title)">
      <j:set var="hlpTitle" value="${pom.name}"/>
    </x:if -->

    <j:if test="${empty(helpTocList)}">
      <j:scope>
        <x:set var="_name" select="string(@name)"/>

        <j:invokeStatic var="linebreak" className="java.lang.System" method="getProperty">
            <j:arg type="java.lang.String" value="line.separator"/>
        </j:invokeStatic>

        <util:replace var="helpTocRoot" value="${maven.javahelp.root}" oldChar="/" newChar="."/>

        <j:set var="helpMapMenu" encode="false" trim="false">
          <![CDATA[<mapID target="${helpTocRoot}" url="index.html"/>${linebreak}]]>
        </j:set>
        <j:set var="__dummy">
          <j:expr value="${helpMapList.add(helpMapMenu)}" trim="false"/>
        </j:set>

        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[${linebreak}<helpset version="2.0">${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  <title>${_name}<title/>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  <maps>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <homeID>${helpTocRoot}</homeID>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>

        <j:set var="__dummy">
          <j:expr value="${helpMapFile.toString()}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <mapref location="map.jhm"/>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  </maps>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>

        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  <view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <name>TOC</name>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <label>Contents</label>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <type>javax.help.TOCView</type>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <data>toc.xml</data>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  </view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>

        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  <view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <name>Index</name>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <label>Index</label>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <type>javax.help.IndexView</type>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <data>index.xml</data>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  </view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>

        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  <view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <name>Search</name>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <label>Search</label>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <type>javax.help.SearchView</type>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[    <data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch2</data>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[  </view>${linebreak}]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>
        <j:set var="helpSetMenu" encode="false" trim="false"><![CDATA[</helpset>]]></j:set>
        <j:set var="__dummy">
          <j:expr value="${helpSetList.add(helpSetMenu)}" trim="false"/>
        </j:set>

        <j:set var="__tocnode_1" encode="false" trim="true">
          <![CDATA[<toc version="2.0">${linebreak}  <tocitem text="]]>
        </j:set>
        <j:set var="__tocnode_2" encode="false" trim="true">
          <![CDATA[" target="${helpTocRoot}">]]>
        </j:set>
        <j:set var="__tocnode_3" encode="false" trim="true">
          <![CDATA[</tocitem>${linebreak}  </toc>]]>
        </j:set>
        <j:set var="__tocnode_v" encode="false">
          <jsl:applyTemplates select="item"/>
        </j:set>

        <j:set var="helpTocMenu" value="${linebreak}${linebreak}${__tocnode_1}${_name}${__tocnode_2}${linebreak}${__tocnode_v}${__tocnode_3}" encode="false" trim="false"/>
        <j:set var="__dummy">
          <j:expr value="${helpTocList.add(helpTocMenu)}" trim="false"/>
        </j:set>

      </j:scope>
    </j:if>
  </jsl:template>

  <jsl:template match="item" trim="true">
    <j:scope>
      <x:set var="item" select="."/>
      <x:set var="_name" select="string(@name)"/>
      <x:set var="_link" select="string(@href)"/>
      <x:set var="_img" select="string(@img)"/>
      <x:set var="_childCount" select="count(./item)"/>

      <j:set var="__link" value="${maven.javahelp.root}.${_link.substring(0, _link.lastIndexOf('.'))}"/>
      <util:replace var="_hlink" value="${__link}" oldChar="/" newChar="."/>

      <j:set var="helpMapMenu" encode="false" trim="false">
        <![CDATA[<mapID target="${_hlink}" url="${_link}"/>${linebreak}]]>
      </j:set>
      <j:set var="__dummy">
        <j:expr value="${helpMapList.add(helpMapMenu)}" trim="false"/>
      </j:set>

      <j:set var="__tocnode_1" encode="false" trim="true">
        <![CDATA[<tocitem text="]]>
      </j:set>
      <j:set var="__tocnode_2" encode="false" trim="true">
        <![CDATA[" target="${_hlink}">]]>
      </j:set>
      <j:set var="__tocnode_3" encode="false" trim="true">
        <![CDATA[</tocitem>]]>
      </j:set>
      <j:if test="${_childCount.intValue() gt 0}">
        <j:set var="__tocnode_v" encode="false" trim="true">
          <jsl:applyTemplates select="item"/>
        </j:set>
      </j:if>

      <j:set var="_ntocnode" value="${__tocnode_1}${_name}${__tocnode_2}${__tocnode_v}${__tocnode_3}" encode="false"/>
      ${_ntocnode}

    </j:scope>
  </jsl:template>


  <!-- Ignore the breadcrumb navbar -->
  <jsl:template match="links" trim="false">
  </jsl:template>

  <!-- Ignore Google site search for help files -->
  <jsl:template match="search" trim="false">
  </jsl:template>

  <!-- process a documentation section -->
  <jsl:template match="section" trim="false">
    <div class="section">
      <j:set var="_sectionName"><x:expr select="@name"/></j:set>
      <j:if test="${!empty(_sectionName)}">
        <div class="sectionTitle"><a name="${_sectionName}">${_sectionName}</a></div>
        <j:if test="${!helpIdxList.contains(_sectionName)}">

          <j:set var="dummy">
            <j:new var="_emptyTable" className="org.mevenide.javahelp.Indextable"/>
            <j:set var="_jhroot" value="${maven.javahelp.root}"/>
            <j:expr value="${_emptyTable.setPath(_jhroot, destdir, outFile, _sectionName)}"/>
            <j:expr value="${helpIdxList.put(_sectionName, _emptyTable)}"/>
            <j:set var="helpMapMenu" encode="false" trim="false">
              <![CDATA[<mapID target="${_emptyTable.getPathId()}" url="${_emptyTable.getPathUrl()}"/>]]>
            </j:set>
            <j:expr value="${helpMapList.add(helpMapMenu)}" trim="false"/>
          </j:set>
        </j:if>
      </j:if>
      <jsl:applyTemplates select="*"/>
    </div>
  </jsl:template>

  <jsl:template match="subsection" trim="false">
    <div class="subsection">
      <j:set var="_sectionName"><x:expr select="@name"/></j:set>
      <j:if test="${!empty(_sectionName)}">
        <div class="subsectionTitle"><a name="${_sectionName}">${_sectionName}</a></div>

        <x:set var="_parentList" select="ancestor::section[1]"/>

        <j:invoke var="_parentNode" method="get" on="${_parentList}">
          <j:arg type="int" value="0"/>
        </j:invoke>

        <j:invoke var="_parent" method="get" on="${helpIdxList}">
          <j:arg type="java.lang.Object" value="${_parentNode.attribute('name').getValue()}"/>
        </j:invoke>

        <j:if test="${_parent != null}">
          <!-- _parent is of type java.util.Hashtable -->
          <j:set var="dummy">
            <j:new var="_emptyTable" className="java.util.ArrayList"/>
            <j:expr value="${_parent.put(_sectionName, _emptyTable)}"/>
          </j:set>
        </j:if>

      </j:if>
      <jsl:applyTemplates select="*"/>
    </div>
  </jsl:template>

  <jsl:template match="subsubsection" trim="false">
    <div class="subsubsection">
      <j:set var="_sectionName"><x:expr select="@name"/></j:set>
      <j:if test="${!empty(_sectionName)}">
          <div class="subsubsectionTitle"><a name="${_sectionName}">${_sectionName}</a></div>

        <x:set var="_parentList" select="ancestor::section[1]"/>
        <j:invoke var="_parentNode" method="get" on="${_parentList}">
          <j:arg type="int" value="0"/>
        </j:invoke>
        <j:invoke var="_parent" method="get" on="${helpIdxList}">
          <j:arg type="java.lang.Object" value="${_parentNode.attribute('name').getValue()}"/>
        </j:invoke>

        <x:set var="_parentSubList" select="ancestor::subsection[1]"/>
        <j:invoke var="_parentSubNode" method="get" on="${_parentSubList}">
          <j:arg type="int" value="0"/>
        </j:invoke>
        <j:invoke var="_subParent" method="get" on="${_parent}">
          <j:arg type="java.lang.Object" value="${_parentSubNode.attribute('name').getValue()}"/>
        </j:invoke>

        <j:if test="${_subParent != null}">
          <!-- _subParent is of type java.util.ArrayList -->
          <j:set var="dummy">
            <j:expr value="${_subParent.add(_sectionName)}"/>
          </j:set>
        </j:if>
      </j:if>
      <jsl:applyTemplates select="*"/>
    </div>
  </jsl:template>

  <!-- process a guide-like navbar -->
  <jsl:template match="navbar" trim="false">
  	<x:set var="_prev" select="string(@prev)"/>
  	<x:set var="_toc" select="string(@toc)"/>
  	<x:set var="_next" select="string(@next)"/>
  	<div align="center" class="navbar">
  	<p>
  	[ 
  		<j:if test="${ ! empty(_prev) }"><a href="${_prev}">previous</a></j:if>
  		<j:if test="${ empty(_prev) }">previous</j:if>
  	|
  		<j:if test="${ ! empty(_toc)}"><a href="${_toc}">toc</a></j:if>
  		<j:if test="${ empty(_toc) }">toc</j:if>
  	|
  		<j:if test="${ ! empty(_next)}"><a href="${_next}">next</a></j:if>	
  		<j:if test="${ empty(_next)}">next</j:if> 
  	]</p>
  	</div>
  </jsl:template>
  
  <jsl:template match="source" trim="false">
    <div class="source">
      <pre><x:expr select="."/></pre>
    </div>
  </jsl:template>

  <jsl:template match="footer" trim="false">
    <tr>
      <td>
        <jsl:applyTemplates select="*"/>
      </td>
    </tr>
  </jsl:template>

  <jsl:template match="table" trim="false">
    <j:set var="rowcount" value="0"/>
<!--
    <table cellpadding="3" cellspacing="2" border="1" width="100%">
-->
    <table class="bodyTable">
      <jsl:applyTemplates select="*"/>
    </table>
  </jsl:template>

  <jsl:template match="tr" trim="false">
    <j:choose>
      <j:when test="${rowMode == 'a'}">
        <j:set var="rowMode" value="b"/>
      </j:when>
      <j:otherwise>
        <j:set var="rowMode" value="a"/>
      </j:otherwise>
    </j:choose>

    <!-- copy attributes FIXME: Shouldn't this only be colspan|rowspan? -->
    <x:element name="tr"><j:whitespace trim="true">
      <x:attribute name="class">${rowMode}</x:attribute>
      <x:forEach var="attr" select="@*">
        <x:attribute name="${attr.name}">${attr.value}</x:attribute>
      </x:forEach>
      <jsl:applyTemplates select="*"/>
</j:whitespace></x:element>
  </jsl:template>

  <!--************************-->
  <!-- glossary documentation -->
  <!--************************-->
  <jsl:template match="glossary" trim="false">
    <jsl:applyTemplates select="glossary-entries/glossary-entry" />
  </jsl:template>
      
  <jsl:template match="glossary-entry" trim="false">
    <strong><x:expr select="name" /></strong>
    <br/>
    <x:expr select="definition" />
    <p/>
  </jsl:template>

      <!--************************-->
      <!-- goals documentation    -->
      <!--************************-->
      <jsl:template match="goals" trim="false">
        <!-- reset row alternation -->
        <j:set var="rowMode" value="" />
        <div class="h3">
          <h3><a name="Goals">Goals</a></h3>
          <table>
            <tr width='100%'><th>Goal</th><th>Description</th></tr>
            <jsl:applyTemplates select="goal"/>
          </table>
        </div>
      </jsl:template>
      
      <!-- a goal -->
        <!-- FIXME: this is copied from tr - there must be a way of
             calling templates in jsl? -->
      <jsl:template match="goal" trim="false">
        <j:choose>
          <j:when test="${rowMode == 'a'}">
            <j:set var="rowMode" value="b"/>
          </j:when>
          <j:otherwise>
            <j:set var="rowMode" value="a"/>
          </j:otherwise>
        </j:choose>
        
        <x:element name="tr"><j:whitespace trim="true">
          <x:attribute name="class">${rowMode}</x:attribute>
          <j:set var="_goalName"><x:expr select="./name" /></j:set>
          <td width='20%'><a name="${_goalName}">${_goalName}</a></td>
          <td width='80%'><jsl:applyTemplates select="description" /></td>
</j:whitespace></x:element>
      </jsl:template>   
      
      <jsl:template match="description">
        <jsl:copy trim="false">
          <jsl:applyTemplates trim="false"/>
        </jsl:copy>
      </jsl:template>

      <!--************************-->
      <!-- changelog documentation-->
      <!--************************-->
      <jsl:template match="changelog" trim="false">
        <j:set var="rowMode" value="" />
        <table width="100%">
          <tr>
            <th>Date</th><th>Author</th><th>Files/Message</th>
          </tr>
          <jsl:applyTemplates select="changelog-entry" />
        </table>
      </jsl:template>

      <!-- transform a changelog entry -->
      <!-- FIXME: tr code copied from above -->
      <jsl:template match="changelog-entry" trim="false">
        <j:choose>
          <j:when test="${rowMode == 'a'}">
            <j:set var="rowMode" value="b"/>
          </j:when>
          <j:otherwise>
            <j:set var="rowMode" value="a"/>
          </j:otherwise>
        </j:choose>
        
        <x:element name="tr"><j:whitespace trim="true">
          <x:attribute name="class">${rowMode}</x:attribute>
          
          <td><x:expr select="date" /> <x:expr select="time" /></td>
          <td><x:expr select="author"/></td>
          <td><jsl:applyTemplates select="*" />
            <pre><x:expr select="msg"/></pre>
          </td>
</j:whitespace></x:element>
      </jsl:template>

      <jsl:template match="file">
        <j:set var="url">${pom.repository.url}<x:expr select="name"/></j:set>
        <j:set var="revUrl">${url}?<x:expr select="revision"/>&amp;content-type=text/vnd.viewcvs-markup</j:set>
        <a href="${url}"><x:expr select="name"/></a> - 
        <a href="${revUrl}">v<x:expr select="revision"/></a>
        <br/>
      </jsl:template>

  <!-- remove the space at the end of parsed "a" anchors -->
  <jsl:template match="a" trim="true">
    <j:set var="_sectionName"><x:expr select="@name"/></j:set>
    <j:if test="${!empty(_sectionName)}">
      <x:set var="_parentList" select="ancestor::section[1]"/>
      <j:invoke var="_parentNode" method="get" on="${_parentList}">
        <j:arg type="int" value="0"/>
      </j:invoke>
      <j:invoke var="_parent" method="get" on="${helpIdxList}">
        <j:arg type="java.lang.Object" value="${_parentNode.attribute('name').getValue()}"/>
      </j:invoke>

      <x:set var="_parentSubList" select="ancestor::subsection[1]"/>

      <j:choose>
        <j:when test="${!empty(_parentSubList)}">
          <j:invoke var="_parentSubNode" method="get" on="${_parentSubList}">
            <j:arg type="int" value="0"/>
          </j:invoke>
          <j:invoke var="_subParent" method="get" on="${_parent}">
            <j:arg type="java.lang.Object" value="${_parentSubNode.attribute('name').getValue()}"/>
          </j:invoke>

          <j:set var="dummy">
            <j:expr value="${_subParent.add(_sectionName)}"/>
          </j:set>
        </j:when>
        <j:otherwise>
          <!-- _parent is of type java.util.Hashtable -->
          <j:set var="dummy">
            <j:new var="_emptyTable" className="java.util.ArrayList"/>
            <j:expr value="${_parent.put(_sectionName, _emptyTable)}"/>
          </j:set>
        </j:otherwise>
      </j:choose>

    </j:if>
    <jsl:copy trim="true"><jsl:applyTemplates trim="true"/></jsl:copy>
  </jsl:template>
  
  <!-- copy any other elements through -->
  <jsl:template match="*" trim="false"><jsl:copy trim="false"><jsl:applyTemplates trim="false"/></jsl:copy></jsl:template>

   <!-- element values don't pass through as text -->
   <jsl:template match="@*"/>

   <!-- CDATA and text nodes pass-thru -->
   <jsl:template match="text()"><x:expr select="."/></jsl:template>

</jsl:stylesheet>
