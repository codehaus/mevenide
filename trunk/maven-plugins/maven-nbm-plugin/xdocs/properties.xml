<?xml version="1.0" encoding="UTF-8"?>

<document>
  <properties>
    <title>maven-nbm-plugin Properties</title>
    <author>Milos Kleint (ca206216@tiscali.cz)</author>
  </properties>
  <body>
    <section name="Basic Properties">
    	<div id="documentContent">
      <table>
        <tr>
          <th>Property</th>
          <th>Optional</th>
          <th>Description</th>
        </tr>
         <tr>
          <td>maven.nbm.manifest</td>
          <td><p>Optional.</p></td>
          <td>
            <p> File containing Netbeans-specific manifest entries. The plugin will automatically generate some of the entries:
            <source><![CDATA[
OpenIDE-Module-Implementation-Version: ${pom.currentVersion}
OpenIDE-Module: ${pom.package}
OpenIDE-Module-Specification-Version: normalized version of ${pom.currentVersion}
            
            ]]></source> 
            etc.etc.</p>
            <p>If you define any of the entries in your manifest file, it will override anything that gets automatically generated. </p>
          </td>
        </tr>
        <tr>
          <td>maven.nbm.autoload</td>
          <td><p>Optional. Default value is <code>false</code>. </p></td>
          <td>
            <p>Determines if the module is an autoload module or not.</p>
            <p>A module cannot be both eager and autoload.</p>
          </td>
        </tr>
        <tr>
          <td>maven.nbm.eager</td>
          <td><p>Optional. Default value is <code>false</code>.</p></td>
          <td>
            <p>Determines if the module is an eager module or not.</p>
            <p>A module cannot be both eager and autoload.</p>
          </td>
        </tr>
        <tr>
          <td>maven.nbm.requiresrestart</td>
          <td><p>Optional. Default value is <code>true</code>.</p></td>
          <td>
            <p>If true, the application will restart after installation of the module.</p>
          </td>
        </tr>
        <tr>
          <td>maven.nbm.license</td>
          <td><p>Optional. Default value is <code>${maven.license.licenseFile}</code>.</p></td>
          <td>
            <p>Location of the license file to be included with the nbm.</p>
          </td>
        </tr>
     </table>
     </div>
   </section>

    <section name="Dependency Properties">
    	<div id="documentContent">
      <table>
        <tr>
          <th>Property</th>
          <th>Optional</th>
          <th>Description</th>
        </tr>
         <tr>
          <td>netbeans.module.ext</td>
          <td><p>OPTIONAL. Allowed value <code>true</code></p> </td>
          <td>
            <p> A property of dependency in the POM, if set to <code>true</code>, the plugin
                will include the dependency jar in the <code>ext</code> subdirectory. Such a dependency will
                become part of the Netbeans module. Please note that if 2+ interdependant modules reference the same library, only one of them is allowed to add it to the Class-Path, 
                usually it's the module that the others depend on. So the property should be set only in one of the project files.</p>
                <p> For example:
                <source><![CDATA[
       <dependency>
           <groupId>forehead</groupId>
           <artifactId>forehead</artifactId>
           <version>1.0-beta-5</version>
           <url>http://forehead.werken.com/</url>
           <properties>
            	<netbeans.module.ext>true</netbeans.module.ext>
            </properties>
        </dependency>
                        ]]></source>
                </p>
            <p> In case you didn't define the Class-Path manifest attribute, it will be added for you automatically.</p>
          </td>
        </tr>
         <tr>
          <td>netbeans.module.dep</td>
          <td><p>OPTIONAL. Allowed values <code>loose, spec, impl</code> </p></td>
          <td>
            <p> If the property is set on the dependency, it is expected to be a Netbeans module dependency.
                When the project is built using the nbm:jar goal, it will build a <code>OpenIDE-Module-Module-Dependencies</code> manifest attribute. (again it will only be included in the jar, unless you define your own custom manifest attribute in the manifest file.
                containing dependecies with this property. These are expected to be present in the IDE when deploying.
                All of them should be Netbeans modules (not necessarily at build time, but definitely at runtime (installation).
                </p> 
             <p>For example:
                <source><![CDATA[
       <dependency>
           <groupId>forehead</groupId>
           <artifactId>forehead</artifactId>
           <version>1.0-beta-5</version>
           <url>http://forehead.werken.com/</url>
           <properties>
            	<netbeans.module.dep>spec</netbeans.module.dep>
            </properties>
        </dependency>
                        ]]></source>
                </p>
                <p>There are 3 allowed values: </p>
                <p> <code>loose</code> will create a dependency in the format <code>org.openide.execution</code> It's very loosely coupled and it just expects some version of the dependency module to be present and enabled.
                </p>
                <p> <code>spec</code> creates a dependency based on the specification number. It looks like this: <code>org.openide.execution > 1.0.1</code>
                The module will work with any subsequent version of the dependency module (unless that one breaks backward compatibility)
                </p>
                <p> <code>impl</code> creates a dependency based on the implementation number. It looks like this: <code>org.openide.execution = 1.0.1</code>
                It will require a specific version of the dependency module. Use only when you depend on a non-public feature or code that was changed in later versions or could be changed.
                </p>
                
          </td>
        </tr>
         <tr>
          <td>netbeans.lib.generate</td>
          <td><p>OPTIONAL. Allowed value <code>true</code> Actually makes sense only together with <code>netbeans.module.dep</code> on non-netbeans dependencies.</p></td>
          <td>
               <p> If the dependency is not a netbeans module and the <code>netbeans.module.dep</code> property is defined on it, 
               you might want teh plugin to generate a netbeans module for you. That is done by running the <code>nbm:create-library-artifacts</code> goal.
               The goal will attempt to guess all the important properties of the dependency and create an appropriate Netbeans module for it. 
               </p>
               <p> Gory details: That is done using the nbm plugin itself. We generate the projects files and put them in target/nbm/{name-of-dependency} folder.
               That's where you should be looking for the generated nbm as well.
               In case there are any problems with the generated stuff, or you want a more complicated module structure, you can customize it manually and copy to your source structures.
               </p>
          </td>
        </tr>
     </table>
     </div>
   </section>
      
   <section name="Temporary Properties">
   	<div id="documentContent">
     <table>
     	<tr>
          <th>Property</th>
          <th>Optional</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>maven.nbm.manifest.bundle.basedir</td>
          <td><p>Optional. Default value is <code>not defined</code>.
           If defined, then <code> maven.nbm.manifest.bundle.include </code> has to be defined as well. </p>
          </td>
          <td>
            <p>Base folder where the nbm specific resources are expected. 
             Currently is only used for including the Bundle.properties file 
             into that jar that contains localized manifest entries.</p>
          </td>
        </tr>
        <tr>
          <td>maven.nbm.manifest.bundle.include</td>
          <td><p>Optional. Default value is <code>not defined</code>.</p></td>
           If defined, then <code> maven.nbm.manifest.bundle.basedir </code> has to be defined as well.
          <td>
            <p>Relative path to the Bundle.properties file including the name of the file.. Eg. org/mevenide/Bundle.properties</p>
          </td>
        </tr>
     </table>
     </div>
   </section>
  </body>
</document>
