/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software licensed under
 *        Apache Software License (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Mevenide" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact mevenide-general-dev@lists.sourceforge.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Mevenide", nor may "Apache" or "Mevenide" appear in their name, without
 *    prior written permission of the Mevenide Team and the ASF.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */


package org.mevenide.ui.netbeans.creator;

import javax.swing.JPanel;
import org.apache.maven.project.Organization;
import org.apache.maven.project.Project;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class OrgPanel extends JPanel implements ProjectPanel
{
    
    private boolean propagate;
    private ProjectValidateObserver valObserver;
    
    /** Creates new form BasicsPanel */
    public OrgPanel(boolean propagateImmediately)
    {
        initComponents();
        propagate = propagateImmediately;
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(OrgPanel.class, "OrgPanel.name"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblURL = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        lblLogo = new javax.swing.JLabel();
        txtLogo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblSiteAddress = new javax.swing.JLabel();
        txtSiteAddress = new javax.swing.JTextField();
        lblSiteDir = new javax.swing.JLabel();
        txtSiteDir = new javax.swing.JTextField();
        lblDistAddress = new javax.swing.JLabel();
        txtDistAddress = new javax.swing.JTextField();
        lblDistDir = new javax.swing.JLabel();
        txtDistDir = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtName, gridBagConstraints);

        lblURL.setLabelFor(txtURL);
        lblURL.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblURL.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblURL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtURL, gridBagConstraints);

        lblLogo.setLabelFor(txtLogo);
        lblLogo.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblLogo.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jSeparator1, gridBagConstraints);

        lblSiteAddress.setLabelFor(txtSiteAddress);
        lblSiteAddress.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteAddress.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblSiteAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtSiteAddress, gridBagConstraints);

        lblSiteDir.setLabelFor(txtSiteDir);
        lblSiteDir.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteDir.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblSiteDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtSiteDir, gridBagConstraints);

        lblDistAddress.setLabelFor(txtDistAddress);
        lblDistAddress.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblDistAddress.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblDistAddress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtDistAddress, gridBagConstraints);

        lblDistDir.setLabelFor(txtDistDir);
        lblDistDir.setText(org.openide.util.NbBundle.getMessage(OrgPanel.class, "OrgPanel.lblSiteDist.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblDistDir, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(txtDistDir, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDistAddress;
    private javax.swing.JLabel lblDistDir;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSiteAddress;
    private javax.swing.JLabel lblSiteDir;
    private javax.swing.JLabel lblURL;
    private javax.swing.JTextField txtDistAddress;
    private javax.swing.JTextField txtDistDir;
    private javax.swing.JTextField txtLogo;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSiteAddress;
    private javax.swing.JTextField txtSiteDir;
    private javax.swing.JTextField txtURL;
    // End of variables declaration//GEN-END:variables
    
    public void setProject(Project project)
    {
        Organization org = project.getOrganization();
        if (org == null)
        {
            txtURL.setText("");
            txtName.setText("");
            txtLogo.setText("");
        } else
        {
            txtURL.setText(org.getUrl() == null ? "" : org.getUrl());
            txtName.setText(org.getName() == null ? "" : org.getName());
            txtLogo.setText(org.getLogo() == null ? "" : org.getUrl());
        }
        txtSiteAddress.setText(project.getSiteAddress() == null ? "" : project.getSiteAddress());
        txtSiteDir.setText(project.getSiteDirectory() == null ? "" : project.getSiteDirectory());
        txtDistDir.setText(project.getDistributionDirectory() == null ? "" : project.getDistributionDirectory());
        txtDistAddress.setText(project.getDistributionSite() == null ? "" : project.getDistributionSite());
    }
    
    public Project copyProject(Project project)
    {
        project.setSiteAddress(txtSiteAddress.getText());
        project.setSiteDirectory(txtSiteDir.getText());
        project.setDistributionSite(txtDistAddress.getText());
        project.setDistributionDirectory(txtDistDir.getText());
        // see if one of the org fields is defined ..
        int length = Math.max(
                    Math.max(txtLogo.getText().length(), txtURL.getText().length()),
                             txtName.getText().length());
        Organization org = null;
        if (length > 0)
        {
            if (project.getOrganization() == null)
            {
                org = new Organization();
                project.setOrganization(org);
            } else
            {
                org = project.getOrganization();
            }
            org.setLogo(txtLogo.getText());
            org.setName(txtName.getText());
            org.setUrl(txtURL.getText());
        } else
        {
            // no field defined..
            project.setOrganization(null);
        }
        return project;
    }
    
    public boolean isInValidState()
    {
        //TODO some checks..
        return true;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer)
    {
        valObserver = observer;
    }
    
    public String getValidityMessage()
    {
        return "";
    }
    
}
