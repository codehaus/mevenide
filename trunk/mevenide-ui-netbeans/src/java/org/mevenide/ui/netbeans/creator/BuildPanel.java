/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software licensed under
 *        Apache Software License (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Mevenide" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact mevenide-general-dev@lists.sourceforge.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Mevenide", nor may "Apache" or "Mevenide" appear in their name, without
 *    prior written permission of the Mevenide Team and the ASF.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */


package org.mevenide.ui.netbeans.creator;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.Build;
import org.apache.maven.project.Project;
import org.mevenide.project.ProjectConstants;
import org.mevenide.project.source.SourceDirectoryUtil;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class BuildPanel extends JPanel implements ProjectPanel
{
    private static Log logger = LogFactory.getLog(BuildPanel.class);
    
    private boolean propagate;
    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    
    /** Creates new form BuildPanel */
    public BuildPanel(boolean propagateImmediately)
    {
        initComponents();
        propagate = propagateImmediately;
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(BuildPanel.class, "BuildPanel.name"));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        lblSrc = new javax.swing.JLabel();
        txtSrc = new javax.swing.JTextField();
        lblTestSrc = new javax.swing.JLabel();
        txtTestSrc = new javax.swing.JTextField();
        lblAspectSrc = new javax.swing.JLabel();
        txtAspectSrc = new javax.swing.JTextField();
        lblIntTestSrc = new javax.swing.JLabel();
        txtIntTestSrc = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblSrc.setLabelFor(txtSrc);
        lblSrc.setText(org.openide.util.NbBundle.getMessage(BuildPanel.class, "BuildPanel.txtSrc.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblSrc, gridBagConstraints);

        txtSrc.setPreferredSize(new java.awt.Dimension(60, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtSrc, gridBagConstraints);

        lblTestSrc.setLabelFor(txtTestSrc);
        lblTestSrc.setText(org.openide.util.NbBundle.getMessage(BuildPanel.class, "BuildPanel.txtTestSrc.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblTestSrc, gridBagConstraints);

        txtTestSrc.setPreferredSize(new java.awt.Dimension(60, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtTestSrc, gridBagConstraints);

        lblAspectSrc.setLabelFor(txtAspectSrc);
        lblAspectSrc.setText(org.openide.util.NbBundle.getMessage(BuildPanel.class, "BuildPanel.txtAspectSrc.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblAspectSrc, gridBagConstraints);

        txtAspectSrc.setPreferredSize(new java.awt.Dimension(60, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(txtAspectSrc, gridBagConstraints);

        lblIntTestSrc.setLabelFor(txtIntTestSrc);
        lblIntTestSrc.setText(org.openide.util.NbBundle.getMessage(BuildPanel.class, "BuildPanel.txtIntTestSrc.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblIntTestSrc, gridBagConstraints);

        txtIntTestSrc.setPreferredSize(new java.awt.Dimension(60, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(txtIntTestSrc, gridBagConstraints);

    }//GEN-END:initComponents

    public Project copyProject(Project project)
    {
        SourceDirectoryUtil.addSource(project, txtSrc.getText().trim(), ProjectConstants.MAVEN_SRC_DIRECTORY);
        SourceDirectoryUtil.addSource(project, txtTestSrc.getText().trim(), ProjectConstants.MAVEN_TEST_DIRECTORY);
        SourceDirectoryUtil.addSource(project, txtIntTestSrc.getText().trim(), ProjectConstants.MAVEN_INTEGRATION_TEST_DIRECTORY);
        SourceDirectoryUtil.addSource(project, txtAspectSrc.getText().trim(), ProjectConstants.MAVEN_ASPECT_DIRECTORY);
        return project;
    }    
    
    public void setProject(Project project)
    {
        Build build = project.getBuild();
        if (build == null)
        {
            txtSrc.setText("src/java"); //NOI18N
            txtTestSrc.setText("src/test/java"); //NOI18N
            txtAspectSrc.setText(""); //NOI18N 
            txtIntTestSrc.setText(""); //NOI18N
        } else
        {
            txtSrc.setText(build.getSourceDirectory() == null ? "src/java" : build.getSourceDirectory());
            txtTestSrc.setText(build.getUnitTestSourceDirectory() == null ? "src/test/java" 
                             : build.getUnitTestSourceDirectory());
            txtAspectSrc.setText(build.getAspectSourceDirectory() == null ? "" 
                               : build.getAspectSourceDirectory());
            txtIntTestSrc.setText(build.getIntegrationUnitTestSourceDirectory() == null ? "" 
                                : build.getIntegrationUnitTestSourceDirectory());
        }
        
    }
    
    
    public void setValidateObserver(ProjectValidateObserver observer)
    {
        valObserver = observer;
        if (listener == null)
        {
            listener = new ValidateListener();
            txtSrc.getDocument().addDocumentListener(listener);
        }
    }
    
    private void doValidate()
    {
        logger.debug("Listener called");
        ProjectValidateObserver obs = valObserver;
        if (obs != null)
        {
            obs.resetValidState(isInValidState(), getValidityMessage());
        }
    }
    
    private int doValidateCheck()
    {
        if (txtSrc.getText().trim().length() == 0)
        {
            return 1;
        }
        return 0;
    }
    
    public boolean isInValidState()
    {
        return doValidateCheck() == 0;
    }
    
    public String getValidityMessage()
    {
        int retCode = doValidateCheck();
        String message = "";
        if (retCode == 1)
        {
            message = NbBundle.getMessage(BuildPanel.class, "BuildPanel.error1.text");
        }
        return message;        
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAspectSrc;
    private javax.swing.JLabel lblIntTestSrc;
    private javax.swing.JLabel lblSrc;
    private javax.swing.JLabel lblTestSrc;
    private javax.swing.JTextField txtAspectSrc;
    private javax.swing.JTextField txtIntTestSrc;
    private javax.swing.JTextField txtSrc;
    private javax.swing.JTextField txtTestSrc;
    // End of variables declaration//GEN-END:variables

        /**
     * attach to the fields that are validated.
     */
    private class ValidateListener implements DocumentListener
    {
        public void changedUpdate(DocumentEvent e)
        {
            doValidate();
        }
        
        public void insertUpdate(DocumentEvent e)
        {
            doValidate();
        }
        
        public void removeUpdate(DocumentEvent e)
        {
            doValidate();
        }
    }

}
