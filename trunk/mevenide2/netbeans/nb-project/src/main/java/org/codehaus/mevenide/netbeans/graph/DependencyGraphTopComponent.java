/* ==========================================================================
 * Copyright 2005-2006 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.codehaus.mevenide.netbeans.graph;

import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import org.codehaus.mevenide.netbeans.NbMavenProject;
import org.codehaus.plexus.util.StringOutputStream;
import org.netbeans.graph.api.GraphFactory;
import org.netbeans.graph.api.control.builtin.DefaultViewController;
import org.netbeans.graph.api.model.IGraphNode;
import org.netbeans.graph.api.model.builtin.GraphDocument;
import org.netbeans.graph.vmd.VMDSerializer;
import org.openide.filesystems.FileObject;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.xml.XMLUtil;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * component showing graph of dependencies for a pom project.
 * @author Milos Kleint (mkleint@codehaus.org)
 */
public class DependencyGraphTopComponent extends TopComponent {
    public static final String ATTRIBUTE_DEPENDENCIES_LAYOUT = "MavenProjectDependenciesLayout"; //NOI18N
    
    private NbMavenProject project;
    private JComponent view = null;
    private DefaultViewController controller;
    private MyGraphEventHandler handler;
    private float zoom = 1;
    
    /** Creates new form ModulesGraphTopComponent */
    public DependencyGraphTopComponent(NbMavenProject proj) {
        initComponents();
        project = proj;
        setName("DependencyGraph" + proj.getName());
        setDisplayName("Dependencies - " + proj.getDisplayName());
    }
    
    
    
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    protected void componentOpened() {
        super.componentOpened();
        controller = new DefaultViewController();
        GraphDocument doc = GraphDocumentFactory.createDependencyDocument(project);
        handler = new MyGraphEventHandler(doc);
        view = GraphFactory.createView(doc,
                new DependencyDocumentRenderer("Transitive Dependencies for " + project.getDisplayName(), controller.getHelper()),
                controller,
                handler);
        GraphFactory.layoutNodes(view);
        loadDocument();
        
        JScrollPane pane = new JScrollPane();
        pane.setViewportView(view);
        add(pane, BorderLayout.CENTER);
        IGraphNode[] nds = controller.getHelper().getNodes();
        IGraphNode rootNode = null;
        for (int i = 0; i < nds.length; i++) {
            DependencyGraphNodeLayouter.IRootDistance dist = (DependencyGraphNodeLayouter.IRootDistance) nds[i].getLookup().lookup(DependencyGraphNodeLayouter.IRootDistance.class);
            if (dist.getDistanceFromRoot() == 0) {
                rootNode = nds[i];
                break;
            }
        }
        if (rootNode != null) {
            Point point = controller.getHelper().getNodeLocation(rootNode);
            Rectangle rect = new Rectangle(Math.max(0, point.x - 200), Math.max(0, point.y - 200), 400, 400);
            pane.getViewport().scrollRectToVisible(rect);
        }

        
        revalidate();
        repaint();
        
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        btnBigger = new javax.swing.JButton();
        btnSmaller = new javax.swing.JButton();
        btnSnap = new javax.swing.JToggleButton();
        btnSaveLayout = new javax.swing.JButton();
        cbSelection = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnBigger.setIcon(new ImageIcon(Utilities.loadImage("org/codehaus/mevenide/netbeans/graph/zoomin.gif")));
        btnBigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBiggerActionPerformed(evt);
            }
        });

        jPanel1.add(btnBigger);

        btnSmaller.setIcon(new ImageIcon(Utilities.loadImage("org/codehaus/mevenide/netbeans/graph/zoomout.gif")));
        btnSmaller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmallerActionPerformed(evt);
            }
        });

        jPanel1.add(btnSmaller);

        btnSnap.setIcon(new ImageIcon(Utilities.loadImage("org/codehaus/mevenide/netbeans/graph/snap-to-grid.png")));
        btnSnap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnSnapStateChanged(evt);
            }
        });

        jPanel1.add(btnSnap);

        btnSaveLayout.setText("Save layout");
        btnSaveLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveLayoutActionPerformed(evt);
            }
        });

        jPanel1.add(btnSaveLayout);

        cbSelection.setSelected(true);
        cbSelection.setText("Select With Direct Deps");
        cbSelection.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbSelection.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbSelection.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbSelectionStateChanged(evt);
            }
        });

        jPanel1.add(cbSelection);

        add(jPanel1, java.awt.BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents

    private void btnSnapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnSnapStateChanged
        GraphFactory.setSnapToGrid(view, btnSnap.isSelected());
    }//GEN-LAST:event_btnSnapStateChanged

    private void cbSelectionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbSelectionStateChanged
        handler.setMultiSelect(cbSelection.isSelected());
    }//GEN-LAST:event_cbSelectionStateChanged

    private void btnSaveLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveLayoutActionPerformed
        Document doc = XMLUtil.createDocument("moduleLayout", null, null, null);
        VMDSerializer ser = new VMDSerializer();
        ser.createStructure(controller.getHelper());
        Node nd = ser.saveStructure(doc, "layout");
        doc.getDocumentElement().appendChild(nd);
        FileObject fo = project.getProjectDirectory();
        StringOutputStream str = new StringOutputStream();
        try {
            XMLUtil.write(doc, str, "UTF-8");
            str.close();
            fo.setAttribute(ATTRIBUTE_DEPENDENCIES_LAYOUT, str.toString());
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (str != null) {
                try {
                str.close();
                } catch (IOException exc) {
                    
                }
            }
        }
    }//GEN-LAST:event_btnSaveLayoutActionPerformed
    
    private void btnSmallerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmallerActionPerformed
        zoom = zoom * (float)0.75;
        GraphFactory.setZoom(view, zoom);
    }//GEN-LAST:event_btnSmallerActionPerformed
    
    private void btnBiggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBiggerActionPerformed
        zoom = zoom * (float)1.5;
        GraphFactory.setZoom(view, zoom);
// TODO add your handling code here:
    }//GEN-LAST:event_btnBiggerActionPerformed

    private void loadDocument() {
        VMDSerializer ser = new VMDSerializer();
        FileObject fo = project.getProjectDirectory();
        String attrVal = (String)fo.getAttribute(ATTRIBUTE_DEPENDENCIES_LAYOUT);
        if (attrVal != null) {
            try {
            Reader str = new StringReader(attrVal);
            Document doc = XMLUtil.parse(new InputSource(str),false, false, null, null);
            Node nd = doc.getDocumentElement().getFirstChild();
            while (nd != null && !(nd instanceof Element)) {
                nd = nd.getNextSibling();
            }
            if (nd == null) {
                System.out.println("errror...");
            } else {
                ser.loadStructure(nd);
                ser.useStructure(controller.getHelper());
            }
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (SAXException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBigger;
    private javax.swing.JButton btnSaveLayout;
    private javax.swing.JButton btnSmaller;
    private javax.swing.JToggleButton btnSnap;
    private javax.swing.JCheckBox cbSelection;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
