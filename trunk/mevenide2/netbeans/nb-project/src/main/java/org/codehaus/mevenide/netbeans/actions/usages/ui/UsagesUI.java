/*
 * UsagesUI.java
 *
 * Created on December 26, 2007, 11:25 AM
 */
package org.codehaus.mevenide.netbeans.actions.usages.ui;

import java.awt.Image;
import java.util.ArrayList;
import java.util.List;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.project.MavenProject;
import org.codehaus.mevenide.netbeans.NbMavenProject;
import org.codehaus.mevenide.netbeans.nodes.NodeUtils;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectInformation;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.ui.OpenProjects;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;

/**
 *
 * @author Anuradha G (theanuradha-at-netbeans.org)
 */
public class UsagesUI extends javax.swing.JPanel implements ExplorerManager.Provider {

    static final int TYPE_DEPENDENCY = 0;
    static final int TYPE_COMPILE = 1;
    static final int TYPE_TEST = 2;
    static final int TYPE_RUNTIME = 3;
    private ExplorerManager explorerManager = new ExplorerManager();

    /** Creates new form UsagesUI */
    public UsagesUI(String libDef, final Artifact artifact) {
        initComponents();
        lblDescription.setText(NbBundle.getMessage(UsagesUI.class, "LBL_Description", libDef));//NOI18N


        Children children = new Children.Keys<Integer>() {

            @Override
            protected Node[] createNodes(Integer type) {
                final List<NbMavenProject> openProjects = getOpenProjects(artifact, type);
                Children children = new Children.Keys<NbMavenProject>() {

                    @Override
                    protected Node[] createNodes(NbMavenProject nmp) {
                        return new Node[]{new OpenProjectNode(nmp)};
                    }

                    @Override
                    protected void addNotify() {
                        super.addNotify();
                        setKeys(openProjects);
                    }
                };
                AbstractNode node = new AbstractNode(children) {

                    @Override
                    public String getHtmlDisplayName() {
                        return getDisplayName();
                    }
                    
                    @Override
                    public Image getIcon(int arg0) {
                        return NodeUtils.getTreeFolderIcon(false);
                    }

                    @Override
                    public Image getOpenedIcon(int arg0) {
                        return NodeUtils.getTreeFolderIcon(true);
                    }
                };
                switch (type) {
                    case TYPE_DEPENDENCY:
                         {
                            node.setDisplayName(NbBundle.getMessage(UsagesUI.class, "LBL_Dependancy"));//NOI18N
                        }
                        break;
                    case TYPE_COMPILE:
                         {
                            node.setDisplayName(NbBundle.getMessage(UsagesUI.class, "LBL_TYPE_COMPILE"));//NOI18N
                        }
                        break;
                    case TYPE_TEST:
                         {
                            node.setDisplayName(NbBundle.getMessage(UsagesUI.class, "LBL_TYPE_TEST"));//NOI18N
                        }
                        break;
                    case TYPE_RUNTIME:
                         {
                            node.setDisplayName(NbBundle.getMessage(UsagesUI.class, "LBL_TYPE_RUNTIME"));//NOI18N
                        }
                        break;
                }
                return new Node[]{node};
            }

            @Override
            protected void addNotify() {
                super.addNotify();
                setKeys(new Integer[]{TYPE_DEPENDENCY,TYPE_COMPILE, TYPE_TEST, TYPE_RUNTIME});
            }
        };

        AbstractNode openProjectsNode = new AbstractNode(children);
        explorerManager.setRootContext(openProjectsNode);
        final BeanTreeView beanTreeView = (BeanTreeView) jScrollPane1;
        beanTreeView.setPopupAllowed(false);
        beanTreeView.setRootVisible(false);
        RequestProcessor.getDefault().post(new Runnable() {

            public void run() {
                beanTreeView.expandAll();
            }
        }, 300);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();
        lblDescription = new javax.swing.JLabel();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground")));

        lblDescription.setText("null");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblDescription)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    // End of variables declaration//GEN-END:variables
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public List<NbMavenProject> getOpenProjects(Artifact artifact, int type) {
        List<NbMavenProject> mavenProjects = new ArrayList<NbMavenProject>();
        //get all open projects
        Project[] prjs = OpenProjects.getDefault().getOpenProjects();

        for (Project project : prjs) {
            //varify is this a maven project 
            NbMavenProject mavProj = project.getLookup().lookup(NbMavenProject.class);
            if (mavProj != null) {
              
                MavenProject mp = mavProj.getOriginalMavenProject();
                List artifacts = new ArrayList();
                switch (type) {
                    case TYPE_DEPENDENCY:
                         {
                            artifacts.addAll(mp.getDependencyArtifacts());
                        }
                        break;
                    case TYPE_COMPILE:
                         {
                            artifacts.addAll(mp.getCompileArtifacts());
                        }
                        break;
                    case TYPE_TEST:
                         {
                            artifacts.addAll(mp.getTestArtifacts());
                            artifacts.removeAll(mp.getCompileArtifacts());
                        }
                        break;
                    case TYPE_RUNTIME:
                         {
                            artifacts.addAll(mp.getRuntimeArtifacts());
                            artifacts.removeAll(mp.getCompileArtifacts());
                        }
                        break;
                }

                for (Object o : artifacts) {
                    Artifact d = (Artifact) o;
                    if (d.getGroupId().equals(artifact.getGroupId()) && d.getArtifactId().equals(artifact.getArtifactId()) && d.getVersion().equals(artifact.getVersion())) {

                        mavenProjects.add(mavProj);
                        break;
                    }
                }
              }


            
        }

        return mavenProjects;

    }

    public static class OpenProjectNode extends AbstractNode {

        private NbMavenProject project;
        private ProjectInformation pi;

        public OpenProjectNode(NbMavenProject project) {
            super(Children.LEAF);
            this.project = project;
            pi = ProjectUtils.getInformation(project);
        }

        @Override
        public Image getIcon(int arg0) {
            return Utilities.icon2Image(pi.getIcon());
        }

        @Override
        public String getDisplayName() {
            return pi.getDisplayName();
        }
    }
}
