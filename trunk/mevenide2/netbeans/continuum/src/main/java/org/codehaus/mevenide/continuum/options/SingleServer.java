/* ==========================================================================
 * Copyright 2005 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.codehaus.mevenide.continuum.options;

import java.awt.Dimension;
import java.net.MalformedURLException;
import java.net.URL;

/**
 *
 * @author Milos Kleint (mkleint@codehaus.org)
 */
public class SingleServer extends javax.swing.JPanel {
    
    /** Creates new form SingleServer */
    public SingleServer() {
        initComponents();
        setPreferredSize(new Dimension(350, 200));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblServer = new javax.swing.JLabel();
        txtServer = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        lblPort2 = new javax.swing.JLabel();
        txtPort2 = new javax.swing.JTextField();

        lblServer.setLabelFor(txtServer);
        lblServer.setText("Server hostname :");

        lblPort.setLabelFor(txtPort);
        lblPort.setText("XML-RPC port :");

        txtPort.setText("8000");
        txtPort.setMinimumSize(new java.awt.Dimension(30, 19));
        txtPort.setPreferredSize(new java.awt.Dimension(40, 19));

        lblPort2.setLabelFor(txtPort2);
        lblPort2.setText("Http port :");

        txtPort2.setText("8080");
        txtPort2.setMinimumSize(new java.awt.Dimension(30, 19));
        txtPort2.setPreferredSize(new java.awt.Dimension(40, 19));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblServer)
                    .add(lblPort)
                    .add(lblPort2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtPort2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtServer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblServer)
                    .add(txtServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblPort)
                    .add(txtPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblPort2)
                    .add(txtPort2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPort2;
    private javax.swing.JLabel lblServer;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtPort2;
    private javax.swing.JTextField txtServer;
    // End of variables declaration//GEN-END:variables
    
    
    public String getURL() {
        return "http://" + txtServer.getText().trim() + (txtPort.getText().trim().length() > 0 ? (":" + txtPort.getText().trim()) : "");
    }
    
    public String getOutputURL() {
        return "http://" + txtServer.getText().trim() + (txtPort2.getText().trim().length() > 0 ? (":" + txtPort2.getText().trim()) : "") + "/continuum/servlet/browse";
    }
    
    public void setValues(String url, String output) {
        try {
            URL u1 = new URL(url);
            URL u2 = new URL(output);
            txtServer.setText(u1.getHost());
            txtPort.setText("" + u1.getPort());
            txtPort2.setText("" + u2.getPort());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
    }
}
