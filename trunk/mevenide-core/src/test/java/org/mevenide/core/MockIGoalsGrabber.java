/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2003 Gilles Dodinet (rhill@wanadoo.fr).  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software licensed under 
 *        Apache Software License (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" and
 *    "Mevenide" must not be used to endorse or promote products
 *    derived from this software without prior written permission. For
 *    written permission, please contact mevenide-general-dev@lists.sourceforge.net.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    "Mevenide", nor may "Apache" or "Mevenide" appear in their name, without
 *    prior written permission of the Mevenide Team and the ASF.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.mevenide.core;

/**
 * 
 * generated by MockCreator (http://www.abstrakt.de/mockcreator.html)
 * 
 * @author Gilles Dodinet (gdodinet@wanadoo.fr)
 * @version $Id: MockIGoalsGrabber.java 20 avr. 2003 21:03:4513:34:35 Exp gdodinet 
 * 
 */
public class MockIGoalsGrabber extends de.abstrakt.mock.MockObject implements org.mevenide.IGoalsGrabber
{
	private java.lang.Object	_createMavenXmlFileDummyValue;
	private java.lang.Boolean	_createMavenXmlFileExpectFlag;
	private java.lang.Object	_getDescriptionDummyValue;
	private java.lang.Boolean	_getDescriptionExpectFlag;
	private java.lang.Object	_getGoalsDummyValue;
	private java.lang.Boolean	_getGoalsExpectFlag;
	private java.lang.Object	_getPluginsDummyValue;
	private java.lang.Boolean	_getPluginsExpectFlag;
	private java.lang.Object	_loadDummyValue;
	private java.lang.Boolean	_loadExpectFlag;
	private java.lang.Object	_load_StringDummyValue;
	private java.lang.Boolean	_load_StringExpectFlag;

	public java.lang.String getDescription( java.lang.String plugin, java.lang.String goal )
	{
		Object returnValue = null;
		if( _getDescriptionExpectFlag != null && _getDescriptionExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "getDescription", plugin, goal } );
		}
		else
		{
			returnValue = _getDescriptionDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
		return (java.lang.String)returnValue;
	}

	public java.util.Collection getGoals( java.lang.String plugin )
	{
		Object returnValue = null;
		if( _getGoalsExpectFlag != null && _getGoalsExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "getGoals", plugin } );
		}
		else
		{
			returnValue = _getGoalsDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
		return (java.util.Collection)returnValue;
	}

	public java.util.Collection getPlugins()
	{
		Object returnValue = null;
		if( _getPluginsExpectFlag != null && _getPluginsExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "getPlugins" } );
		}
		else
		{
			returnValue = _getPluginsDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
		return (java.util.Collection)returnValue;
	}

	public void createMavenXmlFile( java.lang.String effectiveDirectory, java.lang.String output )
	{
		Object returnValue = null;
		if( _createMavenXmlFileExpectFlag != null && _createMavenXmlFileExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "createMavenXmlFile", effectiveDirectory, output } );
		}
		else
		{
			returnValue = _createMavenXmlFileDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void expectCreateMavenXmlFile( java.lang.String effectiveDirectory, java.lang.String output )
	{
		_createMavenXmlFileExpectFlag = checkDummy( _createMavenXmlFileExpectFlag, true );
		addExpectedMethodCall( new Object[] { "createMavenXmlFile", effectiveDirectory, output } );
	}

	public void expectCreateMavenXmlFile( java.lang.String effectiveDirectory, java.lang.String output, Throwable throwable )
	{
		_createMavenXmlFileExpectFlag = checkDummy( _createMavenXmlFileExpectFlag, true );
		addExpectedMethodCall( new Object[] { "createMavenXmlFile", effectiveDirectory, output }, throwable );
	}

	public void expectGetDescription( java.lang.String plugin, java.lang.String goal, Throwable throwable )
	{
		_getDescriptionExpectFlag = checkDummy( _getDescriptionExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getDescription", plugin, goal }, throwable );
	}

	public void expectGetDescription( java.lang.String plugin, java.lang.String goal, java.lang.String returnValue )
	{
		_getDescriptionExpectFlag = checkDummy( _getDescriptionExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getDescription", plugin, goal }, returnValue );
	}

	public void expectGetGoals( java.lang.String plugin, Throwable throwable )
	{
		_getGoalsExpectFlag = checkDummy( _getGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getGoals", plugin }, throwable );
	}

	public void expectGetGoals( java.lang.String plugin, java.util.Collection returnValue )
	{
		_getGoalsExpectFlag = checkDummy( _getGoalsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getGoals", plugin }, returnValue );
	}

	public void expectGetPlugins( Throwable throwable )
	{
		_getPluginsExpectFlag = checkDummy( _getPluginsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getPlugins" }, throwable );
	}

	public void expectGetPlugins( java.util.Collection returnValue )
	{
		_getPluginsExpectFlag = checkDummy( _getPluginsExpectFlag, true );
		addExpectedMethodCall( new Object[] { "getPlugins" }, returnValue );
	}

	public void expectLoad( Throwable throwable )
	{
		_loadExpectFlag = checkDummy( _loadExpectFlag, true );
		addExpectedMethodCall( new Object[] { "load" }, throwable );
	}

	public void expectLoad( java.lang.String xmlGoals )
	{
		_load_StringExpectFlag = checkDummy( _load_StringExpectFlag, true );
		addExpectedMethodCall( new Object[] { "load", xmlGoals } );
	}

	public void expectLoad( java.lang.String xmlGoals, Throwable throwable )
	{
		_load_StringExpectFlag = checkDummy( _load_StringExpectFlag, true );
		addExpectedMethodCall( new Object[] { "load", xmlGoals }, throwable );
	}

	public void expectLoad()
	{
		_loadExpectFlag = checkDummy( _loadExpectFlag, true );
		addExpectedMethodCall( new Object[] { "load" } );
	}

	public void load( java.lang.String xmlGoals )
	{
		Object returnValue = null;
		if( _load_StringExpectFlag != null && _load_StringExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "load", xmlGoals } );
		}
		else
		{
			returnValue = _load_StringDummyValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void load() throws java.lang.Exception
	{
		Object returnValue = null;
		if( _loadExpectFlag != null && _loadExpectFlag.booleanValue() )
		{
			returnValue = addActualManyToExpectationList( new Object[] { "load" } );
		}
		else
		{
			returnValue = _loadDummyValue;
		}
		if( returnValue instanceof java.lang.Exception )
		{
			throw (java.lang.Exception)returnValue;
		}
		if( returnValue instanceof RuntimeException )
		{
			throw (RuntimeException)returnValue;
		}
		if( returnValue instanceof Error )
		{
			throw (Error)returnValue;
		}
	}

	public void setCreateMavenXmlFileDummy( Throwable throwable )
	{
		_createMavenXmlFileExpectFlag = checkDummy( _createMavenXmlFileExpectFlag, false );
		_createMavenXmlFileDummyValue = throwable;
	}

	public void setGetDescriptionDummy( Throwable throwable )
	{
		_getDescriptionExpectFlag = checkDummy( _getDescriptionExpectFlag, false );
		_getDescriptionDummyValue = throwable;
	}

	public void setGetDescriptionDummy( java.lang.String returnValue )
	{
		_getDescriptionExpectFlag = checkDummy( _getDescriptionExpectFlag, false );
		_getDescriptionDummyValue = returnValue;
	}

	public void setGetGoalsDummy( Throwable throwable )
	{
		_getGoalsExpectFlag = checkDummy( _getGoalsExpectFlag, false );
		_getGoalsDummyValue = throwable;
	}

	public void setGetGoalsDummy( java.util.Collection returnValue )
	{
		_getGoalsExpectFlag = checkDummy( _getGoalsExpectFlag, false );
		_getGoalsDummyValue = returnValue;
	}

	public void setGetPluginsDummy( Throwable throwable )
	{
		_getPluginsExpectFlag = checkDummy( _getPluginsExpectFlag, false );
		_getPluginsDummyValue = throwable;
	}

	public void setGetPluginsDummy( java.util.Collection returnValue )
	{
		_getPluginsExpectFlag = checkDummy( _getPluginsExpectFlag, false );
		_getPluginsDummyValue = returnValue;
	}

	public void setLoadDummy( Throwable throwable )
	{
		_loadExpectFlag = checkDummy( _loadExpectFlag, false );
		_loadDummyValue = throwable;
	}

	public void setLoad_StringDummy( Throwable throwable )
	{
		_load_StringExpectFlag = checkDummy( _load_StringExpectFlag, false );
		_load_StringDummyValue = throwable;
	}
}