
1. declare an artifact as "pde-enabled"
  
   an artifact is declared as an eclipse artifact by the way of a _pom_ 
   property :
   
   <project>
     ...
     <properties>
       <maven.pde.enabled>true</maven.pde.enabled>
       <maven.pde.type>(plugin)|feature|site</maven.pde.type>
     </properties>
   </project>
   
   additionally, if running multiproject maven.multiproject.type 
   must be set to 'pde' to allow effective callbacks.
   
2. dependencies duplication issue
   
   to solve the dependencies duplication issue (plugin.xml vs. project.xml)
   pde:classpath goal has to run as a preGoal of java:compile
   
   <preGoal name="build:start">
     <pde:classpath />
   </preGal>
   
   it parses plugin.xml and extracts <requires> information and add required 
   plugin to classpath, making them available to compilation process
   
   on the other hand non eclipse dependencies are still declared in the pom
   
   TODO: * manage single jar'd plugins
         * manage MANIFEST if present
         * collect non existent declared plugins & compare them to 
           dependencies-as-requires, to emit a warning if intersection not empty  
         * refine classpath with bundled classes (dependencies which define maven.pde.requires=true)  
         
3. plugin.xml update
   
   pde:plugin goal has a prereqs on jar:jar
   
   if an artifact is declared as pde-enabled, pde:plugin goal extracts 
   -relevant- information from the pom and update plugin.xml:
   by default dependencies declared in the pom are added as runtime/library 
   element and are copied into default lib folder
     
     * they may be excluded thanks the maven.pde.exclude property
     * lib folder can be parametrized through the maven.pde.targetPath 
       property
     * package element can be  specified through the maven.pde.package property
     * they may be rendered as requires/plugin entry by setting the 
       maven.pde.requires property 
     * in such a case <jar> must be used.   
     
     <dependency>
       ...
       <properties>
	     <maven.pde.targetPath>anotherLibFolder</maven.pde.targetPath>
         <maven.pde.exclude>(true)|false</maven.pde.exclude>
         <maven.pde.requires>(true)|false</maven.pde.requires>
         <maven.pde.package>org.jdom</maven.pde.package>
       </properties>
     </dependency>
     
     pde:plugin then builds a single jar'd plugin if maven.pde.single is true, 
	 else classes are bundled into a jar file
     
     TODO: * allow using a MANIFEST file
           * allow customizing classes path
           * manage custom includes
           * allow to use a template instead of directly modify root plugin 
             descriptor - collaborative perspective (maven.pde.manifest=true|false)
           * provide an option to allow cleaning up runtime & requires 
             elements (see 1. - non existent required plugins)  
             
4. feature
   
   pde:feature 
   
5. site

   pde:site (TODO)

6. multiproject-friendly
   
   pde:pde disptaches either to pde:plugin, pde:feature or pde:site dependending
   on the value of maven.pde.type property.

   pde:pde has a prereq on pde:check which does some compabilities checks.
   for now, only buildId is checked. 	

7. pde:install
  
   pde:install has a prereq on pde:pde
   
   primary artifact is always installed through artifact:install if sourcesPresent to allow dependencies resolution. 
   
   
8. deploy

9. other artifact types
    
   no more  differenciation for other artifact types (help | lib-only):
     - lib-only plugins now are a direct subset of the previous artifacts set 
     - help will be when refined includes will be managed
   
10. convenient archive & other utility goals
   
   - provide a goal to provide a zip ready to be unpacked 
     into eclipse.home
   - provide a goal to directly install a plugin into eclipse.home

   - implement pde:check-arguments (TODO)
   
TODO: * simplify name resolution mechanism from a user point of view - and see if not too specific 
      * generate descirptor if doesn't exist
      * extract constants