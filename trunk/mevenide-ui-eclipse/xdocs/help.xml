<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
    <properties>
    	<author email="rhill@wanadoo.fr">Gilles Dodinet</author>
        <title>Help Page</title>
    </properties>
    <body>
    	<section name="Table of Content">
    		<div id="documentContent">
    		<ol>
    		  <li><a href="#Mevenide Configuration" class="documentLink">Mevenide Configuration</a></li>
    		  <li><a href="#Mevenide Menu" class="documentLink">Mevenide Menu</a></li>
    		  <li><a href="#Running Maven" class="documentLink">Running Maven</a></li>
    		  <li><a href="#POM Synchronization" class="documentLink">POM Synchronization</a></li>
	    	  <li><a href="#Eclipse Project Synchronization" class="documentLink">Eclipse Project Synchronization</a></li>
	    	  <li><a href="#POM Edition" class="documentLink">POM Edition</a></li>
    		</ol>
    		</div>
    	</section>
        <section name="Mevenide Configuration">
        	<div id="documentContent">
        	<p>
			    Before using Mevenide, you will have to configure it. That is done through Maven Preferences page :
				<i><code>Window &gt; Preferences &gt; Maven</code></i>. Java Home, Maven Home and 
				Maven repository are required in order to successfully use Mevenide. 
				<br/><br/>
				Also a POM template can be specified that will be used when creating POM skeleton.
				<br/><br/>
				if you want Mevenide to check the timestamp of project.xml or .classpath before synchronize them, 
				set the 'Chek Timestamp' button. This can prevent you to inadvertently override your configuration files.
				If it is checked and synchronization isnot necessary, Mevenide exits quietly.
				<br/><br/>
				Last, you can can specify default goals which will be run when invoking the runner.
				<br/><br/>
				<center>
					<img src="images/set-preferences.png" border="1px"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 1</b>Mevenide Preferences Page</font>
				</center>
			    <br/><br/>
			</p>
			</div>
        </section>
            
        <section name="Mevenide Menu">
        	<div id="documentContent">
			<p>	
			    Mevenide actions can be accessed through the 'Maven' menu in either 
			    <code>project.xml</code> or Eclipse Project contextual menu.
			    <br/><br/>
			    <center>
					<img border="1px" src="images/mevenide-menu.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 2</b>Mevenide Menu</font>
					<br/><br/>
				</center>
            </p>
            </div>
        </section>
        <section name="Running Maven">
        	<subsection name="Launch Wizard">
        		<div id="documentContent">
			  <p>
				
				Mevenide is now integrated into Eclipse External Tools.
				<br/><br/>
				When selecting '<code>Run Maven...</code>' from 'Maven' menu, a wizard appears that allows you
				to pick options relevant in the context of the IDE (that means, f.i, <code>-b</code>, <code>-h</code>, <code>-p</code> options, among others, are not accessible).
				System properties can also be specified using the 'Add' button. 
				<br/><br/>
				The Text widget at the bottom of the wizard page is writable and goals to run are to be passed in there for now. 
				A goals grabbing mechanism is in progress and should be released soon. The table is used to pass System Properties to Maven.
				<br/><br/>
				<center>
					<img border="1px" src="images/run-maven.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 3</b>Run Maven Dialog</font>
					<br/><br/>
				</center>
			  </p>
			  </div>
			</subsection>
			<subsection name="Launch Shortcut">
				<div id="documentContent">
			  <p>
				The "Run As> Maven Project" command silently invokes the default Maven goals specified in the preference page.
				<br/><br/>
				<center>
					<img border="1px" src="images/mevenide-quicklaunch.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 4</b>QuickLaunch Button</font>
				</center>
              </p>
              </div>
            </subsection>
            <subsection name="Maven Console">
              <div id="documentContent">
        	    <p>
        		  Mevenide doesnot provide yet an integrated Maven Console, tho Maven Console can still be used thanks the Eclipse Debug Console.
        		  <br/><br/>
        		  <center>
	        		<img border="1px" src="images/maven-console.png"/>
    	    		<br/><br/>
        			<font size="-1"><b>Screenshot 5</b>Running Maven Console</font>				
        		  </center>
        		  <br/><br/>
        	    </p>
        	  </div>
           </subsection>
           <subsection name="Goals Picker">
             <div id="documentContent">
               <p>
               	 Mevenide provides an interface to graphically choose the goals to be run. Once chosen, they can be ordered by clicking 
               	 the <i>Goals Order</i> button.
               	 <br/><br/>
        		 <center>
	        	   <img border="1px" src="images/mevenide-goals-picker.png"/>
    	    	   <br/><br/>
        		   <font size="-1"><b>Screenshot 6</b>Choosing Goals</font>				
        		 </center>
        		 <br/><br/>
               </p>
             </div>
           </subsection>
        </section>
       
         <section name="POM Synchronization">
         	<div id="documentContent">
			<p>
				Mevenide POM Synchronization now provides only one Page, consisting of two main elements : 
				<ul>
					<li>a TabFolder from which user should specify which artifact is to put back in to the POM</li>
					<li>a simple composite allowing the user to specify the inheritance status of the POM</li>
				</ul>
			</p>
			</div>
			<subsection name="SourceDirectory Synchronization">
				<div id="documentContent">
			<p>	
				Since POM contains much more information than Eclipse .classpath, when synchronizing POM,
				user have to provide additional informations. For every Eclipse SourceFolder, the type of Maven Source Directory has to be specified
				through the SourceDirectory Mapping wizard page. Also user should declare if it is inherited or not. If the POM itself isnot 
				inherited then the checkbox (third column) isnot enabled.
				<br/><br/>
				<center>
					<img border="1px" src="images/sourcedirectory-mapping.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 7</b>Source Directory Mapping Wizard Page</font>
					<br/><br/>
				</center>
			</p>
			</div>
			</subsection>
			<subsection name="Dependency Synchronization">
				<div id="documentContent">
			<p>
				Mevenide provides an automatic Dependency resolving mechanism that can determine in a rather accurate way the groupId, artifactId and version of a given Dependency.
				Tho it can fail, then the user can help it using the Dependency Mapping wizard page.
				Also please note that if the library is not installed in the local repo, groupId will NOT be resolved, but will be assigned to <code>nonResolvedGroupId</code> and a key 
				will be added to project.properties to make use of Maven jar overriding facility.
				<br/><br/>
				<center>
					<img border="1px" src="images/dependency-mapping.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 8</b>Dependency Mapping Wizard Page</font>
				</center>
				<br/><br/>
				Mevenide provides support for Dependency properties through the Dependency Property dialog that can be attained by pressing the 'Properties' button.
				<br/><br/>
				<center>
					<img border="1px" src="images/dependency-properties.png"/>
					<br/><br/>
					<font size="-1"><b>Screenshot 9</b>Dependency Properties Dialog</font>	
				</center>
				<br/><br/>		
				We use colors to help the user to manage inheritance and solve dependencies issues. 
					<ul>
						<li>
							Grey : artifact already declared in parent (ReadOnly) 
						</li>
						<li>
							Red : artifact that conflicts with another artifact (that may be declared either 
							in parent or current pom). We consider a conflict occurs between two artifacts 
							when there is a discrepancy between their respective version while their groupId 
							and artifactId are equal. User should resolve the conflict by either removing the 
							artifact from the list or editing the concerned POM.
						</li>
						<li>
							Orange : artifact declared in both parent and current POM (or Eclipse Project). 
							Such an artifact should be either be specified as inherited or be removed from the list.
						</li>
						<li>
							Green  : artifact already present in POM. No action required.
						</li>
						<li>
							Black  : the artifact is present neither in the current POM nor in the parent.
						</li>
					</ul>
            </p>
            </div>
          </subsection>
        </section>  
        <section name="Eclipse Project Synchronization">
        	<div id="documentContent">
          <p>
        	Eclipse Project Synchronization relies on maven-eclipse-plugin for now, so there are some known limitations. However it is planned to provide really integrated support, that will use the JDT API.
          </p>
          </div>
        </section>
        
        <section name="POM Edition">
        	<div id="documentContent">
        	<p>To be done.</p>
        	</div>
        </section>
   </body>
</document>
