/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mevenide.netbeans.api.customizer.ProjectPanel;
import org.mevenide.netbeans.api.customizer.ProjectValidateObserver;
import org.mevenide.netbeans.api.customizer.changes.CheckBoxPropertyChange;
import org.mevenide.netbeans.api.customizer.changes.MavenPropertyChange;
import org.mevenide.netbeans.api.customizer.changes.NonUiPropertyChange;
import org.mevenide.netbeans.api.customizer.changes.TextFieldPropertyChange;
import org.mevenide.netbeans.api.project.MavenProject;
import org.mevenide.netbeans.api.customizer.LocationComboFactory;
import org.mevenide.netbeans.api.customizer.OriginChange;
import org.mevenide.properties.IPropertyLocator;
import org.netbeans.api.java.platform.JavaPlatform;
import org.netbeans.api.java.platform.JavaPlatformManager;
import org.netbeans.api.java.platform.PlatformsCustomizer;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Utilities;

/**
 * basic props of java and jar plugins.
 * @author  Milos Kleint (mkleint@codehaus.org)
 */
public class JavaPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(BuildPanel.class);
    
    private ProjectValidateObserver valObserver;
    private MavenProject project;
    
    private OriginChange ocDebug;
    private OriginChange ocDeprecated;
    private OriginChange ocAdditional;
    private OriginChange ocMainClass;
    private OriginChange ocManifest;
    private OriginChange ocCompress;
    private OriginChange ocExecutable;
    
    private NonUiPropertyChange fork;
    private HashMap changes;
    private boolean initialized;
    
    /** Creates new form BuildPanel */
    public JavaPanel(MavenProject proj) {
        project = proj;
        changes = new HashMap();
        initComponents();
        valObserver = null;
        setName("Java and Jar");
        initialized = false;
        comPlatform.setToolTipText("In order to have code completion and other IDE features"
                + " for the project, the user should define a Java Platform corresponding to the "
                + " compilate executable.");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        ocDebug = LocationComboFactory.createPropertiesChange(project);
        btnDebug = (JButton)ocDebug.getComponent();
        cbDebug = new javax.swing.JCheckBox();
        ocDeprecated = LocationComboFactory.createPropertiesChange(project);
        btnDeprecated = (JButton)ocDeprecated.getComponent();
        cbDeprecated = new javax.swing.JCheckBox();
        lblAdditional = new javax.swing.JLabel();
        txtAdditional = new javax.swing.JTextField();
        ocAdditional = LocationComboFactory.createPropertiesChange(project);
        btnAdditional = (JButton)ocAdditional.getComponent();
        lblMainClass = new javax.swing.JLabel();
        txtMainClass = new javax.swing.JTextField();
        ocMainClass = LocationComboFactory.createPropertiesChange(project);
        btnMainClass = (JButton)ocMainClass.getComponent();
        lblManifest = new javax.swing.JLabel();
        txtManifest = new javax.swing.JTextField();
        ocManifest = LocationComboFactory.createPropertiesChange(project);
        btnManifest = (JButton)ocManifest.getComponent();
        ocCompress = LocationComboFactory.createPropertiesChange(project);
        btnCompress = (JButton)ocCompress.getComponent();
        cbCompress = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        ocExecutable = LocationComboFactory.createPropertiesChange(project);
        btnExecutable = (JButton)ocExecutable.getComponent();
        lblExecutable = new javax.swing.JLabel();
        txtExecutable = new javax.swing.JTextField();
        comPlatform = new javax.swing.JComboBox();
        btnEdit = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnDebug, gridBagConstraints);

        cbDebug.setText("Generate Debugging Info");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbDebug, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnDeprecated, gridBagConstraints);

        cbDeprecated.setText("Report Usage of Deprecated APIs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbDeprecated, gridBagConstraints);

        lblAdditional.setLabelFor(txtAdditional);
        lblAdditional.setText("Additional Compiler Options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblAdditional, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtAdditional, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnAdditional, gridBagConstraints);

        lblMainClass.setLabelFor(txtMainClass);
        lblMainClass.setText("Main Class:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 0, 0, 0);
        add(lblMainClass, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        add(txtMainClass, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        add(btnMainClass, gridBagConstraints);

        lblManifest.setLabelFor(txtManifest);
        lblManifest.setText("Manifest File:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnManifest, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(btnCompress, gridBagConstraints);

        cbCompress.setText("Compress JAR File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(cbCompress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnExecutable, gridBagConstraints);

        lblExecutable.setLabelFor(txtExecutable);
        lblExecutable.setText("Compilation Executable:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblExecutable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(txtExecutable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(comPlatform, gridBagConstraints);

        btnEdit.setText("Edit...");
        btnEdit.setToolTipText("Edit the Defined Java Platforms");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(btnEdit, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        PlatformsCustomizer.showCustomizer(null);
        populatePlatformCombo(project.getPropertyResolver().resolveString(txtExecutable.getText()));
        
    }//GEN-LAST:event_btnEditActionPerformed
    
    public void addNotify() {
        super.addNotify();
        if (!initialized) {
            initialized = true;
            populateChangeInstances();
            populatePlatformCombo(project.getPropertyResolver().getResolvedValue("maven.compile.executable"));
            ExecutableListener lst = new ExecutableListener();
            comPlatform.addActionListener(lst);
            txtExecutable.getDocument().addDocumentListener(lst);
        }
    }
    
    private void populateChangeInstances() {
        createToggleChangeInstance("maven.compile.debug", cbDebug, ocDebug, true);
        createToggleChangeInstance("maven.compile.deprecation", cbDeprecated, ocDeprecated, false);
        createToggleChangeInstance("maven.jar.compress", cbCompress, ocCompress, true);
        createChangeInstance("maven.compile.compilerargs", txtAdditional, ocAdditional);
        createChangeInstance("maven.jar.mainclass", txtMainClass, ocMainClass);
        createChangeInstance("maven.jar.manifest", txtManifest, ocManifest);
        createChangeInstance("maven.compile.executable", txtExecutable, ocExecutable);
        
        String value = project.getPropertyResolver().getResolvedValue("maven.compile.fork");
        int location = project.getPropertyLocator().getPropertyLocation("maven.compile.fork");
        if (value == null) {
            value = Boolean.FALSE.toString();
            location = IPropertyLocator.LOCATION_NOT_DEFINED;
        }
        fork = new NonUiPropertyChange("maven.compile.fork", value, location);
    }
    
    private void createToggleChangeInstance(String key, JCheckBox field, OriginChange oc, boolean defaultValue) {
        String value = project.getPropertyResolver().getResolvedValue(key);
        int location = project.getPropertyLocator().getPropertyLocation(key);
        if (value == null) {
            value = Boolean.toString(defaultValue);
            location = IPropertyLocator.LOCATION_NOT_DEFINED;
        }
        changes.put(key, new CheckBoxPropertyChange(key, value, location, field, oc, defaultValue, false));
    }
    
    private void createChangeInstance(String key, JTextField field, OriginChange oc) {
        String value = project.getPropertyResolver().getValue(key);
        int location = project.getPropertyLocator().getPropertyLocation(key);
        if (value == null) {
            value = "";
            location = IPropertyLocator.LOCATION_NOT_DEFINED;
        }
        String defaultValue = project.getPropertyLocator().getValueAtLocation(key, IPropertyLocator.LOCATION_DEFAULTS);
        changes.put(key, new TextFieldPropertyChange(key, value, location, field, oc, defaultValue));
    }
    
    public void setResolveValues(boolean resolve) {
        assignValue("maven.compile.compilerargs", resolve);
        assignValue("maven.jar.mainclass", resolve);
        assignValue("maven.jar.manifest", resolve);
        assignValue("maven.compile.executable", resolve);
    }
    
    
    private void assignValue(String key, boolean resolve) {
        TextFieldPropertyChange change = (TextFieldPropertyChange)changes.get(key);
        if (resolve) {
            String value = project.getPropertyResolver().resolveString(change.getNewValue());
            change.setResolvedValue(value);
        } else {
            change.resetToNonResolvedValue();
        }
    }
    
    
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenPropertyChange change = (MavenPropertyChange)it.next();
            if (change.hasChanged()) {
                if ("maven.compile.executable".equals(change.getKey())) { //NOI18N
                    if (  change.getNewLocation() != change.getOldLocation()
                    && (  change.getNewLocation() != IPropertyLocator.LOCATION_NOT_DEFINED
                            || change.getNewLocation() != IPropertyLocator.LOCATION_DEFAULTS)) {
                        fork.setNewValue("true"); //NOI18N
                        if (    fork.getOldLocation() == IPropertyLocator.LOCATION_NOT_DEFINED 
                             || fork.getOldLocation() == IPropertyLocator.LOCATION_DEFAULTS) {
                            fork.setNewLocation(IPropertyLocator.LOCATION_PROJECT_BUILD);
                        } else {
                            
                        }
                        toReturn.add(fork);
                    }
                }
                toReturn.add(change);
            }
        }
        return toReturn;
    }
    
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    public boolean isInValidState() {
        return true;
    }
    
    public String getValidityMessage() {
        String message = "";
        return message;
    }
    
    private void populatePlatformCombo(String customCompile) {
        Collection col = new ArrayList();
        
        JavaPlatformManager pm = JavaPlatformManager.getDefault();
        JavaPlatform[] platforms = pm.getInstalledPlatforms();
        Object selected = new NoCorrectPlatform();
        String def = pm.getDefaultPlatform().getDisplayName();
        
        for (int i = 0; i < platforms.length; i++) {
            if (!def.equals(platforms[i].getDisplayName())) {
                col.add(platforms[i].getDisplayName());
            } else {
                col.add(selected);
            }
        }
        if (customCompile != null && customCompile.trim().length() > 0) {
            boolean found = false;
            File fl = new File(customCompile);
            if (fl.exists()) {
                FileObject toolFO = FileUtil.toFileObject(fl);
                if (toolFO != null) {
                    String toolname = toolFO.getNameExt();
                    for (int i = 0; i < platforms.length; i++) {
                        if (!def.equals(platforms[i].getDisplayName())) {
                            FileObject fo = platforms[i].findTool(toolname);
                            if (fo != null && fo.equals(toolFO)) {
                                selected = platforms[i].getDisplayName();
                                found = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        comPlatform.setModel(new DefaultComboBoxModel(col.toArray()));
        comPlatform.setSelectedItem(selected);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdditional;
    private javax.swing.JButton btnCompress;
    private javax.swing.JButton btnDebug;
    private javax.swing.JButton btnDeprecated;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExecutable;
    private javax.swing.JButton btnMainClass;
    private javax.swing.JButton btnManifest;
    private javax.swing.JCheckBox cbCompress;
    private javax.swing.JCheckBox cbDebug;
    private javax.swing.JCheckBox cbDeprecated;
    private javax.swing.JComboBox comPlatform;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAdditional;
    private javax.swing.JLabel lblExecutable;
    private javax.swing.JLabel lblMainClass;
    private javax.swing.JLabel lblManifest;
    private javax.swing.JTextField txtAdditional;
    private javax.swing.JTextField txtExecutable;
    private javax.swing.JTextField txtMainClass;
    private javax.swing.JTextField txtManifest;
    // End of variables declaration//GEN-END:variables
    
    
    private static final class NoCorrectPlatform {
        private NoCorrectPlatform() {
            
        }
        
        public String toString() {
            return "Default Platform";
        }
    }
    
    private class ExecutableListener implements ActionListener, DocumentListener {
        private boolean skip = false;
        
        public void actionPerformed(ActionEvent actionEvent) {
            if (!skip) {
                skip = true;
                Object obj = comPlatform.getSelectedItem();
                if (!(obj instanceof NoCorrectPlatform)) {
                    String str = (String)obj;
                    JavaPlatformManager pm = JavaPlatformManager.getDefault();
                    JavaPlatform[] platforms = pm.getPlatforms(str, null);
                    if (platforms != null && platforms.length > 0) {
                        JavaPlatform plat = platforms[0];
                        String toFind = Utilities.isWindows() ? "javac.exe" : "javac";
                        FileObject fo = plat.findTool(toFind);
                        if (fo != null) {
                            File fil = FileUtil.toFile(fo);
                            txtExecutable.setText(fil.getAbsolutePath());
                        }
                    }
                } else {
                    ocExecutable.setAction(IPropertyLocator.LOCATION_DEFAULTS);
                }
                skip = false;
            }
        }
        
        public void changedUpdate(DocumentEvent documentEvent) {
            change();
        }
        
        public void insertUpdate(DocumentEvent documentEvent) {
            change();
        }
        
        public void removeUpdate(DocumentEvent documentEvent) {
            change();
        }
        
        private void change() {
            if (!skip) {
                skip = true;
                populatePlatformCombo(project.getPropertyResolver().resolveString(txtExecutable.getText()));
                skip = false;
            }
        }
        
    }
    
}
