/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.project.MailingList;
import org.apache.maven.project.Project;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.customizer.ui.LocationComboFactory;
import org.mevenide.netbeans.project.customizer.ui.OriginChange;
import org.mevenide.project.io.IContentProvider;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser;
import org.openide.util.NbBundle;

/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class ListsPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(ListsPanel.class);
    
    private ProjectValidateObserver valObserver;
    private MavenProject project;
    private Listener listener;    
    private OriginChange ocMailingLists;
    private OriginChange ocDummyMailingList;
    private DefaultListModel model;
    private ListModelPOMChange change;
    private MultiTextComponentPOMChange currentList;
    private boolean isResolvingValues = false;

    /** Creates new form BasicsPanel */
    public ListsPanel(MavenProject proj) {
        project = proj;
        // just a dummy to pass to individual mailing list MavenChange instances..
        // a location is for all mailing lists the same.
        ocDummyMailingList = LocationComboFactory.createPOMChange(project, false);
        initComponents();
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(ListsPanel.class, "ListsPanel.name"));
        btnView.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String url = txtArchive.getText().trim();
                url = project.getPropertyResolver().resolveString(url);
                if (url.startsWith("http://")) {
                    try {
                        URL link = new URL(url);
                        HtmlBrowser.URLDisplayer.getDefault().showURL(link);
                    } catch (MalformedURLException exc) {
                        NotifyDescriptor error = new NotifyDescriptor.Message("Is not a valid URL.", NotifyDescriptor.WARNING_MESSAGE);
                        DialogDisplayer.getDefault().notify(error);
                    }
                    
                }
            }
        });
        lstLists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        populateChangeInstances();        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblLists = new javax.swing.JLabel();
        ocMailingLists = LocationComboFactory.createPOMChange(project, true);
        btnMailingLists = (JButton)ocMailingLists.getComponent();
        spLists = new javax.swing.JScrollPane();
        lstLists = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblArchive = new javax.swing.JLabel();
        txtArchive = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        lblSubscribe = new javax.swing.JLabel();
        txtSubscribe = new javax.swing.JTextField();
        lblUnsubscribe = new javax.swing.JLabel();
        txtUnsubscribe = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblLists.setLabelFor(lstLists);
        lblLists.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.lblLists.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblLists, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(btnMailingLists, gridBagConstraints);

        spLists.setPreferredSize(new java.awt.Dimension(300, 131));
        spLists.setViewportView(lstLists);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.2;
        add(spLists, gridBagConstraints);

        btnAdd.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.btnAdd.text"));
        btnAdd.setActionCommand("btnAdd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(btnAdd, gridBagConstraints);

        btnRemove.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.btnRemove.text"));
        btnRemove.setActionCommand("btnRemove");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        add(btnRemove, gridBagConstraints);

        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtName, gridBagConstraints);

        lblArchive.setLabelFor(txtArchive);
        lblArchive.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.lblArchive.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblArchive, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtArchive, gridBagConstraints);

        btnView.setText("View...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(btnView, gridBagConstraints);

        lblSubscribe.setLabelFor(txtSubscribe);
        lblSubscribe.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.lblLSubscribe.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblSubscribe, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtSubscribe, gridBagConstraints);

        lblUnsubscribe.setLabelFor(txtUnsubscribe);
        lblUnsubscribe.setText(org.openide.util.NbBundle.getMessage(ListsPanel.class, "ListsPanel.lblUnsubscribe.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(lblUnsubscribe, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(txtUnsubscribe, gridBagConstraints);

    }//GEN-END:initComponents
    
    public void addNotify() {
        super.addNotify();
        listener = new Listener();
        btnAdd.addActionListener(listener);
        btnRemove.addActionListener(listener);
        lstLists.addListSelectionListener(listener);
        txtName.addFocusListener(listener);
    }
    
    public void removeNotify() {
        super.removeNotify();
        btnAdd.removeActionListener(listener);
        btnRemove.removeActionListener(listener);
        lstLists.removeListSelectionListener(listener);
        txtName.removeFocusListener(listener);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnMailingLists;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel lblArchive;
    private javax.swing.JLabel lblLists;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSubscribe;
    private javax.swing.JLabel lblUnsubscribe;
    private javax.swing.JList lstLists;
    private javax.swing.JScrollPane spLists;
    private javax.swing.JTextField txtArchive;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSubscribe;
    private javax.swing.JTextField txtUnsubscribe;
    // End of variables declaration//GEN-END:variables

    private void populateChangeInstances() {    
        String key = "pom.mailingLists"; //NOI18N
        int location = project.getProjectWalker().getLocation(key);
        List oldValues = new ArrayList();
        List orig = project.getOriginalMavenProject().getMailingLists();
        if (orig != null) {
            Iterator it = orig.iterator();
            while (it.hasNext()) {
                MailingList mlist  = (MailingList)it.next();
                HashMap vals = new HashMap();
                vals.put("name", mlist.getName());
                vals.put("archive", mlist.getArchive());
                vals.put("subscribe", mlist.getSubscribe());
                vals.put("unsubscribe", mlist.getUnsubscribe());
                MultiTextComponentPOMChange change = new MultiTextComponentPOMChange(
                                                           "pom.mailingLists.mailingList", 
                                                           vals, location, createFieldMap(), 
                                                           ocDummyMailingList, false);
                
                oldValues.add(change);
            }
        }
        model = new DefaultListModel();
        lstLists.setModel(model);
        lstLists.setCellRenderer(new ListRenderer());
        change = new ListModelPOMChange(key, oldValues, location, model, ocMailingLists, true);
    } 
    
     public void setResolveValues(boolean resolve) {
         isResolvingValues = resolve;
         resolveOneList(resolve, currentList);
//        // nothing selected -> disable
        btnRemove.setEnabled(!resolve);
        btnAdd.setEnabled(!resolve);
    }
   
     private void resolveOneList(boolean resolve, MultiTextComponentPOMChange  chng) {
         if (chng != null) {
             if (resolve) {
                 IContentProvider prov = currentList.getChangedContent();
                 HashMap resolved = new HashMap();
                 String value = prov.getValue("name"); //NOI18N
                 if (value != null) {
                     resolved.put("name", project.getPropertyResolver().resolveString(value)); //NOI18N
                 }
                 value = prov.getValue("archive"); //NOI18N
                 if (value != null) {
                    resolved.put("archive", project.getPropertyResolver().resolveString(value)); //NOI18N
                 }
                 value = prov.getValue("subscribe"); //NOI18N
                 if (value != null) {
                    resolved.put("subscribe", project.getPropertyResolver().resolveString(value)); //NOI18N
                 }
                 value = prov.getValue("unsubscribe"); //NOI18N
                 if (value != null) {
                     resolved.put("unsubscribe", project.getPropertyResolver().resolveString(value)); //NOI18N
                 }
                 chng.setResolvedValues(resolved);
             } else {
                 chng.resetToNonResolvedValue();
             }
         }
     }
    
    public List getChanges() {
        boolean hasChanged = change.hasChanged();
        if (!hasChanged) {
            for (int i = 0; i < model.size(); i++) {
                MultiTextComponentPOMChange chng = (MultiTextComponentPOMChange)model.get(i);
                hasChanged = chng.hasChanged();
                if (hasChanged) {
                    break;
                }
            }
        }
        if (hasChanged) {
            List toReturn = new ArrayList();
            toReturn.add(change);
            return toReturn;
        }
        return Collections.EMPTY_LIST;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    /**
     * returns 0 for ok, otherwise a integer code.
     */
    private int doValidateCheck() {
        if (txtName.getText().trim().length() == 0) {
            return 1;
        }
        return  0;
    }
    
    public boolean isInValidState() {
        // is always valid, since we can continue, error messages only happen when the
        // attemp to add to list is done.. if it fails, it's not commited, thus the state is always valid.
        return true;
    }
    
    public String getValidityMessage() {
        int retCode = doValidateCheck();
        String message = "";
//        // initially and when nothing is selected don't show message.
//        // when adding the currentList should be non-null
//        if (retCode == 1 && currentList != null) {
//            message = NbBundle.getMessage(ListsPanel.class, "ListsPanel.error1.text");
//        }
        return message;
    }
    
    private HashMap createFieldMap() {
        HashMap fields = new HashMap();
        fields.put("name", txtName); //NOI18N
        fields.put("subscribe", txtSubscribe); //NOI18N
        fields.put("unsubscribe", txtUnsubscribe); //NOI18N
        fields.put("archive", txtArchive); //NOI18N
        return fields;
    }
    
    /**
     * action listener for buttons and list selection..
     */
    private class Listener implements ActionListener, ListSelectionListener, FocusListener {
        
        public void actionPerformed(ActionEvent e) {
            if ("btnRemove".equals(e.getActionCommand())) { //NOI18N
                int index = lstLists.getSelectedIndex();
                model.removeElementAt(index);
                while (index >= model.size()) {
                    index = index - 1;
                }
                if (index > -1) {
                    lstLists.setSelectedIndex(index);
                }
            }
            if ("btnAdd".equals(e.getActionCommand())) { //NOI18N
                MultiTextComponentPOMChange newList = new MultiTextComponentPOMChange(
                                                           "pom.mailingLists.mailingList", 
                                                           new HashMap(), change.getOldLocation(), createFieldMap(), 
                                                           ocDummyMailingList, false);
                if (currentList != null) {
                    currentList.detachListeners();                
                }
                model.addElement(newList);
                lstLists.setSelectedValue(newList, true);
                txtName.requestFocusInWindow();
            }
        }
        
        public void valueChanged(ListSelectionEvent e) {
            if (currentList != null) {
                currentList.detachListeners();
                txtName.setText("");
                txtUnsubscribe.setText("");
                txtSubscribe.setText("");
                txtArchive.setText("");
            }
            // repaint to show new values in list?
            lstLists.repaint();
            if (lstLists.getSelectedIndex() == -1) {
                currentList = null;
                btnRemove.setEnabled(false);
//                txtArchive.setEnabled(false);
//                txtName.setEnabled(false);
//                txtSubscribe.setEnabled(false);
//                txtUnsubscribe.setEnabled(false);
            } else {
                currentList = (MultiTextComponentPOMChange)lstLists.getSelectedValue();
                resolveOneList(isResolvingValues, currentList);
                currentList.attachListeners();
                btnRemove.setEnabled(true);
            }

        }
        public void focusGained(FocusEvent focusEvent) {
            // ignore
        }

        public void focusLost(FocusEvent focusEvent) {
            // when focus is lost on txtName, refresh the list..
            lstLists.repaint();
        }
        
    }

    /**
     * rendered which displays the name of the mailing list in the list..
     */
    private class ListRenderer extends DefaultListCellRenderer {
        public Component getListCellRendererComponent(
                    JList list,
                    Object value,
                    int index,
                    boolean isSelected,
                    boolean cellHasFocus) 
        {
            MultiTextComponentPOMChange change = (MultiTextComponentPOMChange)value;
            String name = change.getValueFor("name");
            if (name == null || name.trim().length() == 0) {
                name = "<Mailing list with no name>";
            } else {
                name = project.getPropertyResolver().resolveString(name);
            }
            return  super.getListCellRendererComponent(list, name, index, isSelected, cellHasFocus);
        }
    }
    
}
