/* ==========================================================================
 * Copyright 2003-2004 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;


import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.customizer.ui.LocationComboFactory;
import org.mevenide.netbeans.project.customizer.ui.OriginChange;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.HtmlBrowser;
import org.openide.util.NbBundle;


/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class BasicsPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(BasicsPanel.class);

    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    private MavenProject project;
   
    private OriginChange ocArtifactID;
    private OriginChange ocGroupID;
    private OriginChange ocPackage;
    private OriginChange ocLogo;
    private OriginChange ocUrl;
    private OriginChange ocCurrentVersion;
    private OriginChange ocInceptionYear;
    private OriginChange ocName;
    private OriginChange ocShortDescription;
    private OriginChange ocDescription;
    
    private HashMap changes;
    
    /** Creates new form BasicsPanel */
    public BasicsPanel(MavenProject proj) {
	project = proj;
        changes = new HashMap();
        initComponents();
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.name"));
        btnUrl.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                String url = txtUrl.getText().trim();
                url = project.getPropertyResolver().resolveString(url);
                if (url.startsWith("http://")) {
                    try {
                        URL link = new URL(url);
                        HtmlBrowser.URLDisplayer.getDefault().showURL(link);
                    } catch (MalformedURLException exc) {
                        NotifyDescriptor error = new NotifyDescriptor.Message("Is not a valid URL.", NotifyDescriptor.WARNING_MESSAGE);
                        DialogDisplayer.getDefault().notify(error);
                    }
                }
            }
        });
        populateChangeInstances();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblArtifactID = new javax.swing.JLabel();
        txtArtifactID = new javax.swing.JTextField();
        ocArtifactID = LocationComboFactory.createPOMChange(project, false);
        btnArtifactID = (JButton)ocArtifactID.getComponent();
        lblGroupID = new javax.swing.JLabel();
        txtGroupID = new javax.swing.JTextField();
        ocGroupID = LocationComboFactory.createPOMChange(project, false);
        btnGroupID = (JButton)ocGroupID.getComponent();
        lblCurrentVersion = new javax.swing.JLabel();
        txtCurrentVersion = new javax.swing.JTextField();
        ocCurrentVersion = LocationComboFactory.createPOMChange(project, false);
        btnCurrentVersion = (JButton)ocCurrentVersion.getComponent();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        ocName = LocationComboFactory.createPOMChange(project, false);
        btnName = (JButton)ocName.getComponent();
        lblInceptionYear = new javax.swing.JLabel();
        txtInceptionYear = new javax.swing.JTextField();
        ocInceptionYear = LocationComboFactory.createPOMChange(project, false);
        btnInceptionYear = (JButton)ocInceptionYear.getComponent();
        lblPackage = new javax.swing.JLabel();
        txtPackage = new javax.swing.JTextField();
        ocPackage = LocationComboFactory.createPOMChange(project, false);
        btnPackage = (JButton)ocPackage.getComponent();
        lblUrl = new javax.swing.JLabel();
        txtUrl = new javax.swing.JTextField();
        ocUrl = LocationComboFactory.createPOMChange(project, false);
        btnUrlLoc = (JButton)ocUrl.getComponent();
        btnUrl = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        txtLogo = new javax.swing.JTextField();
        ocLogo = LocationComboFactory.createPOMChange(project, false);
        btnLogo = (JButton)ocLogo.getComponent();
        lblShortDescription = new javax.swing.JLabel();
        txtShortDescription = new javax.swing.JTextField();
        ocShortDescription = LocationComboFactory.createPOMChange(project, false);
        btnShortDescription = (JButton)ocShortDescription.getComponent();
        lblDescription = new javax.swing.JLabel();
        spDescription = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        ocDescription = LocationComboFactory.createPOMChange(project, true);
        btnDescription = (JButton)ocDescription.getComponent();

        setLayout(new java.awt.GridBagLayout());

        lblArtifactID.setLabelFor(txtArtifactID);
        lblArtifactID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblArtifactID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblArtifactID, gridBagConstraints);

        txtArtifactID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtArtifactID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(txtArtifactID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnArtifactID, gridBagConstraints);

        lblGroupID.setLabelFor(txtGroupID);
        lblGroupID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblGroupID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblGroupID, gridBagConstraints);

        txtGroupID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtGroupID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtGroupID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnGroupID, gridBagConstraints);

        lblCurrentVersion.setLabelFor(txtCurrentVersion);
        lblCurrentVersion.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblCurrentVersion.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblCurrentVersion, gridBagConstraints);

        txtCurrentVersion.setMinimumSize(new java.awt.Dimension(30, 26));
        txtCurrentVersion.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtCurrentVersion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnCurrentVersion, gridBagConstraints);

        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblName, gridBagConstraints);

        txtName.setMinimumSize(new java.awt.Dimension(30, 26));
        txtName.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        add(txtName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnName, gridBagConstraints);

        lblInceptionYear.setLabelFor(txtInceptionYear);
        lblInceptionYear.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "DescPanel.lblInceptionYear.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblInceptionYear, gridBagConstraints);

        txtInceptionYear.setMinimumSize(new java.awt.Dimension(50, 28));
        txtInceptionYear.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtInceptionYear, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnInceptionYear, gridBagConstraints);

        lblPackage.setLabelFor(txtPackage);
        lblPackage.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblPackage.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblPackage, gridBagConstraints);

        txtPackage.setMinimumSize(new java.awt.Dimension(50, 26));
        txtPackage.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtPackage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnPackage, gridBagConstraints);

        lblUrl.setLabelFor(txtUrl);
        lblUrl.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "DescPanel.lblUrl.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblUrl, gridBagConstraints);

        txtUrl.setMinimumSize(new java.awt.Dimension(50, 26));
        txtUrl.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtUrl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnUrlLoc, gridBagConstraints);

        btnUrl.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicPanel.btnUrl.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnUrl, gridBagConstraints);

        lblLogo.setLabelFor(txtLogo);
        lblLogo.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "DescPanel.lblLogo.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtLogo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnLogo, gridBagConstraints);

        lblShortDescription.setLabelFor(txtShortDescription);
        lblShortDescription.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "DescPanel.lblShortDescription.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblShortDescription, gridBagConstraints);

        txtShortDescription.setMinimumSize(new java.awt.Dimension(100, 26));
        txtShortDescription.setPreferredSize(new java.awt.Dimension(100, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtShortDescription, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnShortDescription, gridBagConstraints);

        lblDescription.setLabelFor(taDescription);
        lblDescription.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "DescPanel.lblDescription.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblDescription, gridBagConstraints);

        taDescription.setMinimumSize(new java.awt.Dimension(200, 100));
        spDescription.setViewportView(taDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(spDescription, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(btnDescription, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArtifactID;
    private javax.swing.JButton btnCurrentVersion;
    private javax.swing.JButton btnDescription;
    private javax.swing.JButton btnGroupID;
    private javax.swing.JButton btnInceptionYear;
    private javax.swing.JButton btnLogo;
    private javax.swing.JButton btnName;
    private javax.swing.JButton btnPackage;
    private javax.swing.JButton btnShortDescription;
    private javax.swing.JButton btnUrl;
    private javax.swing.JButton btnUrlLoc;
    private javax.swing.JLabel lblArtifactID;
    private javax.swing.JLabel lblCurrentVersion;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblGroupID;
    private javax.swing.JLabel lblInceptionYear;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPackage;
    private javax.swing.JLabel lblShortDescription;
    private javax.swing.JLabel lblUrl;
    private javax.swing.JScrollPane spDescription;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField txtArtifactID;
    private javax.swing.JTextField txtCurrentVersion;
    private javax.swing.JTextField txtGroupID;
    private javax.swing.JTextField txtInceptionYear;
    private javax.swing.JTextField txtLogo;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPackage;
    private javax.swing.JTextField txtShortDescription;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables

   private void populateChangeInstances() {
        createPOMChangeInstance("artifactId", txtArtifactID, ocArtifactID);
        createPOMChangeInstance("groupId", txtGroupID, ocGroupID);
        createPOMChangeInstance("currentVersion", txtCurrentVersion, ocCurrentVersion);
        createPOMChangeInstance("inceptionYear", txtInceptionYear, ocInceptionYear);
        createPOMChangeInstance("logo", txtLogo, ocLogo);
        createPOMChangeInstance("name", txtName, ocName);
        createPOMChangeInstance("package", txtPackage, ocPackage);
        createPOMChangeInstance("url", txtUrl, ocUrl);
        createPOMChangeInstance("shortDescription", txtShortDescription, ocShortDescription);
        createPOMChangeInstance("description", taDescription, ocDescription);
   }

   private void createPOMChangeInstance(String propName, JTextComponent field, OriginChange oc) {
       String key = "pom." + propName; //NOI18N
       String value = project.getProjectWalker().getValue(key);
       int location = project.getProjectWalker().getLocation(key);
       if (value == null) {
           value = "";
       } 
       changes.put(key, new TextComponentPOMChange(key, value, location, field, oc));
   }        
   
     public void setResolveValues(boolean resolve) {
        assignValue("artifactId", resolve);
        assignValue("groupId", resolve);
        assignValue("currentVersion", resolve);
        assignValue("inceptionYear", resolve);
        assignValue("logo", resolve);
        assignValue("name", resolve);
        assignValue("package", resolve);
        assignValue("url", resolve);
        assignValue("shortDescription", resolve);
        assignValue("description", resolve);
    }
     
   private void assignValue(String actionName, boolean resolve) {
       String key = "pom." + actionName; //NOI18N
       TextComponentPOMChange change = (TextComponentPOMChange)changes.get(key);
       if (resolve) {
           String value = project.getPropertyResolver().resolveString(change.getNewValue());
           change.setResolvedValue(value);
       } else {
           change.resetToNonResolvedValue();
       }
   }            
   
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenChange change = (MavenChange)it.next();
            if (change.hasChanged()) {
                toReturn.add(change);
            }
        }
        return toReturn;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
        if (listener == null) {
            listener = new ValidateListener();
            txtArtifactID.getDocument().addDocumentListener(listener);
            txtGroupID.getDocument().addDocumentListener(listener);
            txtPackage.getDocument().addDocumentListener(listener);
        }
    }
    
    private void doValidate() {
        logger.debug("Listener called");
        ProjectValidateObserver obs = valObserver;
        if (obs != null) {
            obs.resetValidState(isInValidState(), getValidityMessage());
        }
    }
    
    /**
     * returns 0 for ok, otherwise a integer code.
     */
    private int doValidateCheck() {
        if (Math.min(txtArtifactID.getText().trim().length(),
        txtGroupID.getText().trim().length()) == 0) {
            return 1;
        }
        if (txtPackage.getText().trim().length() > 0) {
            boolean matches = txtPackage.getText().matches("[a-zA-Z0-9\\.]*"); //NOI18N
            if (!matches) {
                return 2;
            } else {
                if (txtPackage.getText().startsWith(".") || txtPackage.getText().endsWith(".")) {
                    return 2;
                }
            }
        }
        return  0;
    }
    
    public boolean isInValidState() {
        return doValidateCheck() == 0;
    }
    
    public String getValidityMessage() {
        int retCode = doValidateCheck();
        String message = "";
        if (retCode == 1) {
            message = NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.error1.text");
        }
        if (retCode == 2) {
            message = "Badly formed package name";
        }
        return message;
    }
    
    /**
     * attach to the fields that are validated.
     */
    private class ValidateListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e) {
            doValidate();
        }
        
        public void insertUpdate(DocumentEvent e) {
            doValidate();
        }
        
        public void removeUpdate(DocumentEvent e) {
            doValidate();
        }
    }
}
