/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import java.util.List;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JTextField;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;

import javax.swing.event.DocumentListener;
import org.apache.maven.project.Build;
import org.apache.maven.project.UnitTest;
import org.mevenide.netbeans.api.customizer.ProjectPanel;
import org.mevenide.netbeans.api.customizer.ProjectValidateObserver;
import org.mevenide.netbeans.api.customizer.changes.CheckBoxPropertyChange;
import org.mevenide.netbeans.api.customizer.changes.MavenChange;
import org.mevenide.netbeans.api.customizer.changes.TextFieldPropertyChange;

import org.mevenide.netbeans.api.project.MavenProject;
import org.mevenide.netbeans.api.customizer.OriginChange;
import org.mevenide.properties.IPropertyLocator;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.nodes.Children;


/**
 * basic props for unit testing
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class UnitTestPanel extends JPanel implements ProjectPanel {
    private final static Logger LOGGER = Logger.getLogger(UnitTestPanel.class.getName());
    
    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    private MavenProject project;
    
    private OriginChange ocDebug;
    private OriginChange ocDeprecated;    
    private OriginChange ocAdditional;
    private OriginChange ocMainClass;
    private OriginChange ocManifest;
    private OriginChange ocCompress;
    private ExplorerManager resourceManager;
    private ExplorerManager testManager;
    private HashMap changes;

    /** Creates new form BuildPanel */
    public UnitTestPanel(MavenProject proj) {
        project = proj;
        changes = new HashMap();
        
        initComponents();
        valObserver = null;
        setName("Unit test");
        populateChangeInstances();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pnlTests = new TestPanel();
        jLabel1 = new javax.swing.JLabel();
        btnAddTest = new javax.swing.JButton();
        btnEditTest = new javax.swing.JButton();
        btnRemoveTest = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pnlResources = new ResourcePanel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        btnSkip = new javax.swing.JButton();
        cbSkip = new javax.swing.JCheckBox();
        btnAllowFail = new javax.swing.JButton();
        cbAllowFail = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(pnlTests, gridBagConstraints);

        jLabel1.setText("Unit Tests:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jLabel1, gridBagConstraints);

        btnAddTest.setText("Add");
        btnAddTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTestActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(btnAddTest, gridBagConstraints);

        btnEditTest.setText("Edit");
        btnEditTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTestActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(btnEditTest, gridBagConstraints);

        btnRemoveTest.setText("Remove");
        btnRemoveTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTestActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(btnRemoveTest, gridBagConstraints);

        jLabel2.setText("Resources");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        add(pnlResources, gridBagConstraints);

        jButton5.setText("Edit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton5, gridBagConstraints);

        jButton4.setText("Add");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton4, gridBagConstraints);

        jButton6.setText("Remove");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(btnSkip, gridBagConstraints);

        cbSkip.setText("Skip Tests when compiling");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(cbSkip, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(btnAllowFail, gridBagConstraints);

        cbAllowFail.setText("Allow Tests to fail");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(cbAllowFail, gridBagConstraints);

    }//GEN-END:initComponents

    private void btnRemoveTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveTestActionPerformed

    private void btnEditTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditTestActionPerformed

    private void btnAddTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTestActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel();
        JComboBox cb = new JComboBox(new Object[] {"Include", "Exclude"});
        JLabel lbl = new JLabel("Add: ");
        panel.setLayout(new GridBagLayout());
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panel.add(lbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panel.add(cb, gridBagConstraints);
        lbl = new JLabel("Value: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panel.add(lbl, gridBagConstraints);
        JTextField field = new JTextField();
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panel.add(field, gridBagConstraints);
        DialogDescriptor dd  = new DialogDescriptor(panel, "Add Include/Exclude");
        Object returned = DialogDisplayer.getDefault().notify(dd);
        
    }//GEN-LAST:event_btnAddTestActionPerformed
    
  private void populateChangeInstances() {
      Build bld = project.getOriginalMavenProject().getBuild();
      if (bld != null) {
          UnitTest test = bld.getUnitTest();
          if (test != null) {
              TestPanel pnl = (TestPanel)pnlTests;
              pnl.setData(test.getIncludes(), test.getExcludes());
          }
      }
//        createToggleChangeInstance("maven.compile.debug", cbDebug, ocDebug, true);
//        createToggleChangeInstance("maven.compile.deprecation", cbDeprecated, ocDeprecated, false);
//        createToggleChangeInstance("maven.jar.compress", cbCompress, ocCompress, true);
//        createChangeInstance("maven.compile.compilerargs", txtAdditional, ocAdditional);
//        createChangeInstance("maven.jar.mainclass", txtMainClass, ocMainClass);
//        createChangeInstance("maven.jar.manifest", txtManifest, ocManifest);
        
   }
   
   private void createToggleChangeInstance(String key, JCheckBox field, OriginChange oc, boolean defaultValue) {
       String value = project.getPropertyResolver().getResolvedValue(key);
       int location = project.getPropertyLocator().getPropertyLocation(key);
       if (value == null) {
           value = Boolean.toString(defaultValue);
           location = IPropertyLocator.LOCATION_NOT_DEFINED;
       }
       changes.put(key, new CheckBoxPropertyChange(key, value, location, field, oc, defaultValue, false));
   }    
   
   private void createChangeInstance(String key, JTextField field, OriginChange oc) {
       String value = project.getPropertyResolver().getValue(key);
       int location = project.getPropertyLocator().getPropertyLocation(key);
       if (value == null) {
           value = "";
           location = IPropertyLocator.LOCATION_NOT_DEFINED;
       }
       String defaultValue = project.getPropertyLocator().getValueAtLocation(key, IPropertyLocator.LOCATION_DEFAULTS);
       changes.put(key, new TextFieldPropertyChange(key, value, location, field, oc, defaultValue));
   }

    public void setResolveValues(boolean resolve) {
//        assignValue("maven.compile.compilerargs", resolve);
//        assignValue("maven.jar.mainclass", resolve);
//        assignValue("maven.jar.manifest", resolve);
   }
   
   
   private void assignValue(String key, boolean resolve) {
       TextFieldPropertyChange change = (TextFieldPropertyChange)changes.get(key);
       if (resolve) {
           String value = project.getPropertyResolver().resolveString(change.getNewValue());
           change.setResolvedValue(value);
       } else {
           change.resetToNonResolvedValue();
       }
   }   
   
    
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenChange change = (MavenChange)it.next();
            if (change.hasChanged()) {
                toReturn.add(change);
            }
        }
        return toReturn;
    }
    
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    public boolean isInValidState() {
        return true;
    }
    
    public String getValidityMessage() {
        String message = "";
        return message;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTest;
    private javax.swing.JButton btnAllowFail;
    private javax.swing.JButton btnEditTest;
    private javax.swing.JButton btnRemoveTest;
    private javax.swing.JButton btnSkip;
    private javax.swing.JCheckBox cbAllowFail;
    private javax.swing.JCheckBox cbSkip;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel pnlResources;
    private javax.swing.JPanel pnlTests;
    // End of variables declaration//GEN-END:variables
    
    private class TestPanel extends JPanel implements ExplorerManager.Provider {
        private InExNode includes;
        private InExNode excludes;
        public TestPanel() {
            super();
            testManager = new ExplorerManager();
            BeanTreeView btv = new BeanTreeView();
            btv.setRootVisible(false);
            btv.setPopupAllowed(false);
            btv.setDefaultActionAllowed(true);
            setLayout(new BorderLayout());
            add(btv, BorderLayout.CENTER);
        }
        public ExplorerManager getExplorerManager() {
            return testManager;
        }
        
        public void setData(List in, List ex) {
            Children.Array childs = new Children.Array();
            includes = new InExNode(in, true);
            excludes = new InExNode(ex, false);
            childs.add(new Node[] {
                includes,
                excludes
            });
            AbstractNode root = new AbstractNode(childs);
            testManager.setRootContext(root);
        }
        
        public void addData(String newValue, boolean include) {
            if (include) {
                ((InExChildren)includes.getChildren()).addItem(newValue);
            } else {
                ((InExChildren)excludes.getChildren()).addItem(newValue);
            }
        }
        
        public void removeData(String newValue, boolean include) {
            if (include) {
                ((InExChildren)includes.getChildren()).removeItem(newValue);
            } else {
                ((InExChildren)excludes.getChildren()).removeItem(newValue);
            }
        }
    }
    
    private class ResourcePanel extends JPanel implements ExplorerManager.Provider {
        public ResourcePanel() {
            super();
            resourceManager = new ExplorerManager();
            setLayout(new BorderLayout());
            BeanTreeView btv = new BeanTreeView();
            add(btv, BorderLayout.CENTER);
        }
        public ExplorerManager getExplorerManager() {
            return resourceManager;
        }
        
    }    

    private class InExNode extends AbstractNode {
        private List lst;
        public InExNode(List list, boolean includes) {
            super(new InExChildren(list));
            lst = list;
            if (includes) {
                setDisplayName("Includes");
            } else {
                setDisplayName("Excludes");
            }
        }
        
    }
    
    private class InExChildren extends Children.Keys {
        private List list;
        public InExChildren(List lst) {
            super();
            list = lst != null ? new ArrayList(lst) : new ArrayList();
            setKeys(list);
        }
        
        public Node[] createNodes(Object key) {
            AbstractNode toReturn = new AbstractNode(Children.LEAF);
            toReturn.setName(key.toString());
            return new Node[] {toReturn};
        }
        
        public void addItem(String newone) {
            list.add(newone);
            setKeys(list);
        }
        
        public void removeItem(String toRemove) {
            list.remove(toRemove);
            setKeys(list);
        }
    }
    
}
