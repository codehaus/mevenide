/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mevenide.netbeans.api.customizer.ProjectPanel;
import org.mevenide.netbeans.api.customizer.ProjectValidateObserver;
import org.mevenide.netbeans.api.project.MavenProject;
import org.mevenide.plugins.IPluginInfo;
import org.mevenide.plugins.PluginInfoFactory;
import org.mevenide.plugins.PluginInfoManager;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;



/**
 *
 * @author  Milos Kleint (mkleint@codehaus.org)
 */
public class PluginListPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(PluginListPanel.class);
    
    private ProjectValidateObserver valObserver;
    private MavenProject project;
    
    private Model mod;
    private List globalPanelList;
    private ConfigurationChildren childNodes;
    private List subPanelList;
    private ExplorerManager manager;
    private boolean initialized;
    
    /** Creates new form BuildPanel */
    public PluginListPanel(MavenProject proj, List panelsList, ExplorerManager man) {
        project = proj;
        globalPanelList = panelsList;
        manager = man;
        subPanelList = new ArrayList();
        childNodes = new ConfigurationChildren();
        initComponents();
        valObserver = null;
        initialized = false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        spPlugins = new javax.swing.JScrollPane();
        tblPlugins = new javax.swing.JTable();
        lblDescription = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        spPlugins.setViewportView(tblPlugins);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(spPlugins, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        add(lblDescription, gridBagConstraints);

    }//GEN-END:initComponents
    
    public void addNotify() {
        super.addNotify();
        if (!initialized) {
            initialized = true;
            populateTable();
        }
    }
    private void populateTable() {
        PluginInfoManager man = PluginInfoFactory.getInstance().createManager(project.getContext());
        IPluginInfo[] infos = man.getCurrentPlugins();
        final List vals = new ArrayList(10 + (infos != null ? infos.length : 0));
        WrapperRow rw = new UsedPropsWrapper();
        vals.add(rw);
        globalPanelList.add(rw.getCustomizer());
        rw = new DefaultPropsWrapper();
        vals.add(rw);
        globalPanelList.add(rw.getCustomizer());
        subPanelList.addAll(vals);
        if (infos != null) {
            for (int i = 0; i < infos.length; i++) {
                boolean isUsed = man.isUsedByProject(infos[i]);
                rw = new PluginWrapper(infos[i], isUsed);
                vals.add(rw);
                if (isUsed) {
                    subPanelList.add(rw);
                    globalPanelList.add(rw.getCustomizer());
                }
            }
        }
        childNodes.refreshMyKeys();
        mod = new Model(vals);
        tblPlugins.setModel(mod);
        TableColumn col = tblPlugins.getTableHeader().getColumnModel().getColumn(0);
        col.setMaxWidth(40);
        col.setMinWidth(20);
        col.setPreferredWidth(30);
        setupColumn(1);
        setupColumn(2);
        col = tblPlugins.getTableHeader().getColumnModel().getColumn(3);
        col.setCellRenderer(mod);
        tblPlugins.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1) {
                    tblPlugins.getModel().setValueAt(Boolean.TRUE, tblPlugins.getSelectedRow(), 0);
                    Node[] nds = childNodes.getNodes();
                    for (int i = 0; i < nds.length; i++) {
                        ConfigurationNode nd = (ConfigurationNode)nds[i];
                        if (nd.getRow() == vals.get(tblPlugins.getSelectedRow())) {
                            try {
                                manager.setSelectedNodes(new Node[] {nd});
                            } catch (PropertyVetoException exc) {
                                // well what can we do..
                            }
                        }
                    }
                }
                
            }
            
        });
        
    }
    
    private void setupColumn(int column) {
        Component comp;
        TableColumn col = tblPlugins.getTableHeader().getColumnModel().getColumn(column);
        col.setCellRenderer(mod);
        comp = tblPlugins.getDefaultRenderer(mod.getColumnClass(column)).
                             getTableCellRendererComponent(
                                 tblPlugins, longestLine(column),
                                 false, false, 0, column);
        int cellWidth = comp.getPreferredSize().width; 
        col.setPreferredWidth(cellWidth);
    }
    
    private String longestLine(int column) {
        int average = 0;
        for (int i =0; i < mod.getRowCount(); i++) {
            String val = (String)mod.getValueAt(i, column);
            average = average + val.length();
        }
        average = average / mod.getRowCount();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < average; i++) {
            buf.append("-");
        }
        return buf.toString();
    }
    
    public List getChanges() {
        return Collections.EMPTY_LIST;
    }
    
    public void setResolveValues(boolean resolve) {
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
    }
    
    
    public boolean isInValidState() {
        return true;
    }
    
    public String getValidityMessage() {
        return "";
    }
    
    public Children getNodeChildren() {
        return childNodes;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDescription;
    private javax.swing.JScrollPane spPlugins;
    private javax.swing.JTable tblPlugins;
    // End of variables declaration//GEN-END:variables
    


    private interface WrapperRow {
        boolean isEnabled();
        String getName();
        String getLongName();
        String getDescription();
        String getVersion();
        Component getCustomizer();
    }
    
    private class DefaultPropsWrapper implements WrapperRow {
        private Component customizer = null;
        public boolean isEnabled() {
            return true;
        }
        
        public String getName() {
            return "default"; //NOI18N
        }
        public String getLongName() {
            return "Default properties";
        }
        
        public String getDescription() {
            return "Maven's default propetries";
        }
        public String getVersion() {
            return "";
        }
        
        public Component getCustomizer() {
            if (customizer == null) {
                customizer = new DefaultPluginPanel(project);
            }
            return customizer;
        }
    }

    private class UsedPropsWrapper implements WrapperRow {
        private Component customizer = null;
        public boolean isEnabled() {
            return true;
        }
        
        public String getName() {
            return "used"; //NOI18N
        }
        public String getLongName() {
            return "Used Properties";
        }
        
        public String getDescription() {
            return "All properties that are used/defined in the project independent of plugin.";
        }
        public String getVersion() {
            return "";
        }
        public Component getCustomizer() {
            if (customizer == null) {
                customizer = PluginPanel.createUsedPanel(project);
            }
            return customizer;
        }
    }
    
    private class PluginWrapper implements WrapperRow {
        private boolean enabled;
        private IPluginInfo info;
        private Component customizer;
        
        public PluginWrapper(IPluginInfo plugininfo, boolean en) {
            info = plugininfo;
            enabled = en;
        }
        
        public boolean isEnabled() {
            return enabled;
        }
        
        public void setEnabled(boolean bool) {
            enabled = bool;
            if (enabled) {
                subPanelList.add(this);
                globalPanelList.add(this.getCustomizer());
            } else {
                subPanelList.remove(this);
            }
            childNodes.refreshMyKeys();
        }
        
        public String getName() {
            return info.getName();
        }
        public String getLongName() {
            String ln = info.getLongName();
            if (ln.startsWith("Maven ")) {
                ln = ln.substring("Maven ".length());
            }
            return ln;
        }
        
        public String getDescription() {
            return info.getDescription();
        }
        
        public String getVersion() {
            return info.getVersion();
        }
        public Component getCustomizer() {
            if (customizer == null) {
                customizer = PluginPanel.createPluginPanel(project, info);
            }
            return customizer;
        }
    }
    
    private class Model implements TableModel, TableCellRenderer {
        
        private List rows;
        private DefaultTableCellRenderer delegate = new DefaultTableCellRenderer();
        
        public Model(List rowlist) {
            rows = rowlist;
        }
        
        public void setValueAt(Object aValue, int row, int column) {
            if (column == 0) {
                WrapperRow rw = (WrapperRow)rows.get(row);
                if (rw instanceof PluginWrapper) {
                    ((PluginWrapper)rw).setEnabled(((Boolean)aValue).booleanValue());
                }
            }
        }

        public String getColumnName(int column) {
            if (column == 0) {
                return "See";
            }
            if (column == 1) {
                return "Name";
            }
            if (column == 2) {
                return "Version";
            }
            if (column == 3) {
                return "Description";
            }
            return "XXX";
        }

        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return Boolean.class;
            }
            return String.class;
        }

        public Object getValueAt(int row, int column) {
            WrapperRow rowObj = (WrapperRow)rows.get(row);
            if (column == 0) {
                return Boolean.valueOf(rowObj.isEnabled());
            }
            if (column == 1) {
                return rowObj.getLongName();
            }
            if (column == 2) {
                return rowObj.getVersion();
            }
            if (column == 3) {
                return rowObj.getDescription();
            }
            
            return "";
        }

        public int getRowCount() {
            return rows.size();
        }

        public int getColumnCount() {
            return 4;
        }

        public void addTableModelListener(javax.swing.event.TableModelListener tableModelListener) {
        }

        public boolean isCellEditable(int row, int column) {
            if (column == 0) {
                return true;
            }
            return false;
        }

        public void removeTableModelListener(javax.swing.event.TableModelListener tableModelListener) {
        }
        
        public Component getTableCellRendererComponent(JTable jTable, Object obj,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            Component com = delegate.getTableCellRendererComponent(jTable,  obj, isSelected, hasFocus, row, column);
            if (com instanceof JLabel) {
                JLabel lbl = (JLabel)com;
                WrapperRow wr = (WrapperRow)rows.get(row);
                lbl.setToolTipText(wr.getDescription());
                lbl.setBackground(UIManager.getColor("Label.background"));
            }
            return com;
        }
        
    }
    
   /** Children used for configuration
     */
    private class ConfigurationChildren extends Children.Keys {
        
        
        public ConfigurationChildren() {
        }
        
        public void addNotify() {
             if (!initialized) {
                initialized = true;
                populateTable();
            }
            Set st = new TreeSet(new Comp());
            st.addAll(subPanelList);
            setKeys(st);
        }
        
        public void removeNotify() {
            setKeys(Collections.EMPTY_LIST);
        }
        
        public void refreshMyKeys() {
            Set st = new TreeSet(new Comp());
            st.addAll(subPanelList);
            setKeys(st);
        }
        
        protected Node[] createNodes(Object key) {
            return new Node[] { new ConfigurationNode((WrapperRow)key) };
        }
    }   
    
    private static class Comp implements Comparator {
        public int compare(Object obj, Object obj1) {
            WrapperRow change1 = (WrapperRow)obj;
            WrapperRow change2 = (WrapperRow)obj1;
            if (change1 instanceof UsedPropsWrapper) {
                return -1;
            }
            if (change2 instanceof UsedPropsWrapper) {
                return 1;
            } 
            if (change1 instanceof DefaultPropsWrapper) {
                return -1;
            }
            if (change2 instanceof DefaultPropsWrapper) {
                return 1;
            }
            return change1.getName().compareTo(change2.getName());        }
        
    }    
    
    /** Node to be used for configuration
     */
    private static class ConfigurationNode extends AbstractNode {
        
        private WrapperRow row;
        
        public ConfigurationNode(WrapperRow description) {
            super(Children.LEAF);
            setName(description.getName());
            setDisplayName(description.getLongName());
            row = description;
            setIconBase("org/mevenide/netbeans/project/resources/Bullet"); // NOI18N
        }
        
        public boolean hasCustomizer() {
            return true;
        }
        
        public Component getCustomizer() {
            return row.getCustomizer();
        }
        
        public WrapperRow getRow() {
            return row;
        }
        
    }    
    
}
