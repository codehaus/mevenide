<project default="build-all" 
		 xmlns:maven="jelly:maven" 
		 xmlns:j="jelly:core"
		 xmlns:multiproject="multiproject"
		 xmlns:ant="jelly:ant"
		 xmlns:define="jelly:define"
		 xmlns:util="jelly:util"
		 xmlns:mevenide="mevenide">

  <!-- 
  	this script builds the various subprojects into thre different eclipse plugins.
  	however we cannot use it yet. we need before that to do a bit refactoring to 
  	decouple the core from ui-eclipse (implicit dependency through commons-discovery)
  	indeed since each eclipse plugin has its own classloaders, this cannot possibly 
  	work. baddesign, bigtroubles..
  	also, if this script actually works, references to subprojects are hardcoded when 
  	looking up dependencies of the subprojects they depend upon.
  -->
  
  <define:taglib uri="mevenide">
  	
  	<!-- 
  	  @var
  	  @projectDescriptor
  	-->
  	<define:tag name="getDependencies">
  		<util:file var="projectDescriptorFile" name="${projectDescriptor}"/>
  		<maven:pom projectDescriptor="${projectDescriptorFile}" var="project"/>
  		${context.getParent().setVariable(var, project.dependencies)}
  	</define:tag>
  	
  	<!-- 
  	  @var
  	  @projectDescriptor
  	-->
  	<define:tag name="getTransitiveDependencies">
  		<mevenide:getDependencies var="mevenideCoreDependencies" projectDescriptor="${basedir}/../mevenide-core/project.xml"/>
  		<mevenide:getDependencies var="mevenideMasterDependencies" projectDescriptor="${basedir}/../mevenide-master/project.xml"/>
  		
  		<j:useList var="dependencies" class="java.util.ArrayList"/>	
		<j:set var="dummy">${dependencies.addAll(mevenideCoreDependencies)}</j:set>
			
  		<j:if test="${pom.artifactId.equals('mevenide-goals-grabber')}">
  			${context.getParent().setVariable(var, dependencies)}	
  		</j:if>
  		
  		<j:if test="${pom.artifactId.equals('mevenide-ui-eclipse')}">
  		  <j:set var="dummy">${dependencies.addAll(mevenideCoreDependencies)}</j:set>
  		  <mevenide:getDependencies var="mevenideGoalsGrabberDependencies" projectDescriptor="${basedir}/../mevenide-goals-grabber/project.xml"/>
  		  <j:set var="dummy">${dependencies.addAll(mevenideGoalsGrabberDependencies)}</j:set>
  		  ${context.getParent().setVariable(var, dependencies)}	  
  		</j:if>
  		
  		
  	</define:tag>
  	
  	<!--
  	  @var
	  @dependency
	  @transitiveDependencies
  	-->
  	<define:tag name="isTransitiveDependency">
  	  <j:forEach var="theDependency" items="${transitiveDependencies}">
  	  	<j:if test="${theDependency.groupId.equals(dependency.groupId) &amp;&amp; theDependency.artifactId.equals(dependency.artifactId) &amp;&amp; theDependency.version.equals(dependency.version)}">
  	    	<j:set var="isTransitive" value="true"/>
  	    </j:if>
  	  </j:forEach>
  	  
  	  ${context.getParent().setVariable(var, isTransitive)}	
  	</define:tag>
  	
  </define:taglib>
 
  <preGoal name="build">
	
	<!-- set eclipse.home property -->
	<ant:property environment="env"/>
  	<ant:property name="eclipse.home" location="${env.ECLIPSE_HOME}"/>
	
	<!-- find swt.plugin.dir -->
	<ant:available property="swt.plugin.dir" 
			 	   value="org.eclipse.swt.gtk_3.0.0/ws/gtk"
				   file="${eclipse.home}/plugins/org.eclipse.swt.gtk_3.0.0/ws/gtk/swt.jar"/>

	<ant:available property="swt.plugin.dir" 
			   	   value="org.eclipse.swt.gtk1x_3.0.0/ws/gtk1x"
			       file="${eclipse.home}/plugins/org.eclipse.swt.gtk1x_3.0.0/ws/gtk1x/swt.jar/swt.jar"/>
		
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.motif_3.0.0/ws/motif"
			       file="${eclipse.home}/plugins/org.eclipse.swt.motif_3.0.0/ws/motif/swt.jar"/>		   
				   		   				   
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.photon_3.0.0/ws/photon"
			       file="${eclipse.home}/plugins/org.eclipse.swt.photon_3.0.0/ws/photon/swt.jar"/>		   
				   				   		   				   
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.win32_3.0.0/ws/win32"
			       file="${eclipse.home}/plugins/org.eclipse.swt.win32_3.0.0/ws/win32/swt.jar"/>
	
  	<!-- 
  	  ensure that all dependencies are present in the repository 
  	  by copying all needed eclipse-plugins jars
  	-->
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.core.resources_3.0.0/resources.jar" 
  	          tofile="${maven.repo.local}/eclipse/jars/eclipse-resources-3.0.0.jar"/>
  
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.debug.core_3.0.0/dtcore.jar" 
  	          tofile="${maven.repo.local}/eclipse/jars/eclipse-dtcore-3.0.0.jar"/>
  
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.debug.ui_3.0.0/dtui.jar" 
  	          tofile="${maven.repo.local}/eclipse/jars/eclipse-dtui-3.0.0.jar"/>
  
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.jdt.core_3.0.0/jdtcore.jar" 
  	          tofile="${maven.repo.local}/eclipse/jars/eclipse-jdtcore-3.0.0.jar"/>
  
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.jdt.ui_3.0.0/jdt.jar" 
  	          tofile="${maven.repo.local}/eclipse/jars/eclipse-jdt-3.0.0.jar"/>
  	      
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.jdt.launching_3.0.0/launching.jar" 
  	  	     tofile="${maven.repo.local}/eclipse/jars/eclipse-launching-3.0.0.jar"/>
  
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.help_3.0.0/help.jar" 
  	  	      tofile="${maven.repo.local}/eclipse/jars/eclipse-help-3.0.0.jar"/>
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.jface_3.0.0/jface.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-jface-3.0.0.jar"/>  	
  	
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.jface.text_3.0.0/jfacetext.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-jfacetext-3.0.0.jar"/>  	
  	
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.text_3.0.0/text.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-text-3.0.0.jar"/>  	
  	
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.core.runtime_3.0.0/runtime.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-runtime-3.0.0.jar"/> 
  		  
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.ui.workbench_3.0.0/workbench.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-workbench-3.0.0.jar"/> 
    
  	<ant:copy file="${eclipse.home}/plugins/org.eclipse.ui.workbench.texteditor_3.0.0/texteditor.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-texteditor-3.0.0.jar"/>  	
  	
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.ui.views_3.0.0/views.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-views-3.0.0.jar"/> 
  		  
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.ui.editors_3.0.0/editors.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-editors-3.0.0.jar"/> 
  		  
    <ant:copy file="${eclipse.home}/plugins/org.eclipse.ui.externaltools_3.0.0/externaltools.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-externaltools-3.0.0.jar"/> 

    <ant:copy file="${eclipse.home}/plugins/${swt.plugin.dir}/swt.jar" 
  		      tofile="${maven.repo.local}/eclipse/jars/eclipse-swt-3.0.0.jar"/>  
  		  
  </preGoal>
 
	
 
  <goal name="build-all"
    	description="Build all Mevenide modules">
    <attainGoal name="build"/>
  </goal>
  
  
  
  <goal name="build-core"
    	description="Build Mevenide-core module">
    <maven:reactor basedir="${basedir}/.."
      			   includes="mevenide-core/project.xml"
      			   excludes="goals-grabber/project.xml,mevenide-master/project.xml,mevenide-ui-eclipse/project.xml"
      			   goals="clean,jar:install"
      			   banner="Building"
      			   ignoreFailures="false"/>
	 <!-- 
	 	copy the resulting artifact into plugin lib directory 
	 	Q : how to get the currentVersion and artifactName ? 
	 	R ? copy this to goal to mevenide-core/maven.xml as a postGoal (on ?)
	 -->
     <ant:copy todir="../mevenide-ui-eclipse/lib" file="../mevenide-core/target/mevenide-core-0.1.jar"/>
  </goal>
    
    
    
  <goal name="build" description="Build each Mevenide module">
	<attainGoal name="multiproject:goal"/>
  </goal>
  
  
  <!-- build the aggregated site -->
  <goal name="build-site" description="Build Mevenide Site">
  	<attainGoal name="multiproject:site"/>
  </goal>

  <!-- build the aggregated distribution files -->
  <postGoal name="build">
  	<attainGoal name="mevenide:aggregate-dists"/>
  </postGoal>
  
  <!-- inherited postGoal -->
  <postGoal name="jar:install">
  	<attainGoal name="mevenide:prepare-dist"/>
	<attainGoal name="mevenide:dist"/>
	<attainGoal name="mevenide:finalize"/>
  </postGoal>
  
  
  <!-- 
  	iterate subproject dependencies and copy dependencies required by eclipse plugin into the lib/ directory.
  	rather bad.. this is a hack since theres no support yet for transitive dependencies.
  -->
  <goal name="mevenide:prepare-dist">
  	<ant:delete dir="${basedir}/lib" quiet="true"/>
  	
  	<mevenide:getTransitiveDependencies var="transitiveDependencies" projectDescriptor="${pom}"/>
	<j:forEach var="dependency" items="${pom.dependencies}">
	 <j:set var="isTransitive" value="false"/>
  	  <j:if test="${!(dependency.groupId.equals('eclipse') || dependency.groupId.equals('mevenide') || dependency.groupId.startsWith('mock') || dependency.groupId.startsWith('junit'))}">
  	  	<mevenide:isTransitiveDependency var="isTransitive" dependency="${dependency}" transitiveDependencies="${transitiveDependencies}"/>
  	  	<j:if test="${isTransitive != 'true'}">
  	  		
  	  		<ant:copy file="${maven.repo.local}/${dependency.groupId}/${dependency.type}s/${dependency.artifactId}-${dependency.version}.${dependency.type}" 
			 	   	  todir="lib"/>
	  	</j:if>
	  </j:if>
	</j:forEach>
  </goal>
  
  
  <goal name="mevenide:dist">
		
      <ant:mkdir dir="dist"/>
      
      <!-- suffix -->
  	  <j:set var="distVersion" value="0.1-alpha-1"/>
  	  
      <ant:property environment="env"/>
   	  <ant:property name="eclipse.home" location="${env.ECLIPSE_HOME}"/>
        
      <j:set var="directoryName">org.${pom.artifactId.replaceAll('-', '.')}</j:set> 
       
      <ant:mkdir dir="${basedir}/temp/${directoryName}_${distVersion}"/>
        
      <!-- copy plugin information files, required dependencies and generated artifact to ${basedir}/temp -->
      <ant:copy todir="${basedir}/temp/${directoryName}_${distVersion}">
       	<ant:fileset dir="${basedir}" includes="icons/*.*"/>
       	<ant:fileset dir="${basedir}" includes="plugin.xml,plugin.properties,license.txt"/>
       	<ant:fileset dir="${basedir}" includes="lib/*.*"/>
       	<ant:fileset dir="${maven.build.dest}" includes="${pom.artifactId}-${pom.currentVersion}.jar"/>
      </ant:copy>
       
      <!-- copy mevenide-ui-eclipse subproject specific files -->
      <j:if test="${pom.artifactId.equals('mevenide-ui-eclipse')}">
        <ant:jar update="true" destfile="${basedir}/temp/${directoryName}_${distVersion}/${pom.artifactId}-${pom.currentVersion}.jar">
       	  <fileset dir="${basedir}" includes="MavenPluginResources.properties"/>
        </ant:jar>
      </j:if>
      
      <!-- build separate plugin distribution file -->
      <ant:zip destfile="${basedir}/dist/${directoryName}-${distVersion}.zip">
        <fileset dir="${basedir}/temp"/>
      </ant:zip>
        
      <!-- j:if test="${!deploiement}">
      	<ant:copy file="${basedir}/dist/${directoryName}-${dist.version}.zip"
       		      todir="${eclipse.home}/plugins/${directoryName}_${dist.version}"/>
      </j:if -->

      <ant:delete dir="${basedir}/temp"/>
   </goal>
   
   
   <goal name="mevenide:aggregate-dists">
   	
   </goal>
 
</project>
