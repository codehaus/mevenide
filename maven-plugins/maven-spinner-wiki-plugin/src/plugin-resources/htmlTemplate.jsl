	<j:jelly xmlns:j="jelly:core" xmlns:ant="jelly:ant"  xmlns:jsl="jelly:jsl" xmlns:x="jelly:xml">
        <jsl:stylesheet var="htmlTransformationSheet" select="$myHtmlFile">
        	
        	<jsl:template match="@">
        		<!-- do nothing. this template is here just to ensure that attribute values wont be outputted as text -->
        	</jsl:template>
        	
            <jsl:template match="/" trim="false">
 	            <jsl:applyTemplates select="html"/>
            </jsl:template>
            
            <jsl:template match="style">
            	<x:set var="importLine" select="string(.)"/>
            	
            	<j:set var="cssFile">${importLine.substring(importLine.lastIndexOf('/'), importLine.lastIndexOf('"'))}</j:set>
            	<j:set var="cssFile">${cssFile.substring(1, cssFile.length())}</j:set>
            	
            	<!-- remove trailing slash from ${maven.spinner.wiki.absolute.css.directory.location} -->
			    <j:set var="siteCssLocation" value="${maven.spinner.wiki.absolute.css.directory.location}"/>
			    <j:if test="siteCssLocation.endsWith('/') || siteCssLocation.endsWith('\\')}">
			        <j:set var="siteCssLocation" value="${siteCssLocation.substring(0, siteCssLocation.length() - 1)}"/>
			    </j:if>
			    
            	<j:set var="newImport">url("${siteCssLocation}/${cssFile}");</j:set>
            	<x:element name="style">
            	     <x:attribute name="type">text/css</x:attribute>
            	     <!-- 
            	     	@constraint : remove whitespaces from url because of jelly special spaces addition 
            	     -->
            	     @import ${newImport.replaceAll(" ", "")}
            	</x:element>
            </jsl:template>
            
            
            <jsl:template match="a">
                
                <x:set var="oldItemLink" select="string(./@href)"/>
                <x:element name="a">
                    <j:choose>
                        <j:when test="${!oldItemLink.startsWith('http') and !oldItemLink.startsWith('/') and !oldItemLink.startsWith('$')}">
                            <x:attribute name="href">${wikiRelativePath}/${oldItemLink}</x:attribute>
                        </j:when>
                        <j:otherwise>
                            <x:attribute name="href">${oldItemLink}</x:attribute>
                        </j:otherwise>
                    </j:choose>
                    <x:forEach var="attr" select="">
                        <x:if select="name() != 'href'">
                            <x:set var="${attrName}" select="name()"/>
                            <x:set var="${attrValue}" select="string()"/>
                            <x:attribute name="${attrName}">${attrValue}</x:attribute>
                        </x:if>
                    </x:forEach>
                    <jsl:applyTemplates />
                </x:element>
                
            </jsl:template>
            
            <jsl:template match="img">
                <x:element name="img">
					<x:forEach select="@*">
					    <x:set var="oldName" select="name(.)"/>
					    <x:set var="oldValue" select="string(.)"/>
					    <j:choose>
						    <j:when test="${oldName == 'src' and !oldValue.startsWith('http://') and !oldValue.startsWith('/') and !oldValue.startsWith('$')}">
						        <x:attribute name="${oldName}">${wikiRelativePath}/${oldValue}</x:attribute>
						    </j:when>
						    <j:otherwise>
							    <x:attribute name="${oldName}">${oldValue}</x:attribute>
						    </j:otherwise>
					    </j:choose>    
					</x:forEach>
                </x:element>
            </jsl:template>
            
            <jsl:template match="text()">
                <x:set var="p" select="."/>
                ${p.get(0).getText()}
            </jsl:template>
            
            <jsl:template match="*">
                <x:copy>
					<jsl:applyTemplates />
			    </x:copy>
            </jsl:template>
           
            
        </jsl:stylesheet>
    </j:jelly>