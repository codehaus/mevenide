<?xml version="1.0"?>
<!--
 * ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 *
 -->
<project 
  xmlns:j="jelly:core"
  xmlns:util="jelly:util"
  xmlns:log="jelly:log"
  xmlns:ant="jelly:ant"
  xmlns:maven="jelly:maven"
  xmlns:mevenide="jelly:org.mevenide.tags.netbeans.MevenideNbTagLibrary"
  xmlns:x="jelly:xml"
  xmlns:artifact="artifact">

  <!--==================================================================-->
  <!-- Default goal : Builds a nbm file                             -->
  <!--==================================================================-->    
  <goal 
    name="nbm" 
    prereqs="nbm:nbm" 
    description="Build NBM file, ready to install into the Netbeans IDE"/>

  <!--==================================================================-->
  <!-- Initializations                                                  -->
  <!--==================================================================-->    
  <goal name="nbm:init">
  <!-- maven.final.name is a fallback, should be module name (pom.packageName) (-->
    <j:set var="maven.nbm.final.name"  value="${maven.final.name}"/> 
<!--    <j:set var="maven.nbm.build.dir" value="${maven.build.dir}/nbm" /> -->
    <j:set var="netbeansDir" value="netbeans" /> 
    <j:set var="clusterVar" value="${maven.nbm.cluster.name}"/> 
    <j:choose>
        <j:when test="! empty clusterVar">
            <j:set var="maven.nbm.cluster.dir" value="${netbeansDir}/${maven.nbm.cluster.name}"/>
            <j:set var="cluster.dirXXX" value="${maven.nbm.cluster.name}"/>
        </j:when>
        <j:otherwise>
            <j:set var="maven.nbm.cluster.dir" value="${netbeansDir}/${pom.groupId}"/>
            <j:set var="cluster.dirXXX" value="${pom.groupId}"/>
        </j:otherwise>
    </j:choose>
    <j:set var="maven.nbm.module.location" value="modules"/>
    <j:choose>
        <j:when test="${maven.nbm.autoload}">
            <j:set var="maven.nbm.module.location" value="modules/autoload"/>
        </j:when>
        <j:when test="${maven.nbm.eager}">
            <j:set var="maven.nbm.module.location" value="modules/eager"/>
        </j:when>
        <j:otherwise>
            <j:set var="maven.nbm.module.location" value="modules"/>
        </j:otherwise>
    </j:choose>
    <j:set var="maven.nbm.jar.location" value="${maven.nbm.cluster.dir}/${maven.nbm.module.location}"/>
    
    <ant:mkdir dir="${maven.nbm.build.dir}/${maven.nbm.jar.location}"/>
  </goal>

  <goal name="nbm:jar"
      prereqs="jar:jar, nbm:init" 
      description="Build the Netbeans jar.">
      <!-- need to delete if exists, otherwise we get the weirdo multiplied Class-Path manifest attribute. -->
    <ant:delete file="${maven.nbm.build.dir}/${maven.final.name}.jar" quiet="true"/>  
    <!-- copy the original jar made by jar:jar goal to target/nbm -->
    <ant:copy toDir="${maven.nbm.build.dir}" file="${maven.build.dir}/${maven.final.name}.jar"/>
    <!--
     create a timestamp value for OpenIDE-Module-Implementation-Version: manifest entry
    -->
    <ant:tstamp>
      <ant:format property="maven.nbm.timestamp" pattern="yyyyMMddhhmm" />
    </ant:tstamp>
    <j:set var="man" value="${maven.nbm.manifest}"/>
    <j:choose>
        <j:when test="${!empty man}">
            <ant:available property="maven.nbm.manifest.available" 
                       file="${man}"/>
        </j:when>
    </j:choose>
                       
<!-- if a netbeans specific manifest is defined, examine this one, otherwise the already included one.
 ignoring the case when some of the netbeans attributes are already defined in the jar and more is included.
-->                   
    <j:choose>
      <j:when test="${maven.nbm.manifest.available}">
        <mevenide:examine-manifest manifestFile="${maven.nbm.manifest}" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:when>
      <j:otherwise>
        <mevenide:examine-manifest jarFile="${maven.nbm.build.dir}/${maven.final.name}.jar" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:otherwise>
     </j:choose>
      
    <ant:echo message="NBM plugin updates jar." />
    <ant:jar destfile="${maven.nbm.build.dir}/${maven.final.name}.jar"
             update="true">
      <j:if test="${maven.nbm.manifest.available}">
        <ant:setProperty name="manifest" value="${maven.nbm.manifest}" />
      </j:if>
      <!-- set te final name according to the module def. -->
      <j:set var="modulepackage" value="${maven.nbm.modulename}"/>
      <j:if test="${!empty modulepackage}">
            <mevenide:check-module-name finalNameVar="maven.nbm.final.name" value="${modulepackage}"/>
      </j:if>
      
      
       <ant:manifest>
       <!-- these attributes get defined this way only if not present in the manifest file -->
          <mevenide:adapt-version var="maven.nbm.version.spec" version="${pom.currentVersion}" type="spec"/>
          <ant:attribute name="OpenIDE-Module-Specification-Version" value="${maven.nbm.version.spec}"/>
          <mevenide:adapt-version var="maven.nbm.version.impl" version="${pom.currentVersion}" type="impl"/>
          <ant:attribute name="OpenIDE-Module-Implementation-Version" value="${maven.nbm.version.impl}"/>
          <ant:attribute name="OpenIDE-Module-Build-Version" value="${maven.nbm.timestamp}"/>
          <ant:attribute name="OpenIDE-Module" value="${modulepackage}"/>
          <ant:attribute name="OpenIDE-Module-IDE-Dependencies" value="IDE/1 > 3.40"/>
<!--          <ant:attribute name="OpenIDE-Module-Public-Packages" value="-"/> -->
          
          <!-- generate Class-Path manifest entry -->
<!--          <j:set var="extDependencies" value=""/> -->
         <!-- process dependencies -->
          <j:set var="nbdep.separator" value=" " />
          <j:forEach var="artifact" items="${pom.artifacts}">
            <j:set var="dependency" value="${artifact.dependency}"/>
            <!-- netbeans library that is part of the module, added to Class-Path attribute -->
            <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
                  <j:set var="extDependencies" value="${extDependencies} ext/${artifact.name}"/>
            </j:if>
            <!-- netbeans dependency -instead of adding to classpath, add to Openide-Module-Dependencies attribute 
            -->
            <j:set var="moduleDepVal" value="${dependency.getProperty('netbeans.module.dep')}" />
            <j:if test="${!empty moduleDepVal}">
                <mevenide:check-dependency-property value="${moduleDepVal}"
                                                    typeVar="moduleDep" 
                                                    dependencyValueVar="dependencyValue"
                                                    completeVar="isCompleteDep"/>
<!--                <ant:echo message="${dependency.artifactId} is a module dependency - jar is ${artifact.path}" /> -->
                <mevenide:examine-manifest jarFile="${artifact.path}" 
                                           isLocalizedVar="nbdepIsLocalized"
                                           isNetbeansModuleVar="nbdepIsNetbeansModule"
                                           moduleVar="nbdepModule"
                                           implVersionVar="nbdepImplVersion"
                                           specVersionVar="nbdepSpecVersion"
                /> 
                <j:if test="${empty(nbdepModule)}">
                    <j:set var="nbdepModule" value="${dependency.artifactId}" />
                </j:if>
                <j:choose>
                    <j:when test="${moduleDep == 'loose'}">
                        <j:choose>
                            <j:when test="${isCompleteDep == true}">
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${dependencyValue}"/>
                            </j:when>
                            <j:otherwise>
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule}"/>
                            </j:otherwise>
                        </j:choose>
                    </j:when>
                    <j:when test="${moduleDep == 'impl'}">
                        <j:choose>
                            <j:when test="${isCompleteDep == true}">
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${dependencyValue}"/>
                            </j:when>
                            <j:otherwise>
                                <j:if test="${nbdepIsNetbeansModule != true}">
                                    <mevenide:adapt-version var="nbdepImplVersion" version="${dependency.version}" type="impl"/>
                                </j:if>
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} = ${nbdepImplVersion}"/>
                            </j:otherwise>
                        </j:choose>
                    </j:when>
                    <j:when test="${moduleDep == 'spec'}">
                        <j:choose>
                            <j:when test="${isCompleteDep == true}">
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${dependencyValue}"/>
                            </j:when>
                            <j:otherwise>
                                <j:if test="${nbdepIsNetbeansModule != true}">
                                    <mevenide:adapt-version var="nbdepSpecVersion" version="${dependency.version}" type="spec"/>
                                </j:if>
                                <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} > ${nbdepSpecVersion}"/>
                            </j:otherwise>
                        </j:choose>
                    </j:when>
                    <j:otherwise>
               	  	<ant:fail message="Unrecognized netbeans module dependecy type : ${moduleDep}. Should be one of {'spec', 'impl', 'loose'}"/>
                    </j:otherwise>
                </j:choose>
                <j:set var="nbdep.separator" value="," />
            </j:if>
          </j:forEach>
          <!-- generate Class-Path manifest entry -->
          <j:if test="${!empty extDependencies}">
                <ant:attribute name="Class-Path" value="${extDependencies}" />
          </j:if>
          <!-- generate OpenIDE-Module-Module-Dependencies manifest entry -->
          <j:if test="${!empty moduleDependencies}">
<!--                <ant:echo message="module deps= ${moduleDependencies}" /> -->
                <ant:attribute name="OpenIDE-Module-Module-Dependencies" value="${moduleDependencies}" />
          </j:if>
          <j:choose>
              <j:when test="${maven.nbm.isLocalized}">
              </j:when>
              <j:otherwise>
                <ant:echo message="NBM: Now generating the user-visible module properties. Please note that these should be actually localized. See Netbeans.org API docs for information how to localize your module's manifest."/>
                <ant:attribute name="OpenIDE-Module-Display-Category" value="${pom.groupId}" />
                <ant:attribute name="OpenIDE-Module-Name" value="${pom.name}" />
                <ant:attribute name="OpenIDE-Module-Short-Description" value="${pom.shortDescription}" />
                <ant:attribute name="OpenIDE-Module-Long-Description" value="${pom.description}" />
              </j:otherwise>
          </j:choose>
       </ant:manifest>
    </ant:jar>
   </goal>

  <!--==================================================================-->

  <!-- Prepare the nbm structure                                        -->

  <!--==================================================================-->    
   
  <goal name="nbm:prepare-nbm-resources"
        prereqs="nbm:init"
        description="Prepare the filesystem structure for building the NBM.">
        
  <ant:taskdef name="createmodulexml" classname="org.netbeans.nbbuild.CreateModuleXML" >
        <ant:classpath>
            <ant:pathelement location="${plugin.getDependencyPath('netbeans:nbantext')}"/>
            <ant:path refid="maven.dependency.classpath"/>
        </ant:classpath>
  </ant:taskdef>
<!-- this way we hook xalan copied from docbook - is probably a major hack!-->
${systemScope.setProperty('javax.xml.transform.TransformerFactory','org.apache.xalan.processor.TransformerFactoryImpl')}
  <ant:taskdef name="genlist" classname="org.netbeans.nbbuild.MakeListOfNBM" >
        <ant:classpath>
<!--            <ant:pathelement location="${plugin.getDependencyPath('xalan:xalan')}"/> -->
            <ant:pathelement location="${plugin.getDependencyPath('netbeans:nbantext')}"/>
            <ant:path refid="maven.dependency.classpath"/>
        </ant:classpath>
  </ant:taskdef>
    <!-- copy the jar to the right location -->
   <ant:copy toDir="${maven.nbm.build.dir}/${maven.nbm.jar.location}" file="${maven.nbm.build.dir}/${maven.final.name}.jar"/>
   <ant:move file="${maven.nbm.build.dir}/${maven.nbm.jar.location}/${maven.final.name}.jar"
             toFile="${maven.nbm.build.dir}/${maven.nbm.jar.location}/${maven.nbm.final.name}.jar"/>
    <!-- copy dependency jars in the relevant location -->
    <j:forEach var="artifact" items="${pom.artifacts}">
      <j:set var="dependency" value="${artifact.dependency}"/>
      <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
        <ant:copy todir="${maven.nbm.build.dir}/${maven.nbm.jar.location}/ext" file="${artifact.path}"/>
        <!--classpath attribute added in the previous step (jar update)-->
      </j:if>
    </j:forEach>
    <ant:mkdir dir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}/config/Modules"/>
    <ant:createmodulexml xmldir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}/config/Modules">
        <j:choose>
            <j:when test="${maven.nbm.autoload}">
               <ant:autoload dir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}">
                    <ant:include name="${maven.nbm.module.location}/${maven.nbm.final.name}.jar"/>
                </ant:autoload>
            </j:when>
            <j:when test="${maven.nbm.eager}">
               <ant:eager dir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}">
                    <ant:include name="${maven.nbm.module.location}/${maven.nbm.final.name}.jar"/>
               </ant:eager>
            </j:when>
            <j:otherwise>
               <ant:enabled dir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}">
                    <ant:include name="${maven.nbm.module.location}/${maven.nbm.final.name}.jar"/>
               </ant:enabled>
            </j:otherwise>
        </j:choose>
    </ant:createmodulexml>
    <ant:loadproperties srcfile="${plugin.resources}/directories.properties"/>
    <ant:property name="cluster.dir" value="${cluster.dirXXX}"/>
    <ant:property name="module.name" value="${maven.nbm.final.name}"/>
    <ant:patternset id="module.files">
        <ant:include name="**"/>
    </ant:patternset>
    <ant:genlist outputfiledir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}" 
                 module="${maven.nbm.module.location}/${maven.nbm.final.name}.jar">
        <ant:fileset dir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}">
            <patternset refid="module.files"/>        
        </ant:fileset>
    </ant:genlist>
  </goal>
   
   
  <!--==================================================================-->

  <!-- Build the nbm                                               -->

  <!--==================================================================-->    

  <goal 
    name="nbm:nbm"
    prereqs="nbm:jar, nbm:prepare-nbm-resources"
    description="Build the NBM">
    
  <ant:taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" >
        <ant:classpath>
            <ant:pathelement location="${plugin.getDependencyPath('netbeans:nbantext')}"/>
            <ant:path refid="maven.dependency.classpath"/>
        </ant:classpath>
  </ant:taskdef>
<!--DEBUG
    <ant:echo message="autoload=${maven.nbm.autoload}" />
    <ant:echo message="module=${maven.nbm.jar.location}/${maven.final.name}.jar" />
    <ant:echo message="url=${pom.url}" />
    <ant:echo message="license=${maven.nbm.license}" />
             topdir="${maven.nbm.build.dir}"
    <ant:echo message="file=${maven.nbm.build.dir}/${maven.nbm.final.name}.nbm" />
    <ant:echo message="productdir=${maven.nbm.build.dir}/${netbeansDir}" />
    <ant:echo message="module=${maven.nbm.cluster.name}/${maven.nbm.module.location}/${maven.nbm.final.name}.jar" />
    -->
    
    <ant:makenbm file="${maven.nbm.build.dir}/${maven.final.name}.nbm"
             topdir="${maven.nbm.build.dir}"
             productdir="${maven.nbm.build.dir}/${maven.nbm.cluster.dir}"
             module="${maven.nbm.module.location}/${maven.nbm.final.name}.jar"
             needsrestart="${maven.nbm.requiresrestart}"
             moduleauthor="${pom.organization.name}">
      <j:if test="${! empty(pom.url)}">
        <ant:setProperty name="homepage" value="${pom.url}" />
        <ant:setProperty name="distribution" value="${maven.nbm.distributionURL}" />
      </j:if>
      <j:set var="licensename" value="${maven.nbm.license.name}" />
      <j:if test="${empty(licensename)}">
          <j:set var="licensename" value="License for ${pom.name}" />
      </j:if>
      <util:available file="${maven.nbm.license}">
          <ant:license file="${maven.nbm.license}" name="${licensename}"/>
      </util:available>   
     <ant:signature keystore="${maven.nbm.sign.keystore}" 
                    storepass="${maven.nbm.sign.storepass}" 
                    alias="${maven.nbm.sign.alias}"/> -->
    </ant:makenbm>
  </goal>
  
  <goal 
    name="nbm:install"
    prereqs="nbm:nbm"
    description="Install the NBM and the netbeans enhanced jar into the repository">

    <artifact:install
        artifact="${maven.nbm.build.dir}/${maven.final.name}.nbm"
        type="nbm"
        project="${pom}"/>   
    <artifact:install
        artifact="${maven.nbm.build.dir}/${maven.final.name}.jar"
        type="jar"
        project="${pom}"/>   
    
  </goal>
<!--  <goal name="nbm:create-library-artifacts" 
  		prereqs="nbm:init" 
  		description="Creates simple netbeans modules for dependencies with the 'netbeans.lib.generate' property.">
    <j:forEach var="artifact" items="${pom.artifacts}">
        <j:set var="dependency" value="${artifact.dependency}"/>
        <j:if test="${dependency.getProperty('netbeans.lib.generate') == 'true'}">
        
            <mevenide:examine-manifest jarFile="${artifact.path}" 
                                       isLocalizedVar="nbdepIsLocalized"
                                       isNetbeansModuleVar="nbdepIsNetbeansModule"
                                       moduleVar="nbdepModule"
                                       implVersionVar="nbdepImplVersion"
                                       specVersionVar="nbdepSpecVersion"
            /> 
            <j:if test="nbdepIsNetbeansModule == true">
                <ant:fail message="Dependency ${dependency} is already a netbeans module. Do not regenerate!"/>
            </j:if>
            <j:set var="dependencyModuleDir" value="${maven.nbm.build.dir}/${dependency.groupId}_${dependency.version}"/>
            <ant:mkdir dir="${dependencyModuleDir}"/>
            <j:if test="${empty(nbdepModule)}">
                <j:set var="nbdepModule" value="${dependency.artifactId}"/>
            </j:if>
     		<mevenide:adapt-version var="depSpecVersion" version="${dependency.version}" type="spec"/>
     		<mevenide:adapt-version var="depImplVersion" version="${dependency.version}" type="impl"/>
            <mevenide:find-license var="liblicense" jarFile="${artifact.path}" />
            <j:if test="${empty(liblicense)}" >
                <j:set var="licenseFile" value="${maven.nbm.licenses.dir}/${dependency.groupId}/${dependency.artifactId}.lic"/>
                <ant:available property="isLicensePresent" file="${licenseFile}"/>
                <j:if test="${isLicensePresent}">
                    <util:loadText file="${licenseFile}" var="liblicense"/>
                </j:if>
            </j:if>
            <j:if test="${empty(liblicense)}">
                <ant:fail message="Dependency ${dependency} doesn't have a license file defined in the jar. Please copy the license to file: licenses/${dependency.groupId}/${dependency.artifactId}.lic" />
            </j:if>
            <j:file name="${dependencyModuleDir}/license.txt" omitXmlDeclaration="true">
${liblicense}
            </j:file>
            <j:file name="${dependencyModuleDir}/project.properties" omitXmlDeclaration="true">
maven.nbm.autoload=true
maven.nbm.license=${dependencyModuleDir}/license.txt
            </j:file>
            <j:file name="${dependencyModuleDir}/project.xml" prettyPrint="true">
                <x:element name="project">
                    <x:element name="pomVersion">3</x:element>
                    <x:element name="id">${dependency.artifactId}</x:element>
                    <x:element name="artifactId">lib-${dependency.artifactId}</x:element>
                    <x:element name="groupId">${dependency.groupId}</x:element>
                    <x:element name="currentVersion">${dependency.version}</x:element>
                    <x:element name="package">${nbdepModule}</x:element>
                    <x:element name="name">${dependency.artifactId} library for ${pom.name}</x:element>
                    <x:element name="shortDescription">Library for project ${pom.id} (${pom.name}) </x:element>
                    <x:element name="description">Library for project ${pom.id} (${pom.name}) </x:element>
                    <x:element name="url">${pom.url}</x:element>
                    <x:element name="dependencies">
                        <x:element name="dependency"> 
                            <x:element name="groupId">${dependency.groupId}</x:element>
                            <x:element name="artifactId">${dependency.artifactId}</x:element>
                            <x:element name="version">${dependency.version}</x:element>
                            <x:element name="type">${dependency.type}</x:element>
                            <x:element name="properties">
                                <x:element name="netbeans.module.ext">true</x:element>
                            </x:element>
                        </x:element>
                    </x:element>
                </x:element>
            </j:file>
            <maven:maven descriptor="${dependencyModuleDir}/project.xml"
                         ignoreFailures="false"
                         goals="nbm" />
       </j:if>
    </j:forEach>
  </goal>  
-->  
  <goal name="nbm:collect-nbms" 
        description="Will collect the module nbm and all library nbms (if any) to a single release directory maven.nbm.build.release.dir == target/nbm_release">
        <j:set var="reldir" value="${maven.nbm.build.release.dir}" />
        <j:if test="${empty(reldir)}">
            <j:set var="maven.nbm.build.release.dir" value="${maven.build.dir}/nbm_release" />
        </j:if>
        <ant:copy toDir="${maven.nbm.build.release.dir}" flatten="true">
            <ant:fileset dir="${maven.nbm.build.dir}"
                       includes="**/*.nbm"
            />       
        </ant:copy>
  </goal>
 
  <goal name="nbm:autoupdate">
      <ant:taskdef name="updatedist" classname="org.netbeans.nbbuild.MakeUpdateDesc" >
        <ant:classpath>
            <ant:pathelement location="${plugin.getDependencyPath('netbeans:nbantext')}"/>
            <ant:path refid="maven.dependency.classpath"/>
        </ant:classpath>
      </ant:taskdef>
      
      <ant:updatedist desc="${maven.nbm.build.release.dir}/${maven.nbm.autoupdate.name}.xml">
      <j:set var="nbmdistbase" value="${maven.nbm.autoupdate.distbase}"/>
      <j:if test="${! empty(nbmdistbase)}">
        <ant:setProperty name="distbase" value="${nbmdistbase}" />
      </j:if>
          <ant:fileset dir="${maven.nbm.build.release.dir}"
                       includes="**/*.nbm"
          />       
      </ant:updatedist>
      
  </goal> 
  
  
  <goal name="nbm:installNetbeansArtifacts"
        description="Installs all modules from netbeans installation into maven local repository. Expects a parameter netbeans.home pointing to root directory.">
     <j:set var="netbeanshome" value="${netbeans.home}"/>
     <j:if  test="${empty netbeanshome}">
       <ant:fail message="You need to define the netbeans.home property pointing to the root directory of the netbeans installation"/>
     </j:if>
     
    <ant:fileset dir="${netbeanshome}" id="jar.files">
      <ant:include name="*/modules/*.jar"/>
      <ant:include name="*/modules/autoload/*.jar"/>
      <ant:include name="*/modules/eager/*.jar"/>
    </ant:fileset>
  
    <ant:pathconvert pathsep="," property="jarlist" refid="jar.files"/>     
    <util:tokenize var="tokenized" delim=",">${jarlist}</util:tokenize>
    
    <j:forEach items="${tokenized}" var="jarpath" indexVar="index">    
        <mevenide:examine-manifest jarFile="${jarpath}" 
                                   isNetbeansModuleVar="nbdepIsNetbeansModule"
                                   moduleVar="nbdepModule"
                                   specVersionVar="nbdepSpecVersion"
        /> 
        <ant:echo message="${jarpath}=${nbdepIsNetbeansModule}"/>
        <j:if test="${nbdepIsNetbeansModule == true}">
           <util:file name="${jarpath}" var="fileVar" />
           <j:set var="nameLong" value="${fileVar.name}"/>
           <j:set var="name" value="${nameLong.substring(0, nameLong.indexOf('.jar'))}"/>
<!--           <ant:basename property="name" file="${jarpath}" suffix=".jar"/> -->
           <ant:copy file="${jarpath}" 
                     toFile="${maven.repo.local}/netbeans/jars/${name}-${nbdepSpecVersion}.jar" />
           <ant:echo message="Module: ${name}-${nbdepSpecVersion}.jar"/>
        </j:if>
     </j:forEach>
  </goal>
  
</project>
