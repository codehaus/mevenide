<?xml version="1.0"?>

<project 
  xmlns:j="jelly:core"
  xmlns:util="jelly:util"
  xmlns:log="jelly:log"
  xmlns:ant="jelly:ant"
  xmlns:maven="jelly:maven"
  xmlns:mevenide="jelly:org.mevenide.tags.netbeans.MevenideNbTagLibrary"
  xmlns:artifact="artifact">

  <!--==================================================================-->
  <!-- Default goal : Builds a nbm file                             -->
  <!--==================================================================-->    
  <goal 
    name="nbm" 
    prereqs="nbm:nbm" 
    description="Build NBM file"/>

  <!--==================================================================-->
  <!-- Initializations                                                  -->
  <!--==================================================================-->    
  <goal name="nbm:init">
<!--    <j:set var="maven.nbm.final.name"  value="${maven.build.dir}/${maven.final.name}.nbm"/> -->
    <j:set var="maven.nbm.build.dir" value="${maven.build.dir}/nbm" />
    <j:set var="maven.nbm.jar.location" value="netbeans/modules"/>    
    <j:choose>
        <j:when test="${maven.nbm.autoload}">
           <j:set var="maven.nbm.jar.location" value="netbeans/modules/autoload"/>
        </j:when>
        <j:when test="${maven.nbm.eager}">
           <j:set var="maven.nbm.jar.location" value="netbeans/modules/eager"/>
        </j:when>
        <j:otherwise>
            <j:set var="maven.nbm.jar.location" value="netbeans/modules"/>    
        </j:otherwise>
    </j:choose>
    <ant:mkdir dir="${maven.nbm.build.dir}/${maven.nbm.jar.location}"/>
  </goal>

  <goal name="nbm:jar"
      prereqs="jar:jar, nbm:init" 
      description="Build the Netbeans jar.">
<!--    <j:set var="maven.jar.manifest" value="${maven.nbm.manifest}"/> -->
<!--    <j:set var="bundle" value="${maven.nbm.manifest.bundle.basedir}"/>
    <j:if test="${empty(bundle)}">
      <fail message="">
 
The maven.nbm.manifest.bundle.basedir and  maven.nbm.manifest.bundle.include have to be set.
      </fail>
    </j:if>
-->
<!--    <util:file var="thisPom" name="${basedir}/project.xml"/>  -->
<!--    <ant:echo message="manifest=${maven.jar.manifest}" /> -->
<!--    <maven:maven descriptor="${thisPom}" goals="jar:install"/> -->
    <!-- copy the original jar made by jar:jar goal to target/nbm -->
    <ant:copy toDir="${maven.nbm.build.dir}" file="${maven.build.dir}/${maven.final.name}.jar"/>
    <!--
     create a timestamp value for OpenIDE-Module-Implementation-Version: manifest entry
    -->
    <ant:tstamp>
      <ant:format property="maven.nbm.timestamp" pattern="yyyyMMddhhmm" />
    </ant:tstamp>
    <j:set var="man" value="${maven.nbm.manifest}"/>
    <j:choose>
        <j:when test="${!empty man}">
            <ant:available property="maven.nbm.manifest.available" 
                       file="${man}"/>
        </j:when>
    </j:choose>
    <j:set var="bundle" value="${maven.nbm.manifest.bundle.basedir}"/>
    <j:if test="${!empty bundle}">
        <ant:available property="maven.nbm.bundle.available" 
                   file="${bundle}"/>
    </j:if> 
                       
<!-- if a netbeans specific manifest is defined, examine this one, otherwise the already included one.
 ignoring the case when some of the netbeans attributes are already defined in the jar and more is included.
-->                   
    <j:choose>
      <j:when test="${maven.nbm.manifest.available}">
        <mevenide:examine-manifest manifestFile="${maven.nbm.manifest}" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:when>
      <j:otherwise>
        <mevenide:examine-manifest jarFile="${maven.nbm.build.dir}/${maven.final.name}.jar" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:otherwise>
     </j:choose>
      
    <ant:echo message="NBM updates jar. localized=${maven.nbm.isLocalized}" />
    <ant:jar destfile="${maven.nbm.build.dir}/${maven.final.name}.jar"
             update="true">
      <j:if test="${maven.nbm.manifest.available}">
          <ant:echo message="NBM merging manifest.." />
        <ant:setProperty name="manifest" value="${maven.nbm.manifest}" />
      </j:if>
      <j:if test="${maven.nbm.bundle.available}">
          <ant:echo message="NBM adding manifest resources.." />
          <ant:fileset dir="${maven.nbm.manifest.bundle.basedir}"
                       includes="${maven.nbm.manifest.bundle.include}"
          />       
      </j:if>
      
       <ant:manifest>
       <!-- these attributes get defined this way only if not present in the manifest file -->
          <mevenide:adapt-version var="maven.nbm.version.spec" version="${pom.currentVersion}" type="spec"/>
          <ant:attribute name="OpenIDE-Module-Specification-Version" value="${maven.nbm.version.spec}"/>
          <mevenide:adapt-version var="maven.nbm.version.impl" version="${pom.currentVersion}" type="impl"/>
          <ant:attribute name="OpenIDE-Module-Implementation-Version" value="${maven.nbm.version.impl}"/>
          <ant:attribute name="OpenIDE-Module-Build-Version" value="${maven.nbm.timestamp}"/>
          <ant:attribute name="OpenIDE-Module" value="${pom.package}/1"/>
          
          <!-- generate Class-Path manifest entry -->
<!--          <j:set var="extDependencies" value=""/> -->
         <!-- process dependencies -->
          <j:set var="nbdep.separator" value=" " />
          <j:forEach var="artifact" items="${pom.artifacts}">
            <j:set var="dependency" value="${artifact.dependency}"/>
            <!-- netbeans library that is part of the module, added to Class-Path attribute -->
            <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
                  <j:set var="extDependencies" value="${extDependencies} ext/${artifact.name}"/>
            </j:if>
            <!-- netbeans dependency -instead of adding to classpath, add to Openide-Module-Dependencies attribute 
            -->
            <j:set var="moduleDep" value="${dependency.getProperty('netbeans.module.dep')}" />
            <j:if test="${!empty moduleDep}">
                <ant:echo message="${dependency.artifactId} is a module dependency - jar is ${artifact.path}" />
                <mevenide:examine-manifest jarFile="${artifact.path}" 
                                           isLocalizedVar="nbdepIsLocalized"
                                           isNetbeansModuleVar="nbdepIsNetbeansModule"
                                           moduleVar="nbdepModule"
                                           implVersionVar="nbdepImplVersion"
                                           specVersionVar="nbdepSpecVersion"
                /> 
                <ant:echo message="nbdep.module=${nbdep.module}=${empty nbdep.module}=${empty(nbdep.moduleVar)}" />
                <j:if test="${empty(nbdepModule)}">
                    <ant:echo message="nbdep.moduleVar=${nbdepModule}= is empty." />
                    <j:set var="nbdepModule" value="${dependency.artifactId}" />
                </j:if>
                <ant:echo message="nbdep.module2=${nbdepModule}=" />
                <j:choose>
                    <j:when test="${moduleDep == 'loose'}">
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdep.module}"/>
                    </j:when>
                    <j:when test="${moduleDep == 'impl'}">
                        <mevenide:adapt-version var="nbdepImplVersion" version="${dependency.version}" type="impl"/>
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} = ${nbdepImplVersion}"/>
                    </j:when>
                    <j:when test="${moduleDep == 'spec'}">
                        <mevenide:adapt-version var="nbdepSpecVersion" version="${dependency.version}" type="spec"/>
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} > ${nbdepSpecVersion}"/>
                    </j:when>
                    <j:otherwise>
                	  	<ant:fail message="Unrecognized netbeans module dependecy type : ${moduleDep}. Should be one of {'spec', 'impl', 'loose'}"/>
                    </j:otherwise>
                </j:choose>
                <j:set var="nbdep.separator" value="," />
            </j:if>
          </j:forEach>
          <!-- generate Class-Path manifest entry -->
          <j:if test="${!empty extDependencies}">
                <ant:attribute name="Class-Path" value="${extDependencies}" />
          </j:if>
          <!-- generate OpenIDE-Module-Module-Dependencies manifest entry -->
          <j:if test="${!empty moduleDependencies}">
                <ant:echo message="module deps= ${moduleDependencies}" />
                <ant:attribute name="OpenIDE-Module-Module-Dependencies" value="${moduleDependencies}" />
          </j:if>
          <j:choose>
              <j:when test="${maven.nbm.isLocalized}">
              </j:when>
              <j:otherwise>
                <ant:echo message="NBM: Now generating the user-visible module properties. Please note that these should be actually localized. See Netbeans.org API docs for information how to localize your module's manifest."/>
                <ant:attribute name="OpenIDE-Module-Display-Category" value="${pom.groupId}" />
                <ant:attribute name="OpenIDE-Module-Name" value="${pom.name}" />
                <ant:attribute name="OpenIDE-Module-Short-Description" value="${pom.shortDescription}" />
                <ant:attribute name="OpenIDE-Module-Long-Description" value="${pom.description}" />
              </j:otherwise>
          </j:choose>
       </ant:manifest>
    </ant:jar>
   </goal>

  <!--==================================================================-->

  <!-- Build the nbm                                               -->

  <!--==================================================================-->    

  <goal 
    name="nbm:nbm"
    prereqs="nbm:jar"
    description="Build the NBM">
  <ant:taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" >
        <ant:classpath>
            <ant:pathelement path="${plugin.getDependencyPath('nbantext')}"/>
        </ant:classpath>
  </ant:taskdef>

    <!-- copy the jar to the right location -->
   <ant:copy toDir="${maven.nbm.build.dir}/${maven.nbm.jar.location}" file="${maven.nbm.build.dir}/${maven.final.name}.jar"/>
    <!-- copy dependency jars in the relevant location -->
    <j:forEach var="artifact" items="${pom.artifacts}">
      <j:set var="dependency" value="${artifact.dependency}"/>
      <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
        <ant:copy todir="${maven.nbm.build.dir}/${maven.nbm.jar.location}/ext" file="${artifact.path}"/>
        <!--classpath attribute added in the previous step (jar update)-->
      </j:if>
    </j:forEach>

<!--DEBUG
    <ant:echo message="autoload=${maven.nbm.autoload}" />
    <ant:echo message="module=${maven.nbm.jar.location}/${maven.final.name}.jar" />
    <ant:echo message="url=${pom.url}" />
    <ant:echo message="license=${maven.nbm.license}" />
    -->
    <ant:makenbm file="${maven.nbm.build.dir}/${maven.final.name}.nbm"
             topdir="${maven.nbm.build.dir}"
             module="${maven.nbm.build.dir}/${maven.nbm.jar.location}/${maven.final.name}.jar"
             homepage="${pom.url}"
             distribution="${pom.url}/${maven.final.name}.nbm"
             needsrestart="${maven.nbm.requiresrestart}">
     <license file="${maven.nbm.license}"/>
     <signature keystore="?" storepass="?" alias="?"/> -->
    </ant:makenbm>
    <!-- now copy the artifact (NBM file) into the local repository
    -->
    <artifact:install
        artifact="${maven.nbm.build.dir}/${maven.final.name}.nbm"
        type="nbm"
        project="${pom}"/>   

<!--    <j:forEach var="lib" items="${pom.artifacts}">
      <ant:copy 
        todir="${libdir}"
        file="${lib.path}"/>
    </j:forEach>
-->    
  </goal>
  
</project>
