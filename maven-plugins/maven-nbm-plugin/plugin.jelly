<?xml version="1.0"?>

<project 
  xmlns:j="jelly:core"
  xmlns:util="jelly:util"
  xmlns:log="jelly:log"
  xmlns:ant="jelly:ant"
  xmlns:maven="jelly:maven"
  xmlns:mevenide="jelly:org.mevenide.tags.netbeans.MevenideNbTagLibrary"
  xmlns:x="jelly:xml"
  xmlns:artifact="artifact">

  <!--==================================================================-->
  <!-- Default goal : Builds a nbm file                             -->
  <!--==================================================================-->    
  <goal 
    name="nbm" 
    prereqs="nbm:nbm" 
    description="Build NBM file"/>

  <!--==================================================================-->
  <!-- Initializations                                                  -->
  <!--==================================================================-->    
  <goal name="nbm:init">
<!--    <j:set var="maven.nbm.final.name"  value="${maven.build.dir}/${maven.final.name}.nbm"/> -->
    <j:set var="maven.nbm.build.dir" value="${maven.build.dir}/nbm" />
    <j:set var="maven.nbm.jar.location" value="netbeans/modules"/>    
    <j:choose>
        <j:when test="${maven.nbm.autoload}">
           <j:set var="maven.nbm.jar.location" value="netbeans/modules/autoload"/>
        </j:when>
        <j:when test="${maven.nbm.eager}">
           <j:set var="maven.nbm.jar.location" value="netbeans/modules/eager"/>
        </j:when>
        <j:otherwise>
            <j:set var="maven.nbm.jar.location" value="netbeans/modules"/>    
        </j:otherwise>
    </j:choose>
    <ant:mkdir dir="${maven.nbm.build.dir}/${maven.nbm.jar.location}"/>
  </goal>

  <goal name="nbm:jar"
      prereqs="jar:jar, nbm:init" 
      description="Build the Netbeans jar.">
    <!-- copy the original jar made by jar:jar goal to target/nbm -->
    <ant:copy toDir="${maven.nbm.build.dir}" file="${maven.build.dir}/${maven.final.name}.jar"/>
    <!--
     create a timestamp value for OpenIDE-Module-Implementation-Version: manifest entry
    -->
    <ant:tstamp>
      <ant:format property="maven.nbm.timestamp" pattern="yyyyMMddhhmm" />
    </ant:tstamp>
    <j:set var="man" value="${maven.nbm.manifest}"/>
    <j:choose>
        <j:when test="${!empty man}">
            <ant:available property="maven.nbm.manifest.available" 
                       file="${man}"/>
        </j:when>
    </j:choose>
    <j:set var="bundle" value="${maven.nbm.manifest.bundle.basedir}"/>
    <j:if test="${!empty bundle}">
        <ant:available property="maven.nbm.bundle.available" 
                   file="${bundle}"/>
    </j:if> 
                       
<!-- if a netbeans specific manifest is defined, examine this one, otherwise the already included one.
 ignoring the case when some of the netbeans attributes are already defined in the jar and more is included.
-->                   
    <j:choose>
      <j:when test="${maven.nbm.manifest.available}">
        <mevenide:examine-manifest manifestFile="${maven.nbm.manifest}" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:when>
      <j:otherwise>
        <mevenide:examine-manifest jarFile="${maven.nbm.build.dir}/${maven.final.name}.jar" 
                                   isLocalizedVar="maven.nbm.isLocalized"/> 
      </j:otherwise>
     </j:choose>
      
    <ant:echo message="NBM plugin updates jar." />
    <ant:jar destfile="${maven.nbm.build.dir}/${maven.final.name}.jar"
             update="true">
      <j:if test="${maven.nbm.manifest.available}">
<!--          <ant:echo message="NBM merging manifest.." /> -->
        <ant:setProperty name="manifest" value="${maven.nbm.manifest}" />
      </j:if>
      <j:if test="${maven.nbm.bundle.available}">
<!--          <ant:echo message="NBM adding manifest resources.." /> -->
          <ant:fileset dir="${maven.nbm.manifest.bundle.basedir}"
                       includes="${maven.nbm.manifest.bundle.include}"
          />       
      </j:if>
      
       <ant:manifest>
       <!-- these attributes get defined this way only if not present in the manifest file -->
          <mevenide:adapt-version var="maven.nbm.version.spec" version="${pom.currentVersion}" type="spec"/>
          <ant:attribute name="OpenIDE-Module-Specification-Version" value="${maven.nbm.version.spec}"/>
          <mevenide:adapt-version var="maven.nbm.version.impl" version="${pom.currentVersion}" type="impl"/>
          <ant:attribute name="OpenIDE-Module-Implementation-Version" value="${maven.nbm.version.impl}"/>
          <ant:attribute name="OpenIDE-Module-Build-Version" value="${maven.nbm.timestamp}"/>
          <ant:attribute name="OpenIDE-Module" value="${pom.package}"/>
          
          <!-- generate Class-Path manifest entry -->
<!--          <j:set var="extDependencies" value=""/> -->
         <!-- process dependencies -->
          <j:set var="nbdep.separator" value=" " />
          <j:forEach var="artifact" items="${pom.artifacts}">
            <j:set var="dependency" value="${artifact.dependency}"/>
            <!-- netbeans library that is part of the module, added to Class-Path attribute -->
            <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
                  <j:set var="extDependencies" value="${extDependencies} ext/${artifact.name}"/>
            </j:if>
            <!-- netbeans dependency -instead of adding to classpath, add to Openide-Module-Dependencies attribute 
            -->
            <j:set var="moduleDep" value="${dependency.getProperty('netbeans.module.dep')}" />
            <j:if test="${!empty moduleDep}">
<!--                <ant:echo message="${dependency.artifactId} is a module dependency - jar is ${artifact.path}" /> -->
                <mevenide:examine-manifest jarFile="${artifact.path}" 
                                           isLocalizedVar="nbdepIsLocalized"
                                           isNetbeansModuleVar="nbdepIsNetbeansModule"
                                           moduleVar="nbdepModule"
                                           implVersionVar="nbdepImplVersion"
                                           specVersionVar="nbdepSpecVersion"
                /> 
                <j:if test="${empty(nbdepModule)}">
                    <j:set var="nbdepModule" value="${dependency.artifactId}" />
                </j:if>
                <j:choose>
                    <j:when test="${moduleDep == 'loose'}">
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdep.module}"/>
                    </j:when>
                    <j:when test="${moduleDep == 'impl'}">
                        <j:if test="${nbdepIsNetbeansModule != true}">
                            <mevenide:adapt-version var="nbdepImplVersion" version="${dependency.version}" type="impl"/>
                        </j:if>
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} = ${nbdepImplVersion}"/>
                    </j:when>
                    <j:when test="${moduleDep == 'spec'}">
                        <j:if test="${nbdepIsNetbeansModule != true}">
                            <mevenide:adapt-version var="nbdepSpecVersion" version="${dependency.version}" type="spec"/>
                        </j:if>
                        <j:set var="moduleDependencies" value="${moduleDependencies}${nbdep.separator} ${nbdepModule} > ${nbdepSpecVersion}"/>
                    </j:when>
                    <j:otherwise>
                	  	<ant:fail message="Unrecognized netbeans module dependecy type : ${moduleDep}. Should be one of {'spec', 'impl', 'loose'}"/>
                    </j:otherwise>
                </j:choose>
                <j:set var="nbdep.separator" value="," />
            </j:if>
          </j:forEach>
          <!-- generate Class-Path manifest entry -->
          <j:if test="${!empty extDependencies}">
                <ant:attribute name="Class-Path" value="${extDependencies}" />
          </j:if>
          <!-- generate OpenIDE-Module-Module-Dependencies manifest entry -->
          <j:if test="${!empty moduleDependencies}">
<!--                <ant:echo message="module deps= ${moduleDependencies}" /> -->
                <ant:attribute name="OpenIDE-Module-Module-Dependencies" value="${moduleDependencies}" />
          </j:if>
          <j:choose>
              <j:when test="${maven.nbm.isLocalized}">
              </j:when>
              <j:otherwise>
                <ant:echo message="NBM: Now generating the user-visible module properties. Please note that these should be actually localized. See Netbeans.org API docs for information how to localize your module's manifest."/>
                <ant:attribute name="OpenIDE-Module-Display-Category" value="${pom.groupId}" />
                <ant:attribute name="OpenIDE-Module-Name" value="${pom.name}" />
                <ant:attribute name="OpenIDE-Module-Short-Description" value="${pom.shortDescription}" />
                <ant:attribute name="OpenIDE-Module-Long-Description" value="${pom.description}" />
              </j:otherwise>
          </j:choose>
       </ant:manifest>
    </ant:jar>
   </goal>

  <!--==================================================================-->

  <!-- Build the nbm                                               -->

  <!--==================================================================-->    

  <goal 
    name="nbm:nbm"
    prereqs="nbm:jar"
    description="Build the NBM">
  <ant:taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" >
        <ant:classpath>
            <ant:pathelement path="${plugin.getDependencyPath('nbantext')}"/>
        </ant:classpath>
  </ant:taskdef>

    <!-- copy the jar to the right location -->
   <ant:copy toDir="${maven.nbm.build.dir}/${maven.nbm.jar.location}" file="${maven.nbm.build.dir}/${maven.final.name}.jar"/>
    <!-- copy dependency jars in the relevant location -->
    <j:forEach var="artifact" items="${pom.artifacts}">
      <j:set var="dependency" value="${artifact.dependency}"/>
      <j:if test="${dependency.getProperty('netbeans.module.ext') == 'true'}">
        <ant:copy todir="${maven.nbm.build.dir}/${maven.nbm.jar.location}/ext" file="${artifact.path}"/>
        <!--classpath attribute added in the previous step (jar update)-->
      </j:if>
    </j:forEach>

<!--DEBUG
    <ant:echo message="autoload=${maven.nbm.autoload}" />
    <ant:echo message="module=${maven.nbm.jar.location}/${maven.final.name}.jar" />
    <ant:echo message="url=${pom.url}" />
    <ant:echo message="license=${maven.nbm.license}" />
    -->
    <ant:makenbm file="${maven.nbm.build.dir}/${maven.final.name}.nbm"
             topdir="${maven.nbm.build.dir}"
             module="${maven.nbm.build.dir}/${maven.nbm.jar.location}/${maven.final.name}.jar"
             needsrestart="${maven.nbm.requiresrestart}">
      <j:if test="${! empty(pom.url)}">
        <ant:setProperty name="homepage" value="${pom.url}" />
        <ant:setProperty name="distribution" value="${pom.url}/${maven.final.name}.nbm" />
      </j:if>
     <ant:license file="${maven.nbm.license}" name="Licence for ${maven.final.name}"/>
     <ant:signature keystore="${maven.nbm.sign.keystore}" 
                    storepass="${maven.nbm.sign.storepass}" 
                    alias="${maven.nbm.sign.alias}"/> -->
    </ant:makenbm>
    <!-- now copy the artifact (NBM file) into the local repository
    -->
    <artifact:install
        artifact="${maven.nbm.build.dir}/${maven.final.name}.nbm"
        type="nbm"
        project="${pom}"/>   

<!--    <j:forEach var="lib" items="${pom.artifacts}">
      <ant:copy 
        todir="${libdir}"
        file="${lib.path}"/>
    </j:forEach>
-->    
  </goal>
  
  <goal name="nbm:create-library-artifacts" 
  		prereqs="nbm:init" 
  		description="">
    <j:forEach var="artifact" items="${pom.artifacts}">
        <j:set var="dependency" value="${artifact.dependency}"/>
        <j:if test="${dependency.getProperty('netbeans.lib.generate') == 'true'}">
        
            <mevenide:examine-manifest jarFile="${artifact.path}" 
                                       isLocalizedVar="nbdepIsLocalized"
                                       isNetbeansModuleVar="nbdepIsNetbeansModule"
                                       moduleVar="nbdepModule"
                                       implVersionVar="nbdepImplVersion"
                                       specVersionVar="nbdepSpecVersion"
            /> 
            <j:if test="nbdepIsNetbeansModule == true">
                <ant:fail message="Dependency ${dependency} is already a netbeans module. Do not regenerate!"/>
            </j:if>
 		<!-- init variables -->
            <j:set var="dependencyModuleDir" value="${maven.nbm.build.dir}/${dependency.groupId}_${dependency.version}"/>
            <ant:mkdir dir="${dependencyModuleDir}"/>
            <j:if test="${empty(nbdepModule)}">
                <j:set var="nbdepModule" value="${dependency.artifactId}"/>
            </j:if>
     		<mevenide:adapt-version var="depSpecVersion" version="${dependency.version}" type="spec"/>
     		<mevenide:adapt-version var="depImplVersion" version="${dependency.version}" type="impl"/>
            <!-- handle licensing.. first look in the jar itself, if not found, look in a local license repository -->
<!--            <ant:echo message="artifact path=${artifact.path}" />-->
            <mevenide:find-license var="liblicense" jarFile="${artifact.path}" />
            <j:if test="${empty(liblicense)}" >
<!--                <ant:echo message="lib licence not found in jar." /> -->
                <j:set var="licenseFile" value="${maven.nbm.licenses.dir}/${dependency.groupId}/${dependency.artifactId}.lic"/>
                <ant:available property="isLicensePresent" file="${licenseFile}"/>
                <j:if test="${isLicensePresent}">
                    <util:loadText file="${licenseFile}" var="liblicense"/>
                </j:if>
            </j:if>
            <j:if test="${empty(liblicense)}">
                <ant:fail message="Dependency ${dependency} doesn't have a license file defined in the jar. Please copy the license to file: licenses/${dependency.groupId}/${dependency.artifactId}.lic" />
            </j:if>
            <j:file name="${dependencyModuleDir}/license.txt" omitXmlDeclaration="true">
${liblicense}
            </j:file>
            <!-- create the project's properties-->
            <j:file name="${dependencyModuleDir}/project.properties" omitXmlDeclaration="true">
maven.nbm.autoload=true
maven.nbm.license=${dependencyModuleDir}/license.txt
            </j:file>
            <!-- create the maven project xml-->
            <j:file name="${dependencyModuleDir}/project.xml" prettyPrint="true">
                <x:element name="project">
                    <x:element name="pomVersion">3</x:element>
                    <x:element name="id">${dependency.artifactId}</x:element>
                    <x:element name="artifactId">lib-${dependency.artifactId}</x:element>
                    <x:element name="groupId">${dependency.groupId}</x:element>
                    <x:element name="currentVersion">${dependency.version}</x:element>
                    <x:element name="package">${nbdepModule}</x:element>
                    <x:element name="name">${dependency.artifactId} library for ${pom.name}</x:element>
                    <x:element name="shortDescription">Library for project ${pom.id} (${pom.name}) </x:element>
                    <x:element name="description">Library for project ${pom.id} (${pom.name}) </x:element>
                    <x:element name="url">${pom.url}</x:element>
                    <x:element name="dependencies">
                        <x:element name="dependency"> 
                            <x:element name="groupId">${dependency.groupId}</x:element>
                            <x:element name="artifactId">${dependency.artifactId}</x:element>
                            <x:element name="version">${dependency.version}</x:element>
                            <x:element name="type">${dependency.type}</x:element>
                            <x:element name="properties">
                                <x:element name="netbeans.module.ext">true</x:element>
                            </x:element>
                        </x:element>
                    </x:element>
                </x:element>
            </j:file>
            <maven:maven descriptor="${dependencyModuleDir}/project.xml"
                         ignoreFailures="false"
                         goals="nbm" />
       </j:if>
    </j:forEach>
  </goal>  
  
  <goal name="nbm:collect-nbms" prereqs="nbm:nbm, nbm:create-library-artifacts"
        description="Will collect the module nbm and all library nbms (if any) to a single release directory target/nbm_release">
        <j:set var="reldir" value="${maven.nbm.build.release.dir}" />
        <j:if test="${empty(reldir)}">
            <j:set var="maven.nbm.build.release.dir" value="${maven.build.dir}/nbm_release" />
        </j:if>
        <ant:copy toDir="${maven.nbm.build.release.dir}" flatten="true">
            <ant:fileset dir="${maven.nbm.build.dir}"
                       includes="**/*.nbm"
            />       
        </ant:copy>
  </goal>
 
  <goal name="nbm:autoupdate">
      <ant:taskdef name="updatedist" classname="org.netbeans.nbbuild.MakeUpdateDesc" >
        <ant:classpath>
            <ant:pathelement path="${plugin.getDependencyPath('nbantext')}"/>
        </ant:classpath>
      </ant:taskdef>
      
      <ant:updatedist desc="${maven.nbm.build.release.dir}/${maven.nbm.autoupdate.name}.xml">
      <j:set var="nbmdistbase" value="${maven.nbm.autoupdate.distbase}"/>
      <j:if test="${! empty(nbmdistbase)}">
        <ant:setProperty name="distbase" value="${nbmdistbase}" />
      </j:if>
          <ant:fileset dir="${maven.nbm.build.release.dir}"
                       includes="**/*.nbm"
          />       
      </ant:updatedist>
      
  </goal> 
</project>
