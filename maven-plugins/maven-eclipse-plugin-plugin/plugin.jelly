<project xmlns:ant="jelly:ant"
		 xmlns:define="jelly:define"
		 xmlns:eclipse-plugin="eclipse-plugin"
         xmlns:j="jelly:core" 
		 xmlns:maven="jelly:maven"
		 xmlns:mevenide="jelly:org.mevenide.tags.eclipse.MevenideTagLibrary"
		 xmlns:util="jelly:util"
		 xmlns:x="jelly:xml"
		 xmlns:artifact="artifact">

  <define:taglib uri="eclipse-plugin">
  	
  	<define:tag name="check-type">
  	
  	  <j:if test="${type != 'plugin' and type != 'help' and type != 'feature' and type != 'site'}">
	  	<ant:fail message="Unrecognized Eclipse plugin type : ${maven.eclipse.plugin.type}. Should be one of {'plugin', 'feature', 'site', 'help'}"/>
	  </j:if>
	  
  	</define:tag>
  	
  	<!-- 
  	   @param artifact the artifact for which we lookup a license
  	   @param dest the destination where the license file should be copied to
  	-->
  	<define:tag name="handle-licensing">
  	    
  	  <mevenide:find-license var="liblicense" jarFile="${artifact.path}" />
    
      <j:if test="${ empty(liblicense) }" >
        <j:set var="licenseFile" value="${maven.eclipse.plugin.licenses.dir}/${artifact.dependency.groupId}/${artifact.dependency.artifactId}.lic"/>
        <ant:available property="isLicensePresent" file="${licenseFile}"/>
        <j:if test="${ isLicensePresent }">
          <util:loadText file="${ licenseFile }" var="liblicense"/>
        </j:if>
      </j:if>
      
      <j:if test="${ empty(liblicense) }">
        <!-- should we fail ? -->
        <ant:echo message="Dependency ${dependency} doesn't have a license file defined in the jar. Please copy the license to file: licenses/${dependency.groupId}/${dependency.artifactId}.lic" />
      </j:if>
      
      <j:if test="${ !empty(liblicense) }">
        <j:file name="${dest}/license.txt" omitXmlDeclaration="true">${liblicense}</j:file>
      </j:if>
  	    
  	</define:tag>
  	
  </define:taglib>
  
  
  <goal name="eclipse-plugin:create-artifact-dist"
  		description="dispatch to the correct goal, based on the specified eclipse plugin type (plugin, site or feature)">
  	
  	<j:set var= "type" value="${maven.eclipse.plugin.artifact.type}"/>
  	<eclipse-plugin:check-type type="${type}"/>
  	
  	<attainGoal name="eclipse-plugin:create-${type}-dist"/>
  	  
  </goal>
  
  
  <goal name="eclipse-plugin:install-artifact" prereqs="eclipse-plugin:init-filterset" 
  		description="filter and copy the plugin artifact descriptor file to ${basedir}">
  		
  	<ant:copy todir="${basedir}" overwrite="true">
  	  <ant:fileset dir="${maven.eclipse.plugin.src.dir}"/>
  	  <ant:filterset>
  	  	<ant:filterset refid="${maven.eclipse.plugin.filterset.id}"/>
  	  	<ant:filter token="maven.eclipse.plugin.artifact.id" value="${maven.eclipse.plugin.artifact.id}"/>
  	  	<ant:filter token="maven.eclipse.plugin.artifact.version" value="${maven.eclipse.plugin.artifact.version}"/>
  	  	<ant:filter token="maven.eclipse.plugin.artifact.internal.id" value="${maven.eclipse.plugin.artifact.internal.id}"/>
  	  	<ant:filter token="maven.eclipse.plugin.artifact.internal.version" value="${maven.eclipse.plugin.artifact.internal.version}"/>
  	  </ant:filterset>
  	</ant:copy>
  	
  </goal>
  
  <goal name="eclipse-plugin:create-help-dist" prereqs="eclipse-plugin:init,eclipse-plugin:install-artifact"
  		description="create an help only plugin dist file and put it in ${maven.eclipse.plugin.dist.dir}">
  	  <j:set var="distVersion" value="${maven.eclipse.plugin.artifact.version}"/>
	  <j:set var="pluginId" value="${maven.eclipse.plugin.artifact.id}"/>
  	  <j:set var="pluginFolder">${pluginId.replaceAll('-', '.')}</j:set> 
      <j:set var="pluginArchive" value="${maven.eclipse.plugin.dist.dir}/${pluginFolder}_${distVersion}.jar"/>
    
      <!-- build plugin distribution file. -->
      <ant:jar destfile="${pluginArchive}">
        <ant:fileset dir="${basedir}" includes="${maven.eclipse.plugin.help.dir}/**/*"/>
        <ant:fileset dir="${basedir}" includes="${maven.eclipse.plugin.includes}"/>
      </ant:jar>
  </goal>
  
  <goal name="eclipse-plugin:create-plugin-dist" prereqs="jar:jar,eclipse-plugin:init,eclipse-plugin:install-artifact"
  		description="create a plugin dist file containing only the plugin required files and put it in ${maven.eclipse.plugin.dist.dir}">

  	  <j:set var="mode" value="${maven.eclipse.plugin.build.mode}"/>
  	  <j:if test="${mode == 'bundle'}">
		<attainGoal name="eclipse-plugin:prepare-plugin-dist"/>
  	  </j:if>
  	  <j:if test="${mode != 'bundle'}">
  	  	<attainGoal name="eclipse-plugin:create-library-artifacts"/>
  	  </j:if>
  	  
	  <j:set var="distVersion" value="${maven.eclipse.plugin.artifact.version}"/>
	  <j:set var="pluginId" value="${maven.eclipse.plugin.artifact.id}"/>
  	  <j:set var="pluginFolder">${pluginId.replaceAll('-', '.')}</j:set> 
      <j:set var="pluginArchive" value="${maven.eclipse.plugin.dist.dir}/${pluginFolder}_${distVersion}.jar"/>
	  
	  <!-- create temporary folder to store plugin files before archiving them -->
	  <ant:mkdir dir="${maven.eclipse.plugin.temp.dir}/${pluginFolder}_${distVersion}"/>
       
      <!-- @todo update plugin descriptor -->
  	  <mevenide:update-plugin-libraries pom="${pom}"/>
  	  
  	  <ant:move todir="${basedir}" filtering="true">
        <fileset dir="${maven.eclipse.plugin.temp.dir}">
          <include name="plugin.xml"/>
        </fileset>
        <ant:filterset>
  	  	  <ant:filterset refid="${maven.eclipse.plugin.filterset.id}"/>
  	  	  <ant:filter token="maven.eclipse.plugin.artifact.id" value="${maven.eclipse.plugin.artifact.id}"/>
  	  	  <ant:filter token="maven.eclipse.plugin.artifact.version" value="${maven.eclipse.plugin.artifact.version}"/>
  	      <ant:filter token="maven.eclipse.plugin.artifact.internal.id" value="${maven.eclipse.plugin.artifact.internal.id}"/>
  	  	  <ant:filter token="maven.eclipse.plugin.artifact.internal.version" value="${maven.eclipse.plugin.artifact.internal.version}"/>
  	    </ant:filterset>
      </ant:move>
      
      <!-- copy required dependencies and generated artifact to $${maven.eclipse.plugin.temp.dir} -->
      <ant:copy todir="${maven.eclipse.plugin.temp.dir}"><!-- /${pluginFolder}_${distVersion} -->
       	<ant:fileset dir="${basedir}" includes="${maven.eclipse.plugin.includes}"/>
       	<ant:fileset dir="${maven.build.dir}" includes="${pom.artifactId}-${pom.currentVersion}.jar"/>
      </ant:copy>

      <!-- build plugin distribution file. -->
      <ant:jar destfile="${pluginArchive}">
        <ant:fileset dir="${maven.eclipse.plugin.temp.dir}"/>
      </ant:jar>
      
      <ant:delete dir="${maven.eclipse.plugin.temp.dir}" quiet="true"/>
      
      <!-- @todo customize me, for runtime testing ? -->
      <ant:copy todir="${basedir}" file="${maven.build.dir}/${maven.final.name}.jar"/>
   </goal>
   
   <!--
   	 do not use feature POM for looking up resources to have a consistent behavior between plugin and feature creation goals.
   -->
   <goal name="eclipse-plugin:create-feature-dist" prereqs="eclipse-plugin:init,eclipse-plugin:install-artifact"
   		 description="create a feature dist file containing only the feature required files and put it in ${maven.eclipse.plugin.dist.dir}">
	     
   	  <j:set var="featureId" value="${maven.eclipse.plugin.artifact.id}"/>
   	  <j:set var="distVersion" value="${maven.eclipse.plugin.artifact.version}"/>
   	  <j:set var="featureFolder">${featureId.replaceAll('-', '.')}</j:set> 
   	  <j:set var="featureArchive" value="${maven.eclipse.plugin.dist.dir}/${featureFolder}_${distVersion}.jar"/>
   	  
   	  <!-- create feature distribution file -->
   	  <ant:copy todir="${maven.eclipse.plugin.temp.dir}/${featureFolder}_${distVersion}">
   	  	<fileset dir="${basedir}" includes="${maven.eclipse.plugin.feature.includes}"/>
   	  </ant:copy>
   	  
   	  <ant:jar destfile="${featureArchive}">
        <fileset dir="${maven.eclipse.plugin.temp.dir}/${featureFolder}_${distVersion}"/>
      </ant:jar>
      
      <!-- iterate and build each plugin part of this feature and copy them to $${maven.eclipse.plugin.dist.dir}/plugins -->
      <util:tokenize var="featurePlugins" delim=",">${maven.eclipse.plugin.feature.plugins}</util:tokenize>	
	  <j:forEach var="plugin" items="${featurePlugins}">
	  	
	  	<!-- create plugin archive -->
		<maven:pom var="pluginPom" projectDescriptor="${plugin}"/>
		<maven:maven goals="eclipse-plugin:create-artifact-dist" descriptor="${plugin}"/>
		
		<!-- copy plugin archives -->
		<ant:copy todir="${maven.eclipse.plugin.dist.dir}/plugins">
		  <fileset dir="${pluginPom.getContext().getVariable('maven.eclipse.plugin.dist.dir')}" includes="*.jar"/>
		</ant:copy>
		
	  </j:forEach>
   		
   	  <!-- @todo update feature descriptor -->
      <!-- j:if test="${mode != 'bundle'}">
  	  	<attainGoal name="eclipse-plugin:update-feature-includes"/>
  	  </j:if -->	
   	
   	  <ant:delete dir="${maven.eclipse.plugin.temp.dir}"/>
   	  
   </goal>


   <!-- 
   	  build a single artifact containing all plugins and feature, ready to be 
   	  unzipped into ${eclipse.home}. cannot be used as a local site for update manager
   	  because the site descriptor is not anu longer included in the distribution
   -->
   <goal name="eclipse-plugin:create-site-dist" prereqs="eclipse-plugin:init,eclipse-plugin:install-artifact"
   		 description="build a single distribution file containing all required plugins and features">
   	 
   	 <j:set var="siteId" value="${maven.eclipse.plugin.artifact.id}"/>
   	 <j:set var="distVersion" value="${maven.eclipse.plugin.artifact.version}"/>
   	 <j:set var="siteFolder">${siteId.replaceAll('-', '.')}</j:set> 
  	 <j:set var="siteArchive" value="${maven.eclipse.plugin.dist.dir}/${siteFolder}-${distVersion}.zip"/>
   	 
   	 <util:tokenize var="includedFeatures" delim=",">${maven.eclipse.plugin.site.features}</util:tokenize>
   	 
   	 <j:forEach var="feature" items="${includedFeatures}">
   	 	
   	 	<maven:pom var="featurePom" projectDescriptor="${feature}"/>
   	 	<maven:maven goals="eclipse-plugin:create-feature-dist" descriptor="${feature}"/>
   	 	
   	 	<ant:copy todir="${maven.eclipse.plugin.site.feature.dest.dir}">
   	 	  <ant:fileset dir="${featurePom.getContext().getVariable('maven.eclipse.plugin.dist.dir')}" includes="*.jar"/>
   	 	</ant:copy>
   	 	
   	 	<ant:copy todir="${maven.eclipse.plugin.site.plugin.dest.dir}">
   	 	  <ant:fileset dir="${featurePom.getContext().getVariable('maven.eclipse.plugin.dist.dir')}/plugins" includes="*.jar"/>
   	 	</ant:copy>

   	 </j:forEach>
   	 
   	 <!-- creature single distribution file -->
   	 <ant:fileScanner var="featureJars">
	   <ant:fileset dir="${maven.eclipse.plugin.site.feature.dest.dir}" includes="*.jar"/>
	 </ant:fileScanner>
	 
	 <j:forEach var="featureJar" items="${featureJars.iterator()}">
	   <j:set var="featureDest" value="${featureJar.getName().substring(0, featureJar.getName().lastIndexOf('.'))}" />
	   <ant:mkdir dir="${maven.eclipse.plugin.temp.dir}/plugins/${featureDest}"	/>
	   <ant:unjar src="${featureJar}" dest="${maven.eclipse.plugin.temp.dir}/features/${featureDest}"/>
	   <ant:delete dir="${maven.eclipse.plugin.temp.dir}/features/${featureDest}/META-INF"/>
	 </j:forEach>
   	 
   	 <ant:fileScanner var="pluginJars">
       <ant:fileset dir="${maven.eclipse.plugin.site.plugin.dest.dir}" includes="*.jar"/>
     </ant:fileScanner>

     <j:forEach var="pluginJar" items="${pluginJars.iterator()}">
	   <j:set var="pluginDest" value="${pluginJar.getName().substring(0, pluginJar.getName().lastIndexOf('.'))}" />
       <ant:mkdir dir="${maven.eclipse.plugin.temp.dir}/plugins/${pluginDest}"	/>
   	   <ant:unjar src="${pluginJar}" dest="${maven.eclipse.plugin.temp.dir}/plugins/${pluginDest}"/>
   	   <ant:delete dir="${maven.eclipse.plugin.temp.dir}/plugins/${pluginDest}/META-INF"/>
	 </j:forEach>

   	 <!-- wether or not site.* files should be included in ${siteArchive} -->
   	 <j:set var="includeSiteRootFiles" value="${maven.eclipse.plugin.site.includeRootFiles}"/>
   	 
   	 <ant:zip destfile="${siteArchive}">
   	 	<ant:fileset dir="${maven.eclipse.plugin.temp.dir}"/>
   	 	<j:if test="${includeSiteRootFiles == 'true'}">
	   	   <ant:fileset dir="${basedir}" includes="site.properties,site.xml"/> 
	   	</j:if>
   	 </ant:zip>
   	 
   	 <ant:copy todir="${maven.eclipse.plugin.dist.dir}/">
   	 	<ant:fileSet dir="${basedir}" includes="site.xml,site.properties"/>
   	 </ant:copy>
   	 
   	 <!-- clean up resources -->
   	 <ant:delete dir="${maven.eclipse.plugin.temp.dir}"/>
   	 
   	 <!-- 
   	     install update site into local repo. manual copy because 
   	     artifact plugin doesnot support folder install
   	 -->
   	 <ant:copy todir="${maven.repo.local}/${pom.groupId}/eclipse-update-sites/${distVersion}" overwrite="true">   
   	 	<ant:fileset dir="${maven.eclipse.plugin.dist.dir}" 
   	 	 			 includes="**/*" 
   	 	 			 excludes="${siteFolder}-${distVersion}.zip"/>
   	 </ant:copy>
     
     <!-- install the site bundle into local repo -->
     <artifact:install artifact="${siteArchive}"
        			   type="zip"
        			   project="${pom}"/>   
  </goal>
   
  
  <goal name="eclipse-plugin:init-filterset" 
  		description="create an empty filterset if ${maven.eclipse.plugin.filterset.id} hasnot been specified">
  		
  	<j:set var="filterRefid" value="${maven.eclipse.plugin.filterset.id}"/>
  	<j:if test="${empty filterRefid}">
  	  <j:set var="maven.eclipse.plugin.filterset.id" value="filterSetId"/>
  	  <ant:filterset id="${maven.eclipse.plugin.filterset.id}"/>
  	</j:if>
  	
  </goal>
   
  
  <goal name="eclipse-plugin:init" description="initialize eclipse plugin distribution aware folders">
  	<j:set var="type" value="${maven.eclipse.plugin.type}"/>
  	
  	<j:if test="${type == 'plugin'}">
	  <ant:delete dir="${maven.eclipse.plugin.lib.dir}" quiet="true"/>
	  <ant:mkdir dir="${maven.eclipse.plugin.lib.dir}"/>
	</j:if>
    
    <ant:delete dir="${maven.eclipse.plugin.dist.dir}" quiet="true"/>	
    <ant:mkdir dir="${maven.eclipse.plugin.dist.dir}"/>    
    
    <ant:delete dir="${maven.eclipse.plugin.temp.dir}" quiet="true"/>
    <ant:mkdir dir="${maven.eclipse.plugin.temp.dir}" />
    
    <ant:delete dir="${maven.eclipse.plugin.ext.dir}" quiet="true" />
    <ant:mkdir dir="${maven.eclipse.plugin.ext.dir}" />
    
  </goal>


  <!-- 
  	iterate project artifacts and copy dependencies required by eclipse plugin into ${maven.eclipse.plugin.lib.dir} directory.
  	required eclipse artifacts are expected to be declared in plugin.xml/plugin/import/libraries. they are marked as required 
  	by setting the &lt;eclipse.plugin.bundle&gt; property to 'true' as described below :
  	<[CDATA[
  		<dependency>
  			<groupId>blah</groupId>
  			<artifactId>blah</artifactId>
  			<version>1.1-mod</version>
  			<properties>
  				<eclipse.plugin.bundle>true</eclipse.plugin.bundle>
  			</properties>
  		</dependency>
  	]]>
  	Also dependencies whose groupId is 'eclipse' are ignored as they should be referenced using plugin.xml/requires/import. 
  -->
  <goal name="eclipse-plugin:prepare-plugin-dist" prereqs="eclipse-plugin:init" 
  		description="iterate over ${pom.artifacts} and copy required dependencies in ${maven.eclipse.plugin.dist.lib}">
  		
    <j:forEach var="artifact" items="${pom.artifacts}">
      <j:set var="dependency" value="${artifact.dependency}"/>
      <j:if test="${!(dependency.groupId.equals('eclipse')) and dependency.getProperty('eclipse.plugin.bundle') == 'true'}">
        <ant:copy todir="${maven.eclipse.plugin.lib.dir}" file="${artifact.path}"/>
      </j:if>
    </j:forEach>
    
  </goal> 
   
   
  <goal name="eclipse-plugin:install-swt" description="install platform-dependent swt library into maven local repository">
    <!-- set eclipse.home property -->
	<ant:property environment="env"/>
  	<ant:property name="eclipse.home" location="${env.ECLIPSE_HOME}"/>
	
	<!-- find swt.plugin.dir -->
	<ant:available property="swt.plugin.dir" 
			 	   value="org.eclipse.swt.gtk_3.0.0/ws/gtk"
				   file="${eclipse.home}/plugins/org.eclipse.swt.gtk_${maven.eclipse.plugin.swt.version}/ws/gtk/swt.jar"/>

	<ant:available property="swt.plugin.dir" 
			   	   value="org.eclipse.swt.gtk1x_3.0.0/ws/gtk1x"
			       file="${eclipse.home}/plugins/org.eclipse.swt.gtk1x_${maven.eclipse.plugin.swt.version}/ws/gtk1x/swt.jar/swt.jar"/>
		
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.motif_3.0.0/ws/motif"
			       file="${eclipse.home}/plugins/org.eclipse.swt.motif_${maven.eclipse.plugin.swt.version}/ws/motif/swt.jar"/>		   
				   		   				   
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.photon_3.0.0/ws/photon"
			       file="${eclipse.home}/plugins/org.eclipse.swt.photon_${maven.eclipse.plugin.swt.version}/ws/photon/swt.jar"/>		   
				   				   		   				   
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.win32_3.0.0/ws/win32"
			       file="${eclipse.home}/plugins/org.eclipse.swt.win32_${maven.eclipse.plugin.swt.version}/ws/win32/swt.jar"/>
		
	<ant:available property="swt.plugin.dir" 
			       value="org.eclipse.swt.carbon_3.0.0/ws/carbon"
			       file="${eclipse.home}/plugins/org.eclipse.swt.carbon_${maven.eclipse.plugin.swt.version}/ws/carbon/swt.jar"/>

	<!-- install swt library into maven.repo.local -->
	<ant:copy file="${eclipse.home}/plugins/${swt.plugin.dir}/swt.jar" 
  		      tofile="${maven.repo.local}/${maven.eclipse.plugin.swt.groupId}/jars/${maven.eclipse.plugin.swt.artifactId}-${maven.eclipse.plugin.swt.version}.jar"/>  
  		      
  </goal>
  
  
  <goal name="eclipse-plugin:create-library-artifacts" 
  		prereqs="eclipse-plugin:init" 
  		description="foreach pom dependency, create eclipse plugin that exports the given dependenvy. generated plugins are outpoutted to ${maven.eclipse.plugin.ext.dir}">
    <j:forEach var="artifact" items="${pom.artifacts}">
      <j:set var="dependency" value="${artifact.dependency}"/>
      <j:if test="${!(dependency.groupId.equals('eclipse')) and dependency.getProperty('eclipse.plugin.bundle') == 'true'}">
 
 		<!-- init variables -->
 		<mevenide:adapt-version var="depVersion" version="${dependency.version}"/>
 		<j:set var="dependencyPluginDir" value="${maven.eclipse.plugin.ext.dir}/${dependency.groupId}_${depVersion}"/>
		<ant:mkdir dir="${dependencyPluginDir}"/>
        
        <util:file name="${artifact.path}" var="artifactJar"/>
      
        <!-- create plugin descriptor -->
        <j:file name="${dependencyPluginDir}/plugin.xml" prettyPrint="true">
          <x:element name="plugin">
            <x:attribute name="id">${dependency.groupId}</x:attribute>
            <x:attribute name="name">${dependency.artifactId} Library</x:attribute>
            <x:attribute name="version">${dependency.version}</x:attribute>
            <!-- xml:attribute name="provider-name">...</x:attribute -->
            <x:element name="runtime">
              <x:element name="library">
                <x:attribute name="name">${artifactJar.getName()}</x:attribute>
                <x:element name="export">
                  <x:attribute name="name">*</x:attribute>
                </x:element>
                <!-- x:element name="packages">
                  <x:attribute name="prefixes">@todo</x:attribute>
                </x:element -->
              </x:element>
            </x:element>
          </x:element>
        </j:file>
        
        <!-- copy plugin files to output folder -->
        <eclipse-plugin:handle-licensing artifact="${artifact}" dest="${dependencyPluginDir}"/>
        
         <!-- copy library jars to output folder -->
        <ant:copy file="${artifact.path}" todir="${dependencyPluginDir}"/>
        
      </j:if>
    </j:forEach>
  </goal>
  
</project>
