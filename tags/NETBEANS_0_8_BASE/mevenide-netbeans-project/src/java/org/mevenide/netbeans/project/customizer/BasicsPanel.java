/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */
package org.mevenide.netbeans.project.customizer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mevenide.netbeans.project.MavenProject;
import org.mevenide.netbeans.project.customizer.ui.LocationComboFactory;
import org.mevenide.netbeans.project.customizer.ui.OriginChange;
import org.openide.util.NbBundle;


/**
 *
 * @author  Milos Kleint (ca206216@tiscali.cz)
 */
public class BasicsPanel extends JPanel implements ProjectPanel {
    private static Log logger = LogFactory.getLog(BasicsPanel.class);

    private ProjectValidateObserver valObserver;
    private DocumentListener listener;
    private MavenProject project;
   
    private OriginChange ocID;
    private OriginChange ocArtifactID;
    private OriginChange ocGroupID;
    private OriginChange ocPackage;
    private OriginChange ocCurrentVersion;
    private OriginChange ocName;
    
    private HashMap changes;
    private boolean initialized;
    
    /** Creates new form BasicsPanel */
    public BasicsPanel(MavenProject proj) {
	project = proj;
        changes = new HashMap();
        initComponents();
        String idWarning = "The id element in the POM is deprecated. Please use artifactId and groupId elements instead.";
        txtId.setToolTipText(idWarning);
        lblId.setToolTipText(idWarning);
        valObserver = null;
        //TODO add listeners for immediatePropagation stuff.
        setName(NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.name"));
        initialized = false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        ocID = LocationComboFactory.createPOMChange(project, false);
        btnId = (JButton)ocID.getComponent();
        lblArtifactID = new javax.swing.JLabel();
        txtArtifactID = new javax.swing.JTextField();
        ocArtifactID = LocationComboFactory.createPOMChange(project, false);
        btnArtifactID = (JButton)ocArtifactID.getComponent();
        lblGroupID = new javax.swing.JLabel();
        txtGroupID = new javax.swing.JTextField();
        ocGroupID = LocationComboFactory.createPOMChange(project, false);
        btnGroupID = (JButton)ocGroupID.getComponent();
        lblCurrentVersion = new javax.swing.JLabel();
        txtCurrentVersion = new javax.swing.JTextField();
        ocCurrentVersion = LocationComboFactory.createPOMChange(project, false);
        btnCurrentVersion = (JButton)ocCurrentVersion.getComponent();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        ocName = LocationComboFactory.createPOMChange(project, false);
        btnName = (JButton)ocName.getComponent();
        lblPackage = new javax.swing.JLabel();
        txtPackage = new javax.swing.JTextField();
        ocPackage = LocationComboFactory.createPOMChange(project, false);
        btnPackage = (JButton)ocPackage.getComponent();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        lblId.setLabelFor(txtId);
        lblId.setText("ID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lblId, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(txtId, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(btnId, gridBagConstraints);

        lblArtifactID.setLabelFor(txtArtifactID);
        lblArtifactID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblArtifactID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblArtifactID, gridBagConstraints);

        txtArtifactID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtArtifactID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtArtifactID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnArtifactID, gridBagConstraints);

        lblGroupID.setLabelFor(txtGroupID);
        lblGroupID.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblGroupID.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblGroupID, gridBagConstraints);

        txtGroupID.setMinimumSize(new java.awt.Dimension(30, 26));
        txtGroupID.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtGroupID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnGroupID, gridBagConstraints);

        lblCurrentVersion.setLabelFor(txtCurrentVersion);
        lblCurrentVersion.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblCurrentVersion.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblCurrentVersion, gridBagConstraints);

        txtCurrentVersion.setMinimumSize(new java.awt.Dimension(30, 26));
        txtCurrentVersion.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtCurrentVersion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnCurrentVersion, gridBagConstraints);

        lblName.setLabelFor(txtName);
        lblName.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblName.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblName, gridBagConstraints);

        txtName.setMinimumSize(new java.awt.Dimension(30, 26));
        txtName.setPreferredSize(new java.awt.Dimension(30, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        add(txtName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnName, gridBagConstraints);

        lblPackage.setLabelFor(txtPackage);
        lblPackage.setText(org.openide.util.NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.lblPackage.text"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(lblPackage, gridBagConstraints);

        txtPackage.setMinimumSize(new java.awt.Dimension(50, 26));
        txtPackage.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 0, 0);
        add(txtPackage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(btnPackage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        add(jPanel1, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArtifactID;
    private javax.swing.JButton btnCurrentVersion;
    private javax.swing.JButton btnGroupID;
    private javax.swing.JButton btnId;
    private javax.swing.JButton btnName;
    private javax.swing.JButton btnPackage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblArtifactID;
    private javax.swing.JLabel lblCurrentVersion;
    private javax.swing.JLabel lblGroupID;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPackage;
    private javax.swing.JTextField txtArtifactID;
    private javax.swing.JTextField txtCurrentVersion;
    private javax.swing.JTextField txtGroupID;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPackage;
    // End of variables declaration//GEN-END:variables

    public void addNotify() {
        super.addNotify();
        if (!initialized) {
            initialized = true;
            populateChangeInstances();
        }
    }    
    
   private void populateChangeInstances() {
        String value = project.getOriginalMavenProject().getId();
        int location = project.getProjectWalker().getLocation("pom.id");
        if (value == null) {
            value = "";
        } 
        changes.put("pom.id", new TextComponentPOMChange("pom.id", value, location, txtId, ocID));
        btnId.setVisible(false);
        
        createArtifactIDChangeInstance();
        createGroupIDChangeInstance();
        createPOMChangeInstance("currentVersion", txtCurrentVersion, ocCurrentVersion);
        createPOMChangeInstance("name", txtName, ocName);
        createPOMChangeInstance("package", txtPackage, ocPackage);
   }

   private void createPOMChangeInstance(String propName, JTextComponent field, OriginChange oc) {
       String key = "pom." + propName; //NOI18N
       String value = project.getProjectWalker().getValue(key);
       int location = project.getProjectWalker().getLocation(key);
       if (value == null) {
           value = "";
       } 
       changes.put(key, new TextComponentPOMChange(key, value, location, field, oc));
   }    
   
   /**
    * special handling, if not defined explicitly, get it from org.apache.maven.Project instance
    * which has logic to obtain it from pom.id
    */
   private void createArtifactIDChangeInstance() {
       String key = "pom.artifactId";
       String value = project.getProjectWalker().getValue(key);
       int location = project.getProjectWalker().getLocation(key);
       if (value == null) {
           value = "";
           changes.put(key, new TextComponentPOMChange(key, value, location, txtArtifactID, ocArtifactID));
//           ocArtifactID.setSelectedLocationID(OriginChange.LOCATION_POM);
           txtArtifactID.setText(project.getOriginalMavenProject().getArtifactId());
       } 
       else {
           changes.put(key, new TextComponentPOMChange(key, value, location, txtArtifactID, ocArtifactID));
       }
   }   
   
   /**
    * special handling, if not defined explicitly, get it from org.apache.maven.Project instance
    * which has logic to obtain it from pom.id
    */
   private void createGroupIDChangeInstance() {
       String key = "pom.groupId";
       String value = project.getProjectWalker().getValue(key);
       int location = project.getProjectWalker().getLocation(key);
       if (value == null) {
           value = "";
           changes.put(key, new TextComponentPOMChange(key, value, location, txtGroupID, ocGroupID));
           txtGroupID.setText(project.getOriginalMavenProject().getGroupId());
       } 
       else {
           changes.put(key, new TextComponentPOMChange(key, value, location, txtGroupID, ocGroupID));
       }
   }   
   
     public void setResolveValues(boolean resolve) {
         // basics panel is somewhat special, this cal be called before addnotify..
        if (!initialized) {
            initialized = true;
            populateChangeInstances();
        }
        assignValue("id", true);
        assignValue("artifactId", resolve);
        assignValue("groupId", resolve);
        assignValue("currentVersion", resolve);
        assignValue("name", resolve);
        assignValue("package", resolve);
    }
     
   private void assignValue(String actionName, boolean resolve) {
       String key = "pom." + actionName; //NOI18N
       TextComponentPOMChange change = (TextComponentPOMChange)changes.get(key);
       if (resolve) {
           String value = project.getPropertyResolver().resolveString(change.getNewValue());
           change.setResolvedValue(value);
       } else {
           change.resetToNonResolvedValue();
       }
   }            
   
    public List getChanges() {
        List toReturn = new ArrayList();
        Iterator it = changes.values().iterator();
        while (it.hasNext()) {
            MavenChange change = (MavenChange)it.next();
            if (change.hasChanged()) {
                toReturn.add(change);
            }
        }
        return toReturn;
    }
    
    public void setValidateObserver(ProjectValidateObserver observer) {
        valObserver = observer;
        if (listener == null) {
            listener = new ValidateListener();
            txtId.getDocument().addDocumentListener(listener);
            txtArtifactID.getDocument().addDocumentListener(listener);
            txtGroupID.getDocument().addDocumentListener(listener);
            txtPackage.getDocument().addDocumentListener(listener);
        }
    }
    
    private void doValidate() {
        logger.debug("Listener called");
        ProjectValidateObserver obs = valObserver;
        if (obs != null) {
            obs.resetValidState(isInValidState(), getValidityMessage());
        }
    }
    
    /**
     * returns 0 for ok, otherwise a integer code.
     */
    private int doValidateCheck() {
        if (Math.min(txtArtifactID.getText().trim().length(),
                     txtGroupID.getText().trim().length()) == 0
             && txtId.getText().trim().length() == 0) {
            return 1;
        }
        if (txtPackage.getText().trim().length() > 0) {
            boolean matches = txtPackage.getText().matches("[a-zA-Z0-9\\.]*"); //NOI18N
            if (!matches) {
                return 2;
            } else {
                if (txtPackage.getText().startsWith(".") || txtPackage.getText().endsWith(".")) {
                    return 2;
                }
            }
        }
        return  0;
    }
    
    public boolean isInValidState() {
        return doValidateCheck() == 0;
    }
    
    public String getValidityMessage() {
        int retCode = doValidateCheck();
        String message = "";
        if (retCode == 1) {
            message = NbBundle.getMessage(BasicsPanel.class, "BasicsPanel.error1.text");
        }
        if (retCode == 2) {
            message = "Badly formed package name";
        }
        return message;
    }


    
    /**
     * attach to the fields that are validated.
     */
    private class ValidateListener implements DocumentListener {
        public void changedUpdate(DocumentEvent e) {
            doValidate();
        }
        
        public void insertUpdate(DocumentEvent e) {
            doValidate();
        }
        
        public void removeUpdate(DocumentEvent e) {
            doValidate();
        }
    }
}
