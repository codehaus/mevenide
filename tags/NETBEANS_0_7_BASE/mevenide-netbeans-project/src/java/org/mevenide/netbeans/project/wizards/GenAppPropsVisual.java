/* ==========================================================================
 * Copyright 2003-2004 Mevenide Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * =========================================================================
 */

package org.mevenide.netbeans.project.wizards;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import org.mevenide.genapp.GenAppTemplateFinder;
import org.mevenide.genapp.TemplateInfo;
import org.openide.WizardDescriptor;


public class GenAppPropsVisual extends JPanel {
    
    private TemplateInfo current;
    private Model currentModel;
            
    public GenAppPropsVisual() {
        initComponents();
        
        setName("Template's Properties");
        putClientProperty("NewProjectWizard_Title", "New Maven GenApp project");
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        return true; //validateBasics(wizardDescriptor);
    }
    
    void read(WizardDescriptor d) {
        TemplateInfo templ = (TemplateInfo)d.getProperty("gatemplate");
        if (current == null || !current.getName().equals(templ.getName())) {
            current = templ;
            loadModel();
            //reset props
            for (int i = 0; i < currentModel.getRowCount(); i++) {
                PropWrapper row  = currentModel.getRow(i);
                if ("id".equals(row.getProperty())) {
                    // from first panel
                    String val = (String)d.getProperty("property.id");
                    currentModel.setValueAt(val, i, 1);
                }
                d.putProperty("property." + row.getProperty(), null);
            }
        } else {
            for (int i = 0; i < currentModel.getRowCount(); i++) {
                PropWrapper row  = currentModel.getRow(i);
                String val = (String)d.getProperty("property." + row.getProperty());
                if (val != null) {
                    currentModel.setValueAt(val, i, 1);
                }
            }
        }
        
        
    }
    
    void store(WizardDescriptor d) {
        for (int i = 0; i < currentModel.getRowCount(); i++) {
            PropWrapper row  = currentModel.getRow(i);
            d.putProperty("property." + row.getProperty(), row.getValue());
        }
    }
    
    
    private void loadModel() {
        List lst = new ArrayList();
        String[] params = current.getParameters();
        for (int i = 0; i < params.length; i++) {
            PropWrapper wr = new PropWrapper(current, params[i], current.getDefaultValue(params[i]));
            wr.setValue(current.getDefaultValue(params[i]));
            lst.add(wr);
        }
        currentModel = new Model(lst);
        tblProps.setModel(currentModel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProps = new javax.swing.JTable();
        lblProps = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));
        tblProps.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProps);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(jScrollPane1, gridBagConstraints);

        lblProps.setLabelFor(tblProps);
        lblProps.setText("Template's properties");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(lblProps, gridBagConstraints);

    }//GEN-END:initComponents
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        tblProps.requestFocus();
    }
    
//    boolean validateBasics(WizardDescriptor wizardDescriptor) {
//        if (txtProjectName.getText().length() == 0 ) {
//            wizardDescriptor.putProperty( "WizardPanel_errorMessage", "Project Name is not valid folder name.");
//            return false; // Display name not specified
//        }
//        File destFolder = new File( txtFolder.getText() );
//        File[] kids = destFolder.listFiles();
//        if ( destFolder.exists() && kids != null && kids.length > 0) {
//            // Folder exists and is not empty
//            wizardDescriptor.putProperty( "WizardPanel_errorMessage", "Project Folder already exists and is not empty.");
//            return false;
//        }
//        wizardDescriptor.putProperty( "WizardPanel_errorMessage", "" );
//        return true;
//    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblProps;
    private javax.swing.JTable tblProps;
    // End of variables declaration//GEN-END:variables
    
    
    private static class PropWrapper {
        private TemplateInfo info;
        private String prop;
        private String value;
        private String name;
        PropWrapper(TemplateInfo i, String property, String displayName) {
            info = i;
            prop = property;
            name = displayName;
        }
        
        public TemplateInfo getInfo() {
            return info;
        }
        
        public String getProperty() {
            return prop;
        }
        
        public String getValue() {
            return value;
        }
        
        public void setValue(String val) {
            value = val;
        }
        
        public String getDisplayName() {
            return name;
        }
        
    }
    
    private class Model implements TableModel, TableCellRenderer {
        
        private List rows;
        private DefaultTableCellRenderer delegate = new DefaultTableCellRenderer();
        private List listeners;
        public Model(List rowlist) {
            rows = rowlist;
            listeners = new ArrayList();
        }
        
        public void setValueAt(Object aValue, int row, int column) {
            if (column == 1) {
                PropWrapper rw = (PropWrapper)rows.get(row);
                rw.setValue((String)aValue);
                fireTableChanged(new TableModelEvent(this, row, row, column));
            }
        }
        
        private void fireTableChanged(TableModelEvent event) {
            TableModelListener[] lst = new TableModelListener[listeners.size()];
            lst = (TableModelListener[])listeners.toArray(lst);
            for (int i = 0; i < lst.length; i++) {
                lst[i].tableChanged(event);
            }
        }

        public String getColumnName(int column) {
            if (column == 0) {
                return "Prompt";
            }
            if (column == 1) {
                return "Value";
            }
            return "XXX";
        }

        public Class getColumnClass(int columnIndex) {
            return String.class;
        }

        public PropWrapper getRow(int row) {
            return (PropWrapper)rows.get(row);
        }
        
        public Object getValueAt(int row, int column) {
            PropWrapper rowObj = (PropWrapper)rows.get(row);
            if (column == 0) {
                String str = rowObj.getInfo().getPromptText(rowObj.getProperty());
                return str != null ? str : rowObj.getProperty();
            }
            if (column == 1) {
                return rowObj.getValue();
            }
            return "";
        }

        public int getRowCount() {
            return rows.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public void addTableModelListener(TableModelListener tableModelListener) {
            listeners.add(tableModelListener);
        }

        public boolean isCellEditable(int row, int column) {
            return column != 0;
        }

        public void removeTableModelListener(TableModelListener tableModelListener) {
            listeners.remove(tableModelListener);
        }
        
        public Component getTableCellRendererComponent(JTable jTable, Object obj,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            Component com = delegate.getTableCellRendererComponent(jTable,  obj, isSelected, hasFocus, row, column);
            if (com instanceof JLabel && column == 0) {
                JLabel lbl = (JLabel)com;
                PropWrapper wr = (PropWrapper)rows.get(row);
                lbl.setBackground(UIManager.getColor("Label.background"));
            }
            return com;
        }
        
    }
}
