#goals cache
#Thu Sep 11 20:45:37 EDT 2003
ear\:ear=Build an ear file>ear\:init
license\:transfer=Generate a xml file from your license file>xdoc\:init
repository\:audit-create-licenses=create the license directories, for all groups in the audit file, in the repository>
pom\:contentvalidate=Validate the content of the Maven POM>
multiproject\:deploy-callback=null>
uberjar\:install-snapshot=Install the snapshot version of the uberjar in the local repository>uberjar\:uberjar
touchstone-partner-goal-A=null>
jbuilder\:generate-library=Generate JBuilder [id_project].library file>
plugin\:generate-navigation=Generate navigation.xml for the plugin>
console\:listGoals=List all available goals>
ejb\:init=Initialize filesystem and other resources for an ejb build>
webserver\:init=Initialize resources needed for the plugin>
ejb=Build an ejb file>ejb\:ejb
pom=Validate the Maven XML project descriptor>pom\:validate
jellydoc\:xml-doclet=Creates an XML representation of the doclet information>jellydoc\:init
dist\:deploy=Deploy a distribution>
ant\:generate-build=Generate an Ant build file>
jboss\:undeploy-exploded-warfile=Undeploy the result of the 'war\:webapp' goal. Note that 'maven.war.webapp.dir' *must* end with '.war' for this to work correctly.>
was40\:start-appserver=Start a websphere application server>
maven-checkstyle-plugin\:deregister=null>
war\:clean=Remove all artifacts created by war plugin>
war\:webapp=Build a webapp directory>war\:init
convert-snapshots-auto=null>
maven-clover-plugin\:report=null>
cactus=Run all Cactus Test Cases>cactus\:test
idea\:generate-project=Generate IDEA .ipr and .iws project files>
maven-simian-plugin\:analyze=null>
maven-developer-activity-plugin\:deregister=null>
maven-clover-plugin\:register=null>
pom\:update=Update the POM from its current version to a specified version>
maven-javadoc-plugin\:register=null>
test\:match-test=[deprecated] please use the test\:match goal instead>
maven-faq-plugin\:deregister=null>
j2ee\:validate-war=Check that a war file is valid>
plugin=Build a plugin jar and install to the maven.local.repo>
torque\:om-zip=Moves source om files to separate jar and out of the source tree>check-om-zip
torque\:datadump=dump data from database into xml file>torque\:init
jboss\:init=null>
test=Test the application>test\:test
jbuilder=Generate JBuilder project files>jbuilder\:generate-library,jbuilder\:generate-project
eclipse=Generate Eclipse project files>eclipse\:generate-project,eclipse\:generate-classpath
xdoc\:jelly-init=Set up jelly xdoc requirements>
jar=Create the deliverable jar file.>jar\:jar
faq=Generates an FAQ xdoc file from an FAQ XML document>
ashkelon\:generate-xml=null>
pmd=Static Code Analyzer>
multiproject=Run the site goal of all subprojects>multiproject\:site
cactus\:compile=Compiles the cactus tests>cactus\:init
maven-cactus-plugin\:deregister=null>
uberjar\:deploy-snapshot=Deploys the snapshot version of  the uberjar to remote repository>uberjar\:uberjar
maven-changelog-plugin\:register=null>
jar\:install-snapshot=Install a snapshot jar in the local repository>jar\:snapshot
torque\:ojb=Generates the repository and om for ojb (experimental)>
word2html\:generate=Generate HTML docs from Word via CScript>xdoc\:init,word2html\:prepare-filesystem
jboss\:deploy-ear=Deploy ${maven.final.name}.ear>
test\:single=Execute a single test defined using the 'testcase' variable>test\:compile
jar\:deploy=Deploy a jar to the remote repository>
pom\:validate=Validate the Maven XML project descriptor>
jbuilder\:generate-project=Generate JBuilder [id_project].jpx file>
docbook\:transform=Transform any docbook-simple source into xdocs for later use>xdoc\:init
maven-license-plugin\:report=Generate an XML file from the license.txt>
maven-jdepend-plugin\:report=Generate a dependency report with JDepend>
jboss\:dist=Generate zipped JBoss configuration>jboss\:package
was40\:deploy-to-servergroup=Deploy an application to a server group>
repository\:copy-snapshot-jar=copy a snapshot jar, specified by groupId and artifact, to the repository>
maven-junit-report-plugin\:deregister=null>
latka=Run the project's latka tests>
maven-linkcheck-plugin\:register=null>
jboss\:deploy-exploded-warfile=Invoke the 'war\:webapp' goal and deploy the result. Note that 'maven.war.webapp.dir' *must* end with '.war' for this to work correctly.>war\:webapp
xdoc=Generate html project documentation xdoc sources>xdoc\:generate-from-pom,xdoc\:transform
aspectj=Compile code with AspectJ>aspectj\:compile
dist\:deploy-snapshot=Deploy a snapshot distribution>
idea=Generate IDEA project files>idea\:generate-project
native\:install=Install the lib in the local repository>native\:compile
dist\:deploy-src=Deploy a source distribution>
ear\:init=Initialise filesystem and other resources for an ear>
maven-javadoc-plugin\:deregister=null>
site\:ear=Create an EAR File from the generated site>site\:war
javadoc=null>maven-javadoc-plugin\:report
cactus\:test=Run all Cactus Test Cases>cactus\:init,cactus\:cactifywar
war\:deploy=Deploys the war to the remote repository>war\:war
ear\:install=Install the ear in the local repository>ear\:ear
release=null>
ear\:install-snapshot=Install the snapshot version of the ear in the local repository>ear\:ear
jboss\:deploy-warfile=Invoke the 'war' goal and deploy the result>war\:war
cactus\:single=Run a single Cactus Test Case>cactus\:init,cactus\:cactifywar
gump=Generate Gump descriptor from Maven descriptor>gump\:generate-descriptor
jellydoc\:doclet=A doclet which outputs all the Jelly tag related metadata as XML>jellydoc\:init
was40\:deploy-ear=Deploy an enterprise application>
appserver\:stop=Stop a appserver instance>appserver\:init
jboss\:install=Install the zip into the local repository>jboss\:dist
torque\:datadtd=Generates the DATA DTD for your project>torque\:init
dist\:build-src=Build the source distribution.>dist\:build-setup,dist\:prepare-src-filesystem
java\:prepare-filesystem=Create the directory structure needed to compile>
eclipse\:generate-project=Generate Eclipse .project file>
war\:install=Install the war in the local repository>war\:war
pdf\:pdf=Generate PDF project documentation>pdf\:init,fo
maven-tasklist-plugin\:deregister=null>
war\:war=Build a war file>war\:webapp
maven-linkcheck-plugin\:deregister=null>
jboss\:undeploy-ear=Undeploy ${maven.final.name}.ear>
maven-file-activity-plugin\:register=null>
maven-file-activity-plugin\:deregister=null>
site\:run-reports=null>xdoc\:register-reports
java\:compile=Compile the project>java\:prepare-filesystem
word2html\:prepare-filesystem=Create directories needed for the plugin>
maven-javadoc-plugin\:report=Generate API documentation>xdoc\:init
repository\:audit-generate-poms=generate a pom for all the groupId's in the audit file>
maven-jxr-plugin\:deregister=null>
torque\:sql2xml=creates an xml schema from an sql schema>torque\:init
torque\:om-zip-worker=null>
maven-jellydoc-plugin\:report=Generates the tag documentation>jellydoc
jar\:jar=Create the deliverable jar file.>test\:test
java\:jar=Create the deliverable jar file.>jar\:jar
ear\:deploy=Deploys the ear to the remote repository>ear\:ear
ejb\:install-snapshot=Install the snapshot version of the ejb in the local repository>ejb\:ejb
maven-changes-plugin\:deregister=null>
was40\:start-servergroup=Start a websphere server group>
webserver\:clean=Safely delete an installed webserver instance>webserver\:init
shell\:zsh=Generate Zsh files>
repository\:audit-create-directory=create the directory, specified by directoryName, for all groups in the audit file>
native\:compile=Compile the native compiler>native\:jniheader
clover=Generate HTML test coverage reports with Clover>clover\:html-report
maven-clover-plugin\:deregister=null>
jdee=Generate JDEE project file>jdee\:generate-project
repository\:audit-copy-license=copy the license for the specified groupId to the repository>
maven-linkcheck-plugin\:clearcache=Removes the cache file>
statcvs\:generate=Generate CVS statistics for the current CVS project>
jalopy\:taskdef=Define the jalopy task to Ant and Jelly>
maven-cactus-plugin\:register=null>
maven-faq-plugin\:register=null>
was40\:stop-servergroup=Stop a websphere server group>
pdf\:init=null>xdoc\:init
maven-pmd-plugin\:register=null>
tiny-app=null>
torque\:om-generate=null>torque\:init
ear=Build an ear file>ear\:ear
war\:install-snapshot=Install the snapshot version of the war in the local repository>war\:war
jnlp\:generate-keystore=Generate a keystore file>
was40\:app-start=Start enterprise application>
jboss=Creates a specific JBoss server configuration>jboss\:configure
war\:load=null>
torque\:om=Generate the Peer-based object model from *-schema.xml files>torque\:init,torque\:om-check
xdoc\:init=Generates the directory structure required for xdocs>
test\:ui=Starts the Swing TestRunner front end>test\:compile
maven-file-activity-plugin\:report=Generate developer and file activity reports>
maven-tasklist-plugin\:register=null>
dist\:build=Build a complete distribution.>dist\:build-bin,dist\:build-src
maven-linkcheck-plugin\:report-real=Generate link check results and then transform to HTML>
repository\:audit-copy-licenses=copy all licenses in the audit file to the repository>
increment-snapshot-version=null>
dist\:prepare-bin-filesystem=Builds the binary distribution file system.>xdoc\:init,jar\:jar,javadoc\:generate
appserver\:init=Initialize resources needed for the plugin>
jboss\:configure=Creates a specific JBoss server configuration>jboss\:init
xdoc\:validate=Validate xdocs match the schema>pom\:taglib
multiproject\:install=Run 'artifact'\:install for all subprojects>
maven-simian-plugin=Generate Simian (Code Similarity Analyzer) report.>maven-simian-plugin\:report
torque\:jdbc=jdbc to xml>torque\:init
html2xdoc=Generates XDoc documentation from normal HTML files>xdoc\:init
multiproject\:install-callback=null>
eclipse\:external-tools=Generate an Eclipse external tool for each goal>
torque\:init=Build classpath and define tasks>
cactus\:cactifywar=Cactify the application war>cactus\:compile
codeswitcher\:init=Validate the Maven XML project descriptor>
appserver\:clean=Safely delete an installed appserver instance>appserver\:init
maven-junit-report-plugin\:register=null>
gump\:generate-descriptor=Generate Gump descriptor from Maven descriptor>
was40\:stop-appserver=Stop a websphere application server>
jdeveloper=Generate JDeveloper project files>jdeveloper\:generate-project
maven-ashkelon-plugin\:deregister=null>
dist\:build-setup=Set up directories for a distribution build>
pom\:install=Install POM in the local repository.>
webserver\:cycle=Forced install and start of a webserver instance>webserver\:init
changes\:report=Generate a changes report>
ejb\:ejb=Build an ejb file>ejb\:init
multiproject\:create-nav=null>
uberjar\:init=null>
checkstyle\:init=null>
multiproject\:site=Run the site goal of all subprojects>
ejb\:deploy-snapshot=Deploys the snapshot version of the ejb to remote repository>ejb\:ejb
test\:single-test=[deprecated] please use the test\:single goal instead>
statcvs=Generate CVS statistics for the current CVS project>statcvs\:generate
maven-statcvs-plugin\:report=null>
pdf=Generate PDF project documentation>pdf\:pdf
junitdoclet=Generate unit tests>
test\:test-resources=Copy any resources that must be present for run tests>test\:prepare-filesystem
convert-snapshots=null>
torque\:sql-check=Determine if the SQL files need to be generated>
hibernate\:init=null>
webserver\:restart=Restart a webserver instance>webserver\:init
maven-ashkelon-plugin\:report=null>
pom\:install-snapshot=Install the snapshot version of the POM in the local repository>
jboss\:start=Starts JBoss with our specific server configuration>jboss\:init
latka\:jmeter-convert=Convert a jmeter jmx file to a latka suite>
jnlp=Generate JNLP file and sign all jars>jnlp\:generate-jnlp
wizard\:ui=Run the Maven Swing Wizard>
maven-changes-plugin\:register=null>
uberjar\:install=Install the uberjar in the local repository>uberjar\:uberjar
jdeveloper\:generate-project=Generate jdeveloper .jpr>jdeveloper\:scanSources
jar\:snapshot=Create a snapshot jar, ie 'id-YYYYMMDD.hhmmss.jar'>
maven-jellydoc-plugin\:deregister=null>
repository\:audit-generate-pom=generate a pom for the groupId provided, based on the audit file>
shell=Generate Zsh files>
tasklist=null>maven-tasklist-plugin\:report
plugin\:generate-docs=Generate navigation, goals and properties docs>
pom\:deploy=Deploy POM to the central repository.>
dist=Build a complete distribution.>dist\:build
multiproject\:deploy=Run 'artifact'\:deploy for all subprojects>
jboss\:undeploy-warfile=Undeploy the result of the 'war' goal>war\:init
torque\:create-db=generates the target database>torque\:init
xdoc\:generate-from-pom=Generates xdocs for site based on project descriptor>xdoc\:init,xdoc\:register-reports
perforce\:dummy=No use>
maven-changelog-plugin\:deregister=null>
torque\:datasql=generates sql from data xml>torque\:init
plugin\:generate-properties=Generate properties.xml for the plugin>
test\:compile=Compile the TestCases and TestSuites>java\:compile,java\:jar-resources,test\:prepare-filesystem,test\:test-resources
maven-simian-plugin\:report=null>maven-simian-plugin\:analyze
multiproject\:install-snapshot=Run 'artifact'\:install-snapshot for all subprojects>
appserver\:cycle=Forced install and start of a appserver instance>appserver\:init
artifact\:load=null>
was40\:app-stop=Stop an enterprise application>
cactus\:init=null>war\:war
torque\:check-om-zip=null>torque\:init
eclipse\:add-maven-repo=Ensure that the classpath variable MAVEN_REPO is available>
maven-statcvs-plugin\:deregister=null>
clover\:on=Create the needed directory structure>
multiproject\:install-snapshot-callback=null>
checkstyle\:license=null>checkstyle\:init
maven-simian-plugin\:deregister=null>
torque\:ojb-repository=Generates the repository for ojb (experimental)>torque\:init
torque\:insert-sql=inserts the generated sql>torque\:init
was40\:stop=Stops a websphere node>
appserver\:install=Install a appserver instance>appserver\:init
antlr\:generate=Generate source from antlr grammars>antlr\:prepare-filesystem
struts=Ensure a war file containing a Struts application is valid>struts\:validate-war
site\:deploy=deploy the generated site docs>
aspectj\:ajdoc=Javadoc source using ajdoc>
site\:war=Create a WAR File from the generated site>site\:init,site
site\:generate=null>site
maven-pmd-plugin\:deregister=null>
fo\:fo=Generate XSL\:FO project documentation>pdf\:init
touchstone-goal-E=null>
was40\:undeploy-ear=Remove an enterprise application>
touchstone-goal-D=null>
maven-jellydoc-plugin\:register=null>
touchstone-goal-C=null>
touchstone-goal-B=null>
repository\:copy-artifact=copy an artifact, specified by groupId, artifact and type, to the repository>
test\:eclipse=null>
touchstone-goal-A=null>
maven-jxr-plugin\:register=null>
maven-simian-plugin\:register=null>
clean\:clean=Remove all project artifacts>
ear\:deploy-snapshot=Deploys the snapshot version of  the ear to remote repository>ear\:ear
checkstyle=Perform checkstyle checks>checkstyle\:report
checkstyle\:report=Perform checkstyle checks>checkstyle\:init,checkstyle\:license
ejb\:install=Install the ejb in the local repository>ejb\:ejb
repository\:audit-rename-licenses=rename/link all licenses from their original name to ${groupId}.license>
repository\:copy-jar=copy a jar, specified by groupId and artifact, to the repository>
xdoc\:jelly-transform=transform xdocs using jelly/jsl rather than dvsl>xdoc\:init,xdoc\:jelly-init,xdoc\:register-reports
cactus\:report=Generate a report from the test results>
torque\:id-table-init-sql=generates initialization sql for ID Broker>torque\:init
multiproject\:deploy-snapshot-callback=null>
uberjar\:uberjar=Build an uberjar>jar\:jar,uberjar\:init
uberjar\:deploy=Deploys the uberjar to the remote repository>uberjar\:uberjar
java\:jar-resources=Copy any resources that must be present in the deployed JAR file>
multiproject\:artifact-callback=null>
clover\:swing-report=Generate Swing test coverage reports with Clover>clover\:test
torque\:doc=Generates documentation for your datamodel>torque\:init
clean=Remove all project artifacts>clean\:clean
uberjar=Build a uberjar file>uberjar\:uberjar
maven-license-plugin\:register=null>
maven-developer-activity-plugin\:register=null>
fo=Generate XSL\:FO project documentation>fo\:fo
ear\:generate-ear-descriptor=Generates the ear descriptor>
clover\:test=null>clover\:on
jboss\:package=Creates a specific JBoss server configuration>jboss\:init,jboss\:configure
site\:sshdeploy=Deploy the generated site docs using ssh>site\:init
aspectj\:compile=Compile code with AspectJ>
repository\:delete-project=delete a project, specified by groupId, in the repository>
maven-linkcheck-plugin\:report=null>
eclipse\:external-tools-21=Generate an Eclipse 2.1 external tool for each goal>
xdoc\:dump-report-settings=null>
test\:prepare-filesystem=Create the needed directory structure>
ear\:load=null>
pom\:deploy-snapshot=Deploys the snapshot version of the POM to remote repository>
maven-junit-report-plugin\:report=Generate a report from the test results>
maven-jdepend-plugin\:deregister=null>
site\:init=null>xdoc\:init
xdoc\:register-reports=null>
xdoc\:transform=Generate html project documentation xdoc sources>xdoc\:init
appserver\:reinstall=Reinstall a appserver instance>appserver\:init
castor\:prepare-filesystem=Make any necessary directories for castor processing>
was40\:start=Starts was40 Application Server>
jboss\:deploy-ejb=Deploy ${maven.final.name}.jar>
dt=null>clean,tiny-app,war
jnlp\:generate-jnlp=Generate the .jnlp file and sign all jars>jar\:jar
multiproject\:artifact=\ Builds all artifacts for all subproject>
dist\:prepare-src-filesystem=Builds the source distribution file system.>
jdeveloper\:scanSources=Scans the source in order to integrate them into JDeveloper files>
clover\:html-report=Generate HTML test coverage reports with Clover>
webserver\:start=Start a webserver instance>webserver\:init
ejb\:deploy=Deploys the ejb to the remote repository>ejb\:ejb
war\:init=Initialize the file system and attain any necessary goals>
multiproject\:goal=Run a given goal on all projects>
license=Generate an XML file from the license file>license\:transfer
test\:match=Execute all the tests matching the given 'testmatch' variable>test\:compile
eclipse\:generate-classpath=Generate Eclipse .classpath file>
jar\:deploy-snapshot=Deploy a snapshot jar to the remote repository>
war=Build a war file>war\:war
xdoc\:copy-resources=copy static resources for use in xdocs generated html>xdoc\:init
torque=Generates SQL files and Peer-based OM objects>
torque\:sql=generates the SQL for your project>torque\:init,torque\:sql-check
console\:help=Print the help message.>
latka\:test=Run the project's latka tests>
javadoc\:generate=null>maven-javadoc-plugin\:report
xdoc\:copy-user-resources=Copy user provided resources to docs destination>xdoc\:init
dist\:deploy-bin=Deploy a binary distribution>
plugin\:deploy=Install a specific unpacked plugin but no new jar>plugin
jellydoc\:init=null>
ant=Generate an Ant build file>ant\:generate-build
hibernate\:schema-export=null>hibernate\:init
multiproject\:deploy-snapshot=Run 'artifact'\:deploy-snapshot for all subprojects>
latex\:prepare-filesystem=Prepare the filesystem for latex processing>
war\:deploy-snapshot=Deploys the snapshot version of  the war to remote repository>war\:war
webserver\:stop=Stop a webserver instance>webserver\:init
torque\:om-check=null>torque\:init
antlr\:prepare-filesystem=Make any necessary directories for antlr processing>
latka\:single=Execute a single test defined using the 'testcase' variable>
pmd\:report=Generate source code report with PMD>
maven-ashkelon-plugin\:register=null>
uberjar\:classworlds-conf=Generates a classworlds conf>uberjar\:init
jar\:install=Install the jar in the local repository>jar\:jar
console=Run the Maven console>
dist\:build-bin=Build the binary distribution.>dist\:build-setup,dist\:prepare-bin-filesystem
repository\:create-project=create a project, specified by groupId, in the repository>
maven-jdepend-plugin\:register=null>
plugin\:install=Install the plugin jar, prepare Maven to expand it locally and clear caches>plugin
site=Generate the web site>
plugin\:generate-goals=Generate goals.xml for the plugin>
was40\:list-node=Obtain the list of nodes on the WebSphere Application Server>
native\:jniheader=make jniheaders for classes>java\:compile
validate-pom-for-release=null>
appserver\:restart=Restart a appserver instance>appserver\:init
appserver\:start=Start a appserver instance>appserver\:init
webserver\:install=Install a webserver instance>webserver\:init
latex\:generate=Generate documentation from latex source>latex\:prepare-filesystem
torque\:om-zip-worker-delete=null>
site\:fsdeploy=Deploy the generated site by copying to the site directory>site\:init
jboss\:undeploy-ejb=Undeploy ${maven.final.name}.jar>
jboss\:stop=Stops JBoss>jboss\:init
maven-statcvs-plugin\:register=null>
jellydoc=Generates the tag documentation>jellydoc\:doclet
xdoc\:performJSL=Allows the LinkCheck plugin to xdoc a single directory>
was40=Obtain the list of nodes on the WebSphere Application Server>
jalopy=Format all sources with code convention conformance>jalopy\:format
native=Native compiler>native\:compile
test\:test=Test the application>test\:compile
maven-license-plugin\:deregister=null>
faq\:report=Generate FAQs>
maven-changelog-plugin\:report=Generate a changelog report>
maven-developer-activity-plugin\:report=Generate developer and file activity reports>
maven-checkstyle-plugin\:register=null>
genapp=Generate Application using 'maven -Dpackage\=org.mycompany.project genapp'>
jdee\:generate-project=Generate project file in basedir>
cactus\:match=Execute all the Cactus tests matching the given 'testmatch' variable>cactus\:init,cactus\:cactifywar
maven-jxr-plugin\:report=Generate HTML cross reference sources>
torque\:sql-generate=null>torque\:init
maven-tasklist-plugin\:report=Generate a list of tasks from @todo tags in your code>xdoc\:init
struts\:validate-war=Ensure a war file containing a Struts application is valid>
webserver\:reinstall=Reinstall a webserver instance>webserver\:init
jalopy\:format=Format all sources with code convention conformance>jalopy\:taskdef,java\:compile
j2ee=Check that a war file is valid>j2ee\:validate-war
